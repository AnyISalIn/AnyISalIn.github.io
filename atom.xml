<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无趣</title>
  
  <subtitle>享受自由</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://anyisalin.github.io/"/>
  <updated>2019-12-09T08:23:07.778Z</updated>
  <id>https://anyisalin.github.io/</id>
  
  <author>
    <name>AnyISalIn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>600 行代码构建混合云应用管理平台</title>
    <link href="https://anyisalin.github.io/2019/12/08/build-minimal-multi-cloud-application-management-platform-based-on-terraform/"/>
    <id>https://anyisalin.github.io/2019/12/08/build-minimal-multi-cloud-application-management-platform-based-on-terraform/</id>
    <published>2019-12-08T15:41:08.000Z</published>
    <updated>2019-12-09T08:23:07.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>混合云管理平台 (简称 CMP) 前几年比较火，笔者工作生涯中接触的第一个项目就是 CMP，后面几年也有关注过其他 CMP 产品，但是大体都是完成 IaaS 资源整合后，在其之上再提供服务目录 <code>Service Catalog</code> 实现云资源的编排。</p><p>但是由于 CMP 需要对接很多云服务商 (简称 Provider)，所以大部分的 CMP 都非常的复杂，就算有类似 <code>libcloud</code> <code>fog</code> 之类的库，大部分的开发时间也都会浪费在与不同 Provider 对接与状态管理上。</p><p>笔者周末的时候发现 <code>Terraform</code> 基本已经支持所有常见的 Provider，并支持在其之上提供资源编排，功能及其强大，但是可惜 <code>Terraform</code>  并没有暴露出 API，社区也没有基于其开发的管理平台。</p><p>笔者遂即想基于 <code>Terraform</code> 构建一个混合云应用管理平台，实现以下功能</p><ul><li>多云资源的管理</li><li>提供服务模板，可定义参数，根据定义好的服务模板可部署实例</li><li>实例的生命周期管理 (创建/升级/销毁/同步)</li></ul><a id="more"></a><h2 id="Terraform-简介"><a href="#Terraform-简介" class="headerlink" title="Terraform 简介"></a>Terraform 简介</h2><blockquote><p>Terraform是一种用于安全有效地构建、更改和版本化基础设施的工具。Terraform 可以管理现有的和流行的服务提供商以及定制的内部解决方案。</p><p>Terraform 的配置文件描述了运行单个应用程序或复杂的应用架构所需的资源。通过配置文件，Terraform 生成一个执行计划，描述它将做什么来达到所需的状态，然后执行它来构建所描述的基础设施。当配置发生变化时，Terraform能够确定发生了什么变化，并创建可以应用的增量执行计划。</p></blockquote><p>我们来看一个最简单的 Terraform 例子，这里定义了一台 OpenStack 虚拟机</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> providers.tf</span><br><span class="line">provider "openstack" &#123;</span><br><span class="line">  region      = "RegionOne"</span><br><span class="line">  insecure = "true"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> main.tf</span><br><span class="line">resource "openstack_compute_instance_v2" "terraform" &#123;</span><br><span class="line">  name            = "$&#123;var.vm_name&#125;"</span><br><span class="line">  image_name      = "$&#123;var.image&#125;"</span><br><span class="line">  flavor_name     = "$&#123;var.flavor&#125;"</span><br><span class="line">  key_pair        = "terraform"</span><br><span class="line">  security_groups = ["terraform"]</span><br><span class="line"></span><br><span class="line">  network &#123;</span><br><span class="line">    uuid = "$&#123;var.network&#125;"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> variables.tf</span><br><span class="line">variable "image" &#123;</span><br><span class="line">  default = "Ubuntu 16.04"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.... # 内容过长省略</span><br><span class="line"></span><br><span class="line">variable "vm_name" &#123;</span><br><span class="line"> default = "terraform"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> outputs.tf</span><br><span class="line">output "address" &#123;</span><br><span class="line">  value = "$&#123;openstack_networking_floatingip_v2.terraform.address&#125;"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output "power_state" &#123;</span><br><span class="line">  value = "$&#123;openstack_compute_instance_v2.terraform.power_state&#125;"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraform 中管理这台虚拟机的生命周期只需要以下几个步骤</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> terraform plan # 生成执行计划</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> terraform apply -var vm_name='vm1' # 执行变更</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> terraform refresh # 刷新资源状态</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> terraform show -json # 查看资源状态</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> terraform destroy # 销毁资源</span><br></pre></td></tr></table></figure><p>回到我们想要构建的平台，我们需要完成实例的生命周期管理，Terraform 通过以上命令都能够做到</p><p>服务模板参数的支持我们可以通过 Terraform 原生的 <code>variable</code> 定义来做</p><p>多个云提供商也是 Terraform 原生支持的</p><p>但是由于 Terraform 没有提供原生 API，所以我们只能通过拼接命令的方式去调用</p><h2 id="资源抽象"><a href="#资源抽象" class="headerlink" title="资源抽象"></a>资源抽象</h2><p>要将 Terraform 进行封装成所期望的平台还要对 Terraform 的资源在进行一层抽象</p><p>首先我们分析 Terraform 的配置文件，主要分为以下几块</p><ul><li>resources</li><li>datasources</li><li>variables</li><li>outputs</li><li>providers</li></ul><p>providers 毫无疑问是可以复用的，所以我们先定义一个 Provider 的模型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span>:</span></span><br><span class="line">  name = StringField()</span><br><span class="line">  config = TextField()</span><br></pre></td></tr></table></figure><p>然后定义服务模板，模板和 Provider 是一对多关系 (和 Terraform 原生保持一致)，分别包含了以上几种配置文件，但是基于 variables 之上我们在封装一层用户变量，这些变量限定了实例允许传入的参数，这些参数会被传递到 <code>terramform apply</code> 和 <code>plan</code> 命令的 <code>-var</code> 选项中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span>:</span></span><br><span class="line">  name = StringField()</span><br><span class="line">  providers = OneToMany(Provider)</span><br><span class="line"> resources = TextField()</span><br><span class="line">  outputs = TextField()</span><br><span class="line">  datasources = TextField()</span><br><span class="line">  variables = TextField()</span><br><span class="line">  user_variables = ListField()</span><br></pre></td></tr></table></figure><p>最后我们定义实例，实例和模板是一对一关系，并包含很多状态和当前 terraform plan 的状态信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span>:</span></span><br><span class="line">  name = StringField()</span><br><span class="line">  template = OneToOne(Template)</span><br><span class="line">  variables = ListField()</span><br><span class="line">  stauts = StringField() <span class="comment"># ['INITIALIZATION', 'INITIALIZATION_ERROR', 'INITIALIZATION_SUCCEED', 'APPLYING', 'APPLY_ERROR', 'APPLY_SUCCEED', 'SYNCING', 'SYNC_ERROR', 'SYNC_SUCCEED', 'DESTROYING', 'DESTROY_ERROR']</span></span><br><span class="line">  states = ListField()</span><br></pre></td></tr></table></figure><h2 id="封装-Terraform"><a href="#封装-Terraform" class="headerlink" title="封装 Terraform"></a>封装 Terraform</h2><p>由于 Terraform 没有暴露出 API，笔者只能通过拼接命令的方式去封装</p><p>首先我们定义一个类，<code>TerraformManagerService</code> 提供了基础命令的封装，但是只拼接命令，不执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerraformManagerService</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, terraform_bin, plan_template_dir)</span>:</span></span><br><span class="line">        self.terraform_bin = terraform_bin</span><br><span class="line">        self.plan_template_dir = pathlib.Path(plan_template_dir)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'validate'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'apply'</span>, <span class="string">'-auto-approve'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'init'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'show'</span>, <span class="string">'-json'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">refresh</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'refresh'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'destroy'</span>, <span class="string">'-auto-approve'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">graph</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'graph'</span>] + list(args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plan</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> [self.terraform_bin, <span class="string">'plan'</span>] + list(args)</span><br></pre></td></tr></table></figure><p>然后我们把 resources、outputs、datasources、varaiables 的配置封装到 <code>Template</code> 里</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, providers, resources, outputs, datasources, variables, user_variables)</span>:</span></span><br><span class="line">    self.providers = providers</span><br><span class="line">    self.resources = resources</span><br><span class="line">    self.outputs = outputs</span><br><span class="line">    self.datasources = datasources</span><br><span class="line">    self.variables = variables</span><br><span class="line">    self.user_variables = variables</span><br></pre></td></tr></table></figure><p>最后定义 <code>Instance</code> 类，提供了实例 <code>init</code>、 <code>apply</code>、 <code>show</code>、 <code>refresh</code> 等方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> delegator</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, template, variables=None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.template = template</span><br><span class="line">        self.variables = variables <span class="keyword">or</span> dict()</span><br><span class="line">        self.states = <span class="keyword">None</span></span><br><span class="line">        self.status = <span class="keyword">None</span></span><br><span class="line">        self.terraform_service = TerraformManagerService()</span><br><span class="line">        self.shell_output = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta"> @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">path</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.terraform_service.plan_template_dir.joinpath(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_plan_files</span><span class="params">(path, providers, resources, outputs, variables, datasources)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">            os.mkdir(path)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(path, <span class="string">'providers.tf'</span>), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = <span class="string">'\n'</span>.join([_.config <span class="keyword">for</span> _ <span class="keyword">in</span> self.template.providers])</span><br><span class="line">        f.write(data.encode())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> open(os.path.join(path, <span class="string">'resources.tf'</span>), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(self.template.resources.encode())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 内容过长省略写入 datasources 和 variables 的代码</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.status = <span class="string">'INITIALIZATION'</span></span><br><span class="line">        self.save()</span><br><span class="line">        self.generate_plan_files()</span><br><span class="line">        init_cmd = self.terraform_service.init()</span><br><span class="line">        cmd = delegator.run(<span class="string">' '</span>.join(init_cmd), cwd=str(self.path))</span><br><span class="line">        self.shell_output = cmd.err <span class="keyword">or</span> cmd.out</span><br><span class="line">        <span class="keyword">if</span> cmd.return_code != <span class="number">0</span>:</span><br><span class="line">            self.status = <span class="string">'INITIALIZATION_ERROR'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.status = <span class="string">'INITIALIZATION_SUCCEED'</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">apply</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="comment"># 代码太长省略，和 init 方法基本一致</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 代码太长省略，和 init 方法基本一致</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>完整代码笔者放在 <a href="https://gist.github.com/AnyISalIn/7a66c5d08228da0402d19fa3eea6614c" target="_blank" rel="noopener">https://gist.github.com/AnyISalIn/7a66c5d08228da0402d19fa3eea6614c</a> </p><h2 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Template, Instance, Provider</span><br><span class="line"><span class="keyword">from</span> service <span class="keyword">import</span> TerraformManagerService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">provider, resources, variables, datasources, outputs = get_data()</span><br><span class="line"></span><br><span class="line">openstack_provider = Provider(config=provider)</span><br><span class="line">template = Template(providers=[openstack_provider], </span><br><span class="line">                    resources=resources,</span><br><span class="line">                    datasources=datasources,</span><br><span class="line">                    outputs=outputs,</span><br><span class="line">                    variables=variables,</span><br><span class="line">                    user_variables=[</span><br><span class="line">                        &#123;<span class="string">'key'</span>: <span class="string">'vm_name'</span>, <span class="string">'default'</span>: <span class="string">'test'</span>, <span class="string">'required'</span>: <span class="keyword">False</span>&#125;</span><br><span class="line">                        ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">instance = Instance(name=<span class="string">'instance-test'</span>, template=template, variables=[&#123;<span class="string">'key'</span>: <span class="string">'vm_name'</span>, <span class="string">'value'</span>: <span class="string">'instance1'</span>&#125;])</span><br><span class="line"></span><br><span class="line">instance2 = Instance(name=<span class="string">'instance-test2'</span>, template=template, variables=[&#123;<span class="string">'key'</span>: <span class="string">'vm_name'</span>, <span class="string">'value'</span>: <span class="string">'instance2'</span>&#125;])</span><br><span class="line"></span><br><span class="line">instance.init()</span><br><span class="line">instance.apply()</span><br><span class="line"></span><br><span class="line">instance2.init()</span><br><span class="line">instance2.apply()</span><br><span class="line">instance.refresh()</span><br><span class="line">instance2.refresh()</span><br><span class="line">  </span><br><span class="line">print(instance.shell_output)</span><br><span class="line"><span class="comment"># output </span></span><br><span class="line"><span class="comment"># openstack_compute_instance_v2.terraform: Creating...</span></span><br><span class="line"><span class="comment"># openstack_compute_instance_v2.terraform: Still creating... [10s elapsed]</span></span><br><span class="line"><span class="comment"># openstack_compute_instance_v2.terraform: Creation complete after 14s [id=16c05ba1-a589-# 441c-b221-fdb1a8fd3f87]</span></span><br><span class="line"><span class="comment"># Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span></span><br><span class="line"></span><br><span class="line">instance.states[<span class="string">'values'</span>][<span class="string">'root_module'</span>][<span class="string">'resources'</span>][<span class="number">0</span>][<span class="string">'values'</span>][<span class="string">'name'</span>]</span><br><span class="line"><span class="comment"># 'instance1'</span></span><br><span class="line"></span><br><span class="line">instance2.states[<span class="string">'values'</span>][<span class="string">'root_module'</span>][<span class="string">'resources'</span>][<span class="number">0</span>][<span class="string">'values'</span>][<span class="string">'name'</span>]</span><br><span class="line"><span class="comment"># 'instance2'</span></span><br><span class="line"></span><br><span class="line">instance1.states[<span class="string">'values'</span>][<span class="string">'root_module'</span>][<span class="string">'resources'</span>][<span class="number">0</span>][<span class="string">'values'</span>][<span class="string">'network'</span>][<span class="number">0</span>][<span class="string">'fixed_ip_v4'</span>]</span><br><span class="line"><span class="comment"># '10.0.0.9'</span></span><br><span class="line"></span><br><span class="line">instance2.states[<span class="string">'values'</span>][<span class="string">'root_module'</span>][<span class="string">'resources'</span>][<span class="number">0</span>][<span class="string">'values'</span>][<span class="string">'network'</span>][<span class="number">0</span>][<span class="string">'fixed_ip_v4'</span>]</span><br><span class="line"><span class="comment"># '10.0.0.13'</span></span><br><span class="line">  </span><br><span class="line">instance2.destroy()</span><br></pre></td></tr></table></figure><p>可以看到已经完成了最初的设想，通过 Template 创建多个 Instance，并且对 Instance 进行生命周期的管理</p><h3 id="封装-Web-Application"><a href="#封装-Web-Application" class="headerlink" title="封装 Web Application"></a>封装 Web Application</h3><p>笔者这里花了一天时间通过 Flask + flask_restful + MongoDB + VueJS 构建了一个基础的 Web 应用，简单的做了一些权限控制</p><p>代码放在 <a href="http://github.com/anyisalin/mcam" target="_blank" rel="noopener">http://github.com/anyisalin/mcam</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> quick started</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git clone https://github.com/anyisalin/mcam</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd mcam </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker-compose up --build</span><br></pre></td></tr></table></figure><h2 id="平台测试"><a href="#平台测试" class="headerlink" title="平台测试"></a>平台测试</h2><h3 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h3><p><img src="/images/image-20191209123744637.png" alt="image-20191209123744637"></p><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p><img src="/images/image-20191209123802762.png" alt="image-20191209123802762"></p><p><img src="/images/image-20191209123858059.png" alt="image-20191209123858059"></p><h3 id="实例生命周期管理"><a href="#实例生命周期管理" class="headerlink" title="实例生命周期管理"></a>实例生命周期管理</h3><h4 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h4><p><img src="/images/image-20191209124154424.png" alt="image-20191209124154424"></p><h4 id="Refresh"><a href="#Refresh" class="headerlink" title="Refresh"></a>Refresh</h4><p><img src="/images/image-20191209124256521.png" alt="image-20191209124256521"></p><p><img src="/images/image-20191209124306934.png" alt="image-20191209124306934"></p><h4 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h4><p><img src="/images/image-20191209124327860.png" alt="image-20191209124327860"></p><p><img src="/images/image-20191209124642733.png" alt="image-20191209124642733"></p><h4 id="destroy"><a href="#destroy" class="headerlink" title="destroy"></a>destroy</h4><p><img src="/images/image-20191209124833024.png" alt="image-20191209124833024"></p><h2 id="需要改进"><a href="#需要改进" class="headerlink" title="需要改进"></a>需要改进</h2><p>虽然功能基本都已经完成了，但是目前整个平台还是存在一些问题，如果能把下面这些功能实现平台会更加的健壮</p><ul><li>对 Terraform 配置文件的解析，提供更优雅的配置方式</li><li>Instance 没有和 Template 完全隔离，所以目前不支持 Template 中配置的更改</li><li>实例每次 Upgrade 后 Plan 的版本控制，如果实现了这个功能，就可以针对每次变更记录进行回滚了</li><li>目前 Terraform state 存储到本地，需要用更好的方式管理 Terraform state</li><li>支持 Terraform module</li><li>使用 <a href="https://github.com/gruntwork-io/terragrunt" target="_blank" rel="noopener">terragrunt</a> 让 Terraform 变得更加强大</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个平台花了笔者一个周末的时间，在技术上并没有什么难度，牛逼的是 Terraform，但是通过简单的封装解决了 Terraform Plan 重用的问题，并且构建成一个可以使用的最小平台还是很有意思的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;混合云管理平台 (简称 CMP) 前几年比较火，笔者工作生涯中接触的第一个项目就是 CMP，后面几年也有关注过其他 CMP 产品，但是大体都是完成 IaaS 资源整合后，在其之上再提供服务目录 &lt;code&gt;Service Catalog&lt;/code&gt; 实现云资源的编排。&lt;/p&gt;
&lt;p&gt;但是由于 CMP 需要对接很多云服务商 (简称 Provider)，所以大部分的 CMP 都非常的复杂，就算有类似 &lt;code&gt;libcloud&lt;/code&gt; &lt;code&gt;fog&lt;/code&gt; 之类的库，大部分的开发时间也都会浪费在与不同 Provider 对接与状态管理上。&lt;/p&gt;
&lt;p&gt;笔者周末的时候发现 &lt;code&gt;Terraform&lt;/code&gt; 基本已经支持所有常见的 Provider，并支持在其之上提供资源编排，功能及其强大，但是可惜 &lt;code&gt;Terraform&lt;/code&gt;  并没有暴露出 API，社区也没有基于其开发的管理平台。&lt;/p&gt;
&lt;p&gt;笔者遂即想基于 &lt;code&gt;Terraform&lt;/code&gt; 构建一个混合云应用管理平台，实现以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多云资源的管理&lt;/li&gt;
&lt;li&gt;提供服务模板，可定义参数，根据定义好的服务模板可部署实例&lt;/li&gt;
&lt;li&gt;实例的生命周期管理 (创建/升级/销毁/同步)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="cloud" scheme="https://anyisalin.github.io/tags/cloud/"/>
    
      <category term="terraform" scheme="https://anyisalin.github.io/tags/terraform/"/>
    
      <category term="openstack" scheme="https://anyisalin.github.io/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>Zabbix 基于 Statsd 实现对 Kong APIGateway 的监控</title>
    <link href="https://anyisalin.github.io/2019/11/26/kong-monitoring-with-statsd-zabbix/"/>
    <id>https://anyisalin.github.io/2019/11/26/kong-monitoring-with-statsd-zabbix/</id>
    <published>2019-11-25T16:19:38.000Z</published>
    <updated>2019-11-25T17:37:35.728Z</updated>
    
    <content type="html"><![CDATA[<p>最近有个 Zabbix 监控 Kong 的需求，查了一下网上并没有很多资料，遂研究官方文档，发现 Kong 支持把监控数据传到 Statsd 中，而 Statsd 可以将 Zabbix 作为 backend，所以大体的架构如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Kong ---&gt; Statsd ---&gt; Zabbix</span><br></pre></td></tr></table></figure><p>配置过于简单，这里就不写了</p><a id="more"></a><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>但是当笔者将 Statsd 和 statsd-zabbix 插件部署好之后发现一些问题</p><p>这是 zabbix-sender 报的错误，服务端并没有接收我们的监控指标，原因是在 Zabbix 中的 Host 并没有对应的 item key</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">26 Nov 01:02:49 - INFO: statsd-zabbix-backend: processed: 0; failed: 41; total: 41; seconds spent: 0.000768</span><br></pre></td></tr></table></figure><p>监控指标都是是基于 Kong 中不同的 Service/Consumer，由于 Service 是动态的，没有办法写死 item key，只能定义好 Low-Level-Discovery 并结合 Item prototypes 自动生成对应的 item key</p><p>那么先需要在 zabbix 中定义 Low-Level-Discovery 规则来自动发现 Kong 的 Service，这里笔者通过 Kong Admin API 实现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> /etc/zabbix/zabbix_agentd.d/kong_service_discovery.conf</span><br><span class="line">UserParameter=kong.service.discovery,curl localhost:8001/services 2&gt; /dev/null| jq '[.data[] | &#123;"&#123;#SERVICENAME&#125;": .name&#125;]'</span><br></pre></td></tr></table></figure><p>这就算是实现了 Service 的发现，通过 zabbix_get 可以动态拿到当前所有的 Service</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># zabbix_get -s 127.0.0.1 -p 10050 -k kong.service.discovery</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"&#123;#SERVICENAME&#125;"</span>: <span class="string">"example-service"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"&#123;#SERVICENAME&#125;"</span>: <span class="string">"example2-service"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后笔者发现新的问题，就是 Zabbix 的 item key 的宏只能定义在 <code>参数/[]</code> 中，无法定义在 item.key 本身</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 笔者想基于 zabbix 的宏定义这样的 item key</span><br><span class="line">kong.&#123;#SERVICENAME&#125;.request.count[total]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 但事实上，zabbix 只支持以下格式的定义</span><br><span class="line">kong.request.count[&#123;#SERVICENAME&#125;,total]</span><br></pre></td></tr></table></figure><p>Kong 传输给 Statsd 的数据格式为</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kong.&lt;service_name&gt;.request.count</span><br></pre></td></tr></table></figure><p>而笔者期望得到的数据格式为</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kong.request.count[service_name]</span><br></pre></td></tr></table></figure><p>所以我们还要对传输的数据进行转换，这里笔者经过调研决定单独修改 statsd-zabbix-backend 的代码，<a href="https://gist.github.com/AnyISalIn/b8f18eb744b9b489caec749b99121ea8" target="_blank" rel="noopener">修改过的代码</a></p><p>最后 Statsd 传输给 Zabbix 的数据格式如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.request.count[example-service,total] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.request.count[example-service,avg] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.request.status.500[example-service,total] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.request.status.500[example-service,avg] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.request.status.total[example-service,total] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.request.status.total[example-service,avg] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.latency[example-service,lower] -&gt; 0</span><br><span class="line">26 Nov 01:14:09 - DEBUG: statsd-zabbix-backend: Zabbix server -&gt; kong.latency[example-service,upper] -&gt; 0</span><br></pre></td></tr></table></figure><p>最后我们只需要在 Zabbix Web 页面创建对应的规则即可，效果如下</p><p><img src="/images/image-20191126011530471.png" alt="image-20191126011530471"></p><p><img src="/images/image-20191126011545851.png" alt="image-20191126011545851"></p><p><img src="/images/image-20191126012047758.png" alt="image-20191126012047758"></p><p>后续继续定义 Trigger prototypes 就可以作为基础模板正常使用了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然还有一些问题的，比如 <code>status_count_per_user</code> 这个指标是同时包含 Service 和 Consumer 的，笔者暂时还没有对所有 Consumer 进行 Low-Level Discovery，所以还没有支持。</p><p>而 <code>upstream_latency</code> 这个指标从 Kong 发到 Statsd 就是有问题的。</p><p>经过测试过后非常不建议使用 Zabbix 来监控 Kong，原因如下</p><ol><li>没有官方的支持</li><li>引入 Statsd 会增加监控架构的复杂性</li><li>statsd-zabbix 插件已经两年没更新了</li></ol><p>最后如果真的有 Zabbix 监控 Kong 的需求，建议还是单独开发插件，而不是使用本文的方案。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有个 Zabbix 监控 Kong 的需求，查了一下网上并没有很多资料，遂研究官方文档，发现 Kong 支持把监控数据传到 Statsd 中，而 Statsd 可以将 Zabbix 作为 backend，所以大体的架构如下&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Kong ---&amp;gt; Statsd ---&amp;gt; Zabbix&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置过于简单，这里就不写了&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>极米 H3 体验</title>
    <link href="https://anyisalin.github.io/2019/08/20/xgimi-h3-experience/"/>
    <id>https://anyisalin.github.io/2019/08/20/xgimi-h3-experience/</id>
    <published>2019-08-20T07:10:28.000Z</published>
    <updated>2019-08-20T08:16:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间没时间玩游戏就把家里电脑卖了，但是最近感觉缺少一个大屏幕满足我看视频的需求，由于是租房考虑到便携性买电视又不方便，正好上周极米开了新品发布会，遂入手了极米 H3</p><a id="more"></a><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><p>总共包含一个电源适配器、遥控器、激光投影仪本体</p><p><img src="/images/h3-5.jpg" alt="h3-5"></p><h2 id="显示效果"><a href="#显示效果" class="headerlink" title="显示效果"></a>显示效果</h2><p>极米 H3 的一大卖点就是对焦速度特别快，对比我之前在酒店体验过的 Z6 的确快了很多，几秒就能对上，自动梯度校正也很快。</p><p>还有一点就是 运动补偿（MEMC），用过的都说爽，可以将没有达到 60 帧的电影通过算法补偿到 60 帧，就因为这个技术太牛逼了，我之前在酒店把之前看过的经典电影都重看了一遍。</p><p>电视最关键的指标就是显示效果了，无屏电视对比与普通电视最大的优势就是在于屏幕大小和便携性了。</p><p>H3 在参数上还是很不错的，1900 ANSI 的流明、分辨率为 1080P、支持 HDR10，最大可以投影 150 寸（3米）</p><p><img src="/images/65EF74A2-BD75-4524-A149-B809FB774EDD_1_105_c.jpeg" alt="65EF74A2-BD75-4524-A149-B809FB774EDD_1_105_c"></p><p><img src="/images/h3-1.jpg" alt="h3-1"></p><p>虽然分辨率只有 1080P，但是贴着墙看画面也很清楚</p><p><img src="/images/h3-7.jpeg" alt="h3-7"></p><h3 id="开灯展示"><a href="#开灯展示" class="headerlink" title="开灯展示"></a>开灯展示</h3><p><img src="/images/h3-2.jpg" alt="h3-2"></p><h2 id="音质"><a href="#音质" class="headerlink" title="音质"></a>音质</h2><p>可能是我要求比较高，我觉得音质真的挺一般，没有很惊喜的感觉。</p><p>当打开音乐应用的时候会进入音响模式，立体感会强一点，但如果对音质有要求的还是建议外接音响。</p><p><img src="/images/h3-6.jpg" alt="h3-6"></p><h2 id="系统体验"><a href="#系统体验" class="headerlink" title="系统体验"></a>系统体验</h2><p>极米的系统和普通安卓电视的系统没什么区别，说实话我还是很讨厌这种风格，系统内预装了 腾讯视频、B 站、优酷、爱奇艺的电视版本，内置乐播投屏用来支持 AirPlay 以及安卓、Windows 的投屏需求。</p><p>但没有开机广告，算是国内所谓的智能电视厂商的一大进步了（感谢华为）</p><p>和小米电视一样，极米也内置了语音助手（小度），通过遥控器就可以语音控制电视了，还是很方便的。</p><p><img src="/images/h3-3.jpg" alt="h3-3"></p><h2 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h2><p>接上几个月没开机的 Switch，打开塞尔达传说，由于运动补偿的加持，让塞尔达也能达到 60 帧，高帧率的塞尔达体验非常好。</p><p><img src="/images/h3-4.jpg" alt="h3-4"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>周末在家用了两天，体验真的超级棒，而且价格也不是很贵 （首发 4699），强烈推荐。</p><p>顺便录了个简单的开箱视频有兴趣的朋友可以看看</p><iframe id="sbrxp" src="//player.bilibili.com/player.html?aid=64565210&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 640px; height: 430px; max-width: 100%"> </iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间没时间玩游戏就把家里电脑卖了，但是最近感觉缺少一个大屏幕满足我看视频的需求，由于是租房考虑到便携性买电视又不方便，正好上周极米开了新品发布会，遂入手了极米 H3&lt;/p&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="https://anyisalin.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="开箱" scheme="https://anyisalin.github.io/tags/%E5%BC%80%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>NiFi vs StreamSets(SDC)</title>
    <link href="https://anyisalin.github.io/2019/01/07/nifi-vs-streamsets/"/>
    <id>https://anyisalin.github.io/2019/01/07/nifi-vs-streamsets/</id>
    <published>2019-01-07T08:52:58.000Z</published>
    <updated>2019-01-07T12:49:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面几篇文章分别介绍了 NiFi 和 StreamSets Data Collector (以下简称 SDC) 在一些场景下的使用配置，本文从几个维度简单对比这两个开源的DFM (Data Flow Management) 产品</p><a id="more"></a><h2 id="数据流的定义"><a href="#数据流的定义" class="headerlink" title="数据流的定义"></a>数据流的定义</h2><p>作为一款数据流处理平台，灵活的定义和管理数据流是最基本的能力</p><p>NiFi 的核心是对 Flowfile 生命周期的管理，核心组件 Processor、Flowfile Repo、FlowContent Repo、Data provenance 都是为其提供服务</p><p>在 NiFi 中，Processor 会对 Flowfile 进行 route、copy、modify、terminate 等操作，来完成对流式数据的管理，对不同状态的 Flowfile 都可以分出不同的数据流去处理</p><p><img src="/images/image-20190107174024226-6854024.png" alt="image-20190107174024226"></p><p>而 SDC 没有 NiFi 那么灵活，首先 SDC 中限定了 Processor 的类型</p><p>SDC 中只有以下几种类型的 Processor</p><ul><li>Origin：数据源，用来生产数据</li><li>Processor：数据转换</li><li>Destination：消费数据</li><li>Executor：处理特定事件、如发邮件</li></ul><p>SDC 规范了 Processor 的类型，所以不如 NiFi 那么灵活，比如 一个 Pipeline 中只能定义一个数据源</p><p>其次，SDC 中只能对处理出错的数据流做处理，并且无法细分错误，而 NiFi 中可以把不同状态的数据流路由到其他 Processor 去做进一步处理，比如 DebugFlow、或者错误日志、Elasticsearch 等</p><p>另外，在 NiFi 中可以随时关闭上下游的数据流来更改配置，灵活调试，而 SDC 中只能将整个 Pipeline 停止后才能更改配置，并且 NiFi 可以配置 Processor 连接的队列进行限流，以防上层流量爆发式增长造成后端系统发生故障</p><p>NiFi 可以通过 Data provenance 追溯每一条流式数据的内容、状态</p><p><img src="/images/image-20190104103836337.png" alt></p><p>而 SDC 虽然可以通过图表来展示 Processor 的流量状态，但无法查看数据，调试起来很麻烦</p><p><img src="/images/image-20190107105908433-6829948.png" alt></p><p>NiFi 中可以全局定义  JDBC、SSL 证书、Schema，数据流，并可以复用这些配置，而 SDC 中无法这样做，对于单个 Processor 只能单独配置</p><p>综上所诉，我认为 NiFi 在数据流的定义和管理上比 SDC 灵活很多</p><h2 id="用户和权限管理"><a href="#用户和权限管理" class="headerlink" title="用户和权限管理"></a>用户和权限管理</h2><p>用户认证方面，NiFi 和 SDC 都支持外部认证，但是 SDC 只支持 LDAP，而 NiFi 不仅支持 LDAP 还支持 Kerberos、OpenID、Knox 等</p><p>而权限管理方面，SDC 是 RBAC（基于角色的访问控制），最小权限单位为 Pipeline，赋予角色对 Pipeline 的权限，角色可以赋予组和用户，从而实现细分用户对 Pipeline 的访问控制</p><p>NiFi 的权限控制就灵活了很多，最小可以赋予用户和组对单个 Processor 的管理</p><p>综上所诉，我认为 NiFi 在用户和权限管理上比 SDC 灵活很多</p><h2 id="数据流监控和告警"><a href="#数据流监控和告警" class="headerlink" title="数据流监控和告警"></a>数据流监控和告警</h2><p>监控能够及时地发现数据流的瓶颈和问题所在，NiFi 中只能够查看 Flowfile 的状态和内容，报警的话可以单独将错误事件流发送到特定的 Processor 做处理，而 SDC 中能够查看进出数据流的图表，并针对 Processor 设定规则并发送告警邮件</p><p>监控和告警方面，NiFi 和 SDC 各有优劣，数据流的汇总报表上，SDC 更胜一筹，而在告警方面，我认为 NiFi 更加灵活</p><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><p>NiFi 支持集群部署，可横向扩展集群的数据处理能力， 同时在多个节点上运行 Processor，而 SDC 不支持集群部署，支持集群模式运行，所谓集群模式就是指使用批处理模式运行特定的 Processor，就是把特定作业提交给 Yarn、Mesos 集群，具体可以看官方文档的介绍 <a href="https://streamsets.com/documentation/datacollector/2.6.0.1/help/#Cluster_Mode/ClusterPipelines_title.html#concept_hmh_kfn_1s" target="_blank" rel="noopener">Cluster Pipeline Overview</a></p><p>在集群部署方面，NiFi 横向扩展能力很强，但是 SDC 虽然不支持集群部署，但是也可以通过商用版本的 Hub 提供多节点处理数据的能力</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>通过以上几个方面的对比，显然 NiFi 比 SDC 更胜一筹</p><p>但 SDC 只是 StreamSets 的一个产品，通过 SDC Edge、SCH 等产品，可以构建出一个边缘计算处理平台，只靠 NiFi 是无法做到的</p><p>而在与大数据管理平台的集成上， NiFi 与 HDP 的集成较好，而 SDC 与 CDH 的结合紧密 </p><p>毕竟本篇文章只是对比 NiFi 和 SDC 同为一个 DFM(DataFlow Management) 的优劣，所以 NiFi 比 SDC 更加优秀</p><blockquote><p>参考资料</p><ul><li>Apache Nifi vs StreamSets简单比较 <a href="https://blog.csdn.net/ffjl1985/article/details/81391333" target="_blank" rel="noopener">https://blog.csdn.net/ffjl1985/article/details/81391333</a></li><li><a href="https://ask.streamsets.com/question/1683/how-we-can-setup-sdc-multi-node-cluster/" target="_blank" rel="noopener">https://ask.streamsets.com/question/1683/how-we-can-setup-sdc-multi-node-cluster/</a></li><li><a href="https://streamsets.com/documentation/datacollector/3.4.0/help/datacollector/UserGuide/Cluster_Mode/ClusterPipelines.html#concept_hmh_kfn_1s" target="_blank" rel="noopener">https://streamsets.com/documentation/datacollector/3.4.0/help/datacollector/UserGuide/Cluster_Mode/ClusterPipelines.html#concept_hmh_kfn_1s</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面几篇文章分别介绍了 NiFi 和 StreamSets Data Collector (以下简称 SDC) 在一些场景下的使用配置，本文从几个维度简单对比这两个开源的DFM (Data Flow Management) 产品&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NiFi LDAP 集成</title>
    <link href="https://anyisalin.github.io/2019/01/07/nifi-ldap/"/>
    <id>https://anyisalin.github.io/2019/01/07/nifi-ldap/</id>
    <published>2019-01-07T07:58:34.000Z</published>
    <updated>2019-01-07T08:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>NiFi 默认是不开启用户和权限认证的，但在企业中多租户隔离是不可或缺的，NiFi 提供了多租户权限认证，支持 LDAP、Kerberos、OpenID、knox 多种外部认证方式，本文主要介绍 NiFi 与 OpenLDAP 的集成</p><a id="more"></a><h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><p>NiFi 要求配置 HTTPS 才能开启用户管理的功能，所以我们首先要开启 HTTPS</p><p>NiFi 官方提供了工具包供我们创建证书，通过 <a href="https://nifi.apache.org/download.html" target="_blank" rel="noopener">https://nifi.apache.org/download.html</a> 下载 nifi-toolkit-1.8.0-bin.tar.gz</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pwd </span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> tar xf nifi-toolkit-1.8.0-bin.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd nifi-toolkit-1.8.0</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> ./bin/tls-toolkit.sh server -c streaming -t myTokenToUseToPreventMITM -p 9999</span><br></pre></td></tr></table></figure><p>新启动一个窗口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pwd</span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd nifi-toolkit-1.8.0</span><br><span class="line">./bin/tls-toolkit.sh client -c streaming -t myTokenToUseToPreventMITM -p 9999</span><br><span class="line"></span><br><span class="line">tls-toolkit.sh: JAVA_HOME not set; results may vary</span><br><span class="line">2019/01/07 08:16:11 INFO [main] org.apache.nifi.toolkit.tls.service.client.TlsCertificateAuthorityClient: Requesting new certificate from streaming:9999</span><br><span class="line">2019/01/07 08:16:11 INFO [main] org.apache.nifi.toolkit.tls.service.client.TlsCertificateSigningRequestPerformer: Requesting certificate with dn CN=streaming,OU=NIFI from streaming:9999</span><br><span class="line">2019/01/07 08:16:12 INFO [main] org.apache.nifi.toolkit.tls.service.client.TlsCertificateSigningRequestPerformer: Got certificate with dn CN=streaming, OU=NIFI</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> ls # 会生成 config.json、keystore.jks、nifi-ca-keystore.jks、nifi-cert.pem、truststore.jks 等文件</span><br><span class="line">bin  classpath  conf  config.json  keystore.jks  lib  LICENSE  nifi-ca-keystore.jks  nifi-cert.pem  NOTICE  truststore.jks</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> mkdir /etc/nifi</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cp keystore.jks keystore.jks /etc/nifi</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat config.json</span><br><span class="line">&#123;</span><br><span class="line">  "days" : 1095,</span><br><span class="line">  "keySize" : 2048,</span><br><span class="line">  "keyPairAlgorithm" : "RSA",</span><br><span class="line">  "signingAlgorithm" : "SHA256WITHRSA",</span><br><span class="line">  "dn" : "CN=streaming,OU=NIFI",</span><br><span class="line">  "domainAlternativeNames" : null,</span><br><span class="line">  "keyStore" : "keystore.jks",</span><br><span class="line">  "keyStoreType" : "jks",</span><br><span class="line">  "keyStorePassword" : "Prku1XS7/DGpsnTMpgowSggkjv+j8U/ZifEjKp80/6o",</span><br><span class="line">  "keyPassword" : "Prku1XS7/DGpsnTMpgowSggkjv+j8U/ZifEjKp80/6o",</span><br><span class="line">  "token" : "myTokenToUseToPreventMITM",</span><br><span class="line">  "caHostname" : "streaming",</span><br><span class="line">  "port" : 9999,</span><br><span class="line">  "dnPrefix" : "CN=",</span><br><span class="line">  "dnSuffix" : ", OU=NIFI",</span><br><span class="line">  "reorderDn" : true,</span><br><span class="line">  "additionalCACertificate" : "",</span><br><span class="line">  "trustStore" : "truststore.jks",</span><br><span class="line">  "trustStorePassword" : "l1uiYCEY53iwUFnffRW+OkmzfZNwv7qgywG9Ih9ifhI",</span><br><span class="line">  "trustStoreType" : "jks"</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="meta">$</span> vi &lt;nifi-config-directory&gt;/nifi.properties # 根据 config.json 修改以下字段</span><br><span class="line"></span><br><span class="line">nifi.remote.input.secure=true</span><br><span class="line">nifi.remote.input.socket.port=9997</span><br><span class="line">nifi.web.https.port=8443</span><br><span class="line"></span><br><span class="line">nifi.security.keystore=/etc/nifi/keystore.jks</span><br><span class="line">nifi.security.keystoreType=jks</span><br><span class="line">nifi.security.keystorePasswd=Prku1XS7/DGpsnTMpgowSggkjv+j8U/ZifEjKp80/6o</span><br><span class="line">nifi.security.keyPasswd=Prku1XS7/DGpsnTMpgowSggkjv+j8U/ZifEjKp80/6o</span><br><span class="line">nifi.security.truststore=/etc/nifi/truststore.jks</span><br><span class="line">nifi.security.truststoreType=jks</span><br><span class="line">nifi.security.truststorePasswd=l1uiYCEY53iwUFnffRW+OkmzfZNwv7qgywG9Ih9ifhI</span><br><span class="line">nifi.security.user.authorizer=managed-authorizer</span><br><span class="line">nifi.security.ocsp.responder.url=</span><br><span class="line">nifi.security.ocsp.responder.certificate=</span><br></pre></td></tr></table></figure><p>重启 NiFi 即可</p><h2 id="配置-LDAP-登录"><a href="#配置-LDAP-登录" class="headerlink" title="配置 LDAP 登录"></a>配置 LDAP 登录</h2><p>NiFi 中配置第三方认证的配置文件的参数为 <code>nifi.login.identity.provider.configuration.file</code> </p><p>默认指向是 <code>./conf/login-identity-providers.xml</code></p><p>我们修改这个文件即可</p><p>填写 LDAP 连接参数即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line">&lt;loginIdentityProviders&gt;</span><br><span class="line">    &lt;provider&gt;</span><br><span class="line">        &lt;identifier&gt;ldap-provider&lt;/identifier&gt;</span><br><span class="line">        &lt;class&gt;org.apache.nifi.ldap.LdapProvider&lt;/class&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Authentication Strategy"&gt;SIMPLE&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Manager DN"&gt;cn=admin,dc=example,dc=com,dc=cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="Manager Password"&gt;password&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="TLS - Keystore"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Keystore Password"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Keystore Type"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Truststore"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Truststore Password"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Truststore Type"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Client Auth"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Protocol"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Shutdown Gracefully"&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;property name="Referral Strategy"&gt;FOLLOW&lt;/property&gt;</span><br><span class="line">        &lt;property name="Connect Timeout"&gt;10 secs&lt;/property&gt;</span><br><span class="line">        &lt;property name="Read Timeout"&gt;10 secs&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Url"&gt;ldap://13.20.0.68&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Search Base"&gt;ou=People,dc=example,dc=com,dc=cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Search Filter"&gt;uid=&#123;0&#125;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Identity Strategy"&gt;USE_USERNAME&lt;/property&gt;</span><br><span class="line">        &lt;property name="Authentication Expiration"&gt;12 hours&lt;/property&gt;</span><br><span class="line">    &lt;/provider&gt;</span><br><span class="line">&lt;/loginIdentityProviders&gt;</span><br></pre></td></tr></table></figure><p>还需要修改 NiFi 的配置文件</p><p>将 <code>nifi.security.user.login.identity</code> 指向 ldap-provider</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nifi.security.user.login.identity.provider=ldap-provider</span><br></pre></td></tr></table></figure><h2 id="授权配置"><a href="#授权配置" class="headerlink" title="授权配置"></a>授权配置</h2><p>配置完 NiFi LDAP 登录之后，我们还需要配置谁有权访问系统，以及访问权限，所以我们还需要配置 NiFi 多租户授权</p><p>NiFi 授权的配置文件由 <code>nifi.authorizer.configuration.file</code> 指定</p><p>默认是 <code>nifi.authorizer.configuration.file=./conf/authorizers.xml</code></p><p>除了 LDAP 的连接和查询参数以外，<code>&lt;property name=&quot;Initial Admin Identity&quot;&gt;linxi&lt;/property&gt;</code> 这个配置也很重要，是默认赋予了管理员权限用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span><br><span class="line">&lt;authorizers&gt;</span><br><span class="line">  &lt;userGroupProvider&gt;</span><br><span class="line">    &lt;identifier&gt;file-user-group-provider&lt;/identifier&gt;</span><br><span class="line">    &lt;class&gt;org.apache.nifi.authorization.FileUserGroupProvider&lt;/class&gt;</span><br><span class="line">    &lt;property name="Users File"&gt;./conf/users.xml&lt;/property&gt;</span><br><span class="line">    &lt;property name="Legacy Authorized Users File"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="Initial User Identity 1"&gt;&lt;/property&gt;</span><br><span class="line">  &lt;/userGroupProvider&gt;</span><br><span class="line">    &lt;userGroupProvider&gt;</span><br><span class="line">        &lt;identifier&gt;ldap-user-group-provider&lt;/identifier&gt;</span><br><span class="line">        &lt;class&gt;org.apache.nifi.ldap.tenants.LdapUserGroupProvider&lt;/class&gt;</span><br><span class="line">        &lt;property name="Authentication Strategy"&gt;SIMPLE&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Manager DN"&gt;cn=admin,dc=example,dc=com,dc=cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="Manager Password"&gt;passwd1Q&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="TLS - Keystore"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Keystore Password"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Keystore Type"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Truststore"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Truststore Password"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Truststore Type"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Client Auth"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Protocol"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="TLS - Shutdown Gracefully"&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Referral Strategy"&gt;FOLLOW&lt;/property&gt;</span><br><span class="line">        &lt;property name="Connect Timeout"&gt;10 secs&lt;/property&gt;</span><br><span class="line">        &lt;property name="Read Timeout"&gt;10 secs&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Url"&gt;ldap://13.20.0.68&lt;/property&gt;</span><br><span class="line">        &lt;property name="Page Size"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="Sync Interval"&gt;30 mins&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="User Search Base"&gt;ou=People,dc=example,dc=com,dc=cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Object Class"&gt;posixAccount&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Search Scope"&gt;ONE_LEVEL&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Search Filter"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Identity Attribute"&gt;cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Group Name Attribute"&gt;gidNumber&lt;/property&gt;</span><br><span class="line">        &lt;property name="User Group Name Attribute - Referenced Group Attribute"&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name="Group Search Base"&gt;ou=Groups,dc=example,dc=com,dc=cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="Group Object Class"&gt;posixGroup&lt;/property&gt;</span><br><span class="line">        &lt;property name="Group Search Scope"&gt;ONE_LEVEL&lt;/property&gt;</span><br><span class="line">        &lt;property name="Group Search Filter"&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name="Group Name Attribute"&gt;cn&lt;/property&gt;</span><br><span class="line">        &lt;property name="Group Member Attribute"&gt;memberUid&lt;/property&gt;</span><br><span class="line">        &lt;property name="Group Member Attribute - Referenced User Attribute"&gt;uid&lt;/property&gt;</span><br><span class="line">    &lt;/userGroupProvider&gt;</span><br><span class="line">  &lt;userGroupProvider&gt;</span><br><span class="line"></span><br><span class="line">    &lt;identifier&gt;composite-configurable-user-group-provider&lt;/identifier&gt;</span><br><span class="line">    &lt;class&gt;org.apache.nifi.authorization.CompositeConfigurableUserGroupProvider&lt;/class&gt;</span><br><span class="line">    &lt;property name="Configurable User Group Provider"&gt;file-user-group-provider&lt;/property&gt;</span><br><span class="line">    &lt;property name="User Group Provider 1"&gt;ldap-user-group-provider&lt;/property&gt;</span><br><span class="line">  &lt;/userGroupProvider&gt;</span><br><span class="line"></span><br><span class="line">  &lt;accessPolicyProvider&gt;</span><br><span class="line">    &lt;identifier&gt;file-access-policy-provider&lt;/identifier&gt;</span><br><span class="line">    &lt;class&gt;org.apache.nifi.authorization.FileAccessPolicyProvider&lt;/class&gt;</span><br><span class="line">    &lt;property name="User Group Provider"&gt;composite-configurable-user-group-provider&lt;/property&gt;</span><br><span class="line">    &lt;property name="Authorizations File"&gt;./conf/authorizations.xml&lt;/property&gt;</span><br><span class="line">    &lt;property name="Initial Admin Identity"&gt;linxi&lt;/property&gt;</span><br><span class="line">    &lt;property name="Legacy Authorized Users File"&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name="Node Identity 1"&gt;&lt;/property&gt;</span><br><span class="line"> &lt;/accessPolicyProvider&gt;</span><br><span class="line"></span><br><span class="line">  &lt;authorizer&gt;</span><br><span class="line">    &lt;identifier&gt;managed-authorizer&lt;/identifier&gt;</span><br><span class="line">    &lt;class&gt;org.apache.nifi.authorization.StandardManagedAuthorizer&lt;/class&gt;</span><br><span class="line">    &lt;property name="Access Policy Provider"&gt;file-access-policy-provider&lt;/property&gt;</span><br><span class="line">  &lt;/authorizer&gt;</span><br><span class="line">&lt;/authorizers&gt;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>重启 NiFi 后登陆我们的管理员用户</p><p>可以看到 users 选项</p><p><img src="/images/image-20190107164708504-6850828.png" alt="image-20190107164708504"></p><p>进入之后可以看到所有的用户和组</p><p><img src="/images/image-20190107164759488-6850879.png" alt="image-20190107164759488"></p><p>通过 Policies 可以对用户的权限进行管理</p><p><img src="/images/image-20190107164907889-6850947.png" alt="image-20190107164907889"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NiFi 默认是不开启用户和权限认证的，但在企业中多租户隔离是不可或缺的，NiFi 提供了多租户权限认证，支持 LDAP、Kerberos、OpenID、knox 多种外部认证方式，本文主要介绍 NiFi 与 OpenLDAP 的集成&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>StreamSets DataCollector Demo</title>
    <link href="https://anyisalin.github.io/2019/01/07/streamsets-demo/"/>
    <id>https://anyisalin.github.io/2019/01/07/streamsets-demo/</id>
    <published>2019-01-07T01:56:47.000Z</published>
    <updated>2019-01-07T12:46:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>StreamSets 有三个组件</p><ul><li>StreamSets Edge：主要安装在物联网设备上，采集数据</li><li>StreamSets Data Collector：ETL、dataflow 工具</li><li>StreamSets Control Hub：管理 Data Collector 定义的 pipeline</li></ul><p>本文主要介绍通过 StreamSets Data Collector（以下简称 SDC） 定义数据流<br><a id="more"></a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我们需要定义以下数据流，从数据的生产到消费，主要有以下步骤</p><p>生产</p><ol><li>通过 randomuser api 获取用户数据</li><li>处理返回的数据</li><li>将处理过后的数据发送给 kafka</li></ol><p>消费</p><ol><li>从 kafka 获取用户数据</li><li>展开 json 数据 <code>{&quot;login&quot;: {&quot;username&quot;: &quot;anyisalin&quot;}} -&gt; {&quot;login.username&quot;: &quot;anyisalin&quot;}</code></li><li>将展开后的 json 数据转化为 SQL 语句</li><li>执行 SQL</li></ol><p><img src="/images/image-20190103170847022-6570233.png" alt="image-20190103170847022"></p><h2 id="StreamSets-DataCollector"><a href="#StreamSets-DataCollector" class="headerlink" title="StreamSets DataCollector"></a>StreamSets DataCollector</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>SDC 的安装包很大，全组件的二进制 6G 左右，安装好 JDK 之后，直接启动即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> streamsets-datacollector-3.6.1/bin/streamsets dc</span></span><br></pre></td></tr></table></figure><p>默认端口是 18630，用户名密码为 admin/admin</p><h3 id="创建-Producer-Pipeline"><a href="#创建-Producer-Pipeline" class="headerlink" title="创建 Producer Pipeline"></a>创建 Producer Pipeline</h3><p>我们创建一个名为 <code>user data producer</code> 的数据流，用来生产用户数据</p><p><img src="/images/image-20190107104133176-6828893.png" alt="image-20190107104133176"></p><h4 id="HTTP-Client"><a href="#HTTP-Client" class="headerlink" title="HTTP Client"></a>HTTP Client</h4><p>进入 Pipeline 后我们选择一个 Origin (一个 Pipeline 中只能有一个 Origin)</p><p>我们需要发起 HTTP 请求来获取数据，所以这里选择 HTTP Client 即可</p><p><img src="/images/image-20190107104314832-6828994.png" alt="image-20190107104314832"></p><p>然后配置 HTTP 请求的地址和参数即可</p><p><img src="/images/image-20190107104528494-6829128.png" alt="image-20190107104528494"></p><h4 id="Field-Pivoter"><a href="#Field-Pivoter" class="headerlink" title="Field Pivoter"></a>Field Pivoter</h4><p>由于获取的数据格式如下</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'results': [</span><br><span class="line">        &#123;</span><br><span class="line">      'username': 'haha',</span><br><span class="line">        'field1': 'value1'</span><br><span class="line">    &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">      'username': 'haha',</span><br><span class="line">        'field1': 'value1'</span><br><span class="line">    &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要里面的 results，所以需要对 JSON 数据进行切分</p><p>StreamSets Data Collector 中可以通过 Field Pivoter 这个 Processor 对字段进行切分</p><p>所以我们创建 Field Pivoter 并配置即可</p><p><img src="/images/image-20190107104945268-6829385.png" alt="image-20190107104945268"></p><h4 id="Kafka-Producer"><a href="#Kafka-Producer" class="headerlink" title="Kafka Producer"></a>Kafka Producer</h4><p>最后我们需要将切分后的数据 push 到 kafka 里面</p><p>选择 Destination 为 Kafka Producer</p><p>选择 Kafka 客户端对应的版本，我们这里使用的是 2.1.1 的 kafka，所以选择 Apache Kafka 2.0.0 这个库</p><p><img src="/images/image-20190107105518017-6829718.png" alt="image-20190107105518017"></p><p>并配置 Kafka Broker 参数</p><p><img src="/images/image-20190107105706891-6829826.png" alt="image-20190107105706891"></p><h4 id="Producer-测试"><a href="#Producer-测试" class="headerlink" title="Producer 测试"></a>Producer 测试</h4><p>最后我们的 Pipeline 如下</p><p><img src="/images/image-20190107105826413-6829906.png" alt="image-20190107105826413"></p><p>启动并验证</p><p>运行 Pipeline 之后，可以看到自带的监控，对记录的统计和汇总</p><p><img src="/images/image-20190107105908433-6829948.png" alt="image-20190107105908433"></p><h3 id="创建-Consumer-Pipeline"><a href="#创建-Consumer-Pipeline" class="headerlink" title="创建 Consumer Pipeline"></a>创建 Consumer Pipeline</h3><p>我们创建一个名为 <code>user data consumer</code> 的数据流，用来消费刚刚生产的数据</p><p><img src="/images/image-20190107110650845-6830410.png" alt="image-20190107110650845"></p><h4 id="Kafka-Consumer"><a href="#Kafka-Consumer" class="headerlink" title="Kafka Consumer"></a>Kafka Consumer</h4><p>选择 Kafka Consumer 作为 Origin</p><p>配置 Kafka Broker 参数</p><p><img src="/images/image-20190107111836335-6831116.png" alt="image-20190107111836335"></p><h4 id="Filed-Flattener"><a href="#Filed-Flattener" class="headerlink" title="Filed Flattener"></a>Filed Flattener</h4><p>我们需要展开 Kafka 中获取到的用户数据</p><p>展开的格式如下</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;'gender': 'male',</span><br><span class="line"> 'name_title': 'mr',</span><br><span class="line"> 'name_first': 'lucas',</span><br><span class="line"> 'name_last': 'olsen',</span><br><span class="line"> 'location_street': '7882 mariagervej',</span><br><span class="line"> 'location_city': 'saltum',</span><br><span class="line"> 'location_state': 'midtjylland',</span><br><span class="line"> 'location_postcode': 52010,</span><br><span class="line"> 'location_coordinates_latitude': '66.7960',</span><br><span class="line"> 'location_coordinates_longitude': '169.3742',</span><br><span class="line"> 'location_timezone_offset': '+8:00',</span><br><span class="line"> 'location_timezone_description': 'Beijing, Perth, Singapore, Hong Kong',</span><br><span class="line"> 'email': 'lucas.olsen@example.com',</span><br><span class="line"> 'login_uuid': '7e1f3118-a6aa-4ee9-a2a1-0a51ff05e210',</span><br><span class="line"> 'login_username': 'smalllion212',</span><br><span class="line"> 'login_password': 'oscar',</span><br><span class="line"> 'login_salt': 'X06x1uIC',</span><br><span class="line"> 'login_md5': 'cede0ee5c6da51ab45f30d443c0bce87',</span><br><span class="line"> 'login_sha1': '65ae36af8670df9f5aaba7aa6ada24466f01c6a0',</span><br><span class="line"> 'login_sha256': '14a363b54ae02f62e1e1a6a1f38e81f771ac57c0e10cbe931af332d52deea9ac',</span><br><span class="line"> 'dob_date': '1990-12-30T04:11:02Z',</span><br><span class="line"> 'dob_age': 28,</span><br><span class="line"> 'registered_date': '2009-07-24T19:30:29Z',</span><br><span class="line"> 'registered_age': 9,</span><br><span class="line"> 'phone': '84828860',</span><br><span class="line"> 'cell': '74092531',</span><br><span class="line"> 'id_name': 'CPR',</span><br><span class="line"> 'id_value': '819452-4601',</span><br><span class="line"> 'picture_large': 'https://randomuser.me/api/portraits/men/84.jpg',</span><br><span class="line"> 'picture_medium': 'https://randomuser.me/api/portraits/med/men/84.jpg',</span><br><span class="line"> 'picture_thumbnail': 'https://randomuser.me/api/portraits/thumb/men/84.jpg',</span><br><span class="line"> 'nat': 'DK'&#125;</span><br></pre></td></tr></table></figure><p>配置 Field Flattener，分隔符为 _</p><p><img src="/images/image-20190107112156873-6831316.png" alt="image-20190107112156873"></p><h4 id="JDBC-Producer"><a href="#JDBC-Producer" class="headerlink" title="JDBC Producer"></a>JDBC Producer</h4><p>最后我们要将数据插入到 MySQL 里，SDC 通过类型为 JDBC Producer 的 Destination 来处理 SQL 的转换和执行</p><p>需要上传对应的库到 SDC 中</p><p><img src="/images/image-20190107112539452-6831539.png" alt="image-20190107112539452"></p><p>在 Legacy Drivers 里面配置 class</p><p><img src="/images/image-20190107112632307-6831592.png" alt="image-20190107112632307"></p><p>在 Credentials 中配置用户名密码，最后在 JDBC 选项栏中配置连接参数和操作选项</p><p><img src="/images/image-20190107112739224-6831659.png" alt="image-20190107112739224"></p><h4 id="Producer-测试-1"><a href="#Producer-测试-1" class="headerlink" title="Producer 测试"></a>Producer 测试</h4><p>最后我们启动这个 Pipeline 进行测试</p><p>登录 mysql 服务器，查看是否有数据插入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select count(*) from users;</span></span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">| 25255950 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (1 min 22.44 sec)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SDC 定义数据流没有 NiFi 那么灵活，缺少限流，但是界面风格相对 NiFi 好一些，监控图表也很直观</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;StreamSets 有三个组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;StreamSets Edge：主要安装在物联网设备上，采集数据&lt;/li&gt;
&lt;li&gt;StreamSets Data Collector：ETL、dataflow 工具&lt;/li&gt;
&lt;li&gt;StreamSets Control Hub：管理 Data Collector 定义的 pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要介绍通过 StreamSets Data Collector（以下简称 SDC） 定义数据流&lt;br&gt;
    
    </summary>
    
    
      <category term="dataflow" scheme="https://anyisalin.github.io/tags/dataflow/"/>
    
      <category term="streamsets" scheme="https://anyisalin.github.io/tags/streamsets/"/>
    
  </entry>
  
  <entry>
    <title>NiFi Demo</title>
    <link href="https://anyisalin.github.io/2019/01/03/nifi-demo/"/>
    <id>https://anyisalin.github.io/2019/01/03/nifi-demo/</id>
    <published>2019-01-03T03:11:25.000Z</published>
    <updated>2019-01-07T12:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多情况下，需要从不同的数据源中提取数据，并将数据格式进行转换，定义不同的流程，传输到对应的系统中</p><p>需求较为简单的情况下，可以通过自己写代码实现，但在数据流比较复杂后，整个流程难以维护，扩展性很差</p><p>这时候就需要引入像 NiFi、StreamSets 这类的 DFM(Data Flow Management) 数据流处理平台，这篇文章主要介绍在 NiFi 中定义一个简单的数据流</p><a id="more"></a><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>我们需要定义以下数据流，从数据的生产到消费，主要有以下步骤</p><p>生产</p><ol><li>通过 randomuser api 获取用户数据</li><li>处理返回的数据</li><li>将处理过后的数据发送给 kafka</li></ol><p>消费</p><ol><li>从 kafka 获取用户数据</li><li>展开 json 数据 <code>{&quot;login&quot;: {&quot;username&quot;: &quot;anyisalin&quot;}} -&gt; {&quot;login.username&quot;: &quot;anyisalin&quot;}</code></li><li>将展开后的 json 数据转化为 SQL 语句</li><li>执行 SQL</li></ol><p><img src="/images/image-20190103170847022-6570233.png" alt="image-20190103170847022"></p><h2 id="NiFi"><a href="#NiFi" class="headerlink" title="NiFi"></a>NiFi</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>NiFi 安装很简单，在 Linux 系统上安装好 JDK 环境，<a href="https://nifi.apache.org/download.html" target="_blank" rel="noopener">https://nifi.apache.org/download.html</a> 下载并解压对应版本的二进制安装包，执行以下命令即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd nifi-&lt;VERSION&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> bin/nifi.sh start</span><br></pre></td></tr></table></figure><p>等待启动完成后访问对应 IP 的 8080 端口即可</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>Flowfile 是NiFi及其基于流的设计的核心，流文件是一个数据记录，它由指向其内容的指针和属性组成，并与相关事件进行关联</p><p>NiFi 架构如下，由几个组件组成</p><ul><li><p>Web Server：NiFi 的 http 接口</p></li><li><p>Flow Controller：对 Processor 的流程控制、资源调度</p></li><li><p>FlowFile Repository：存储 Flowfile 元数据(attribute、指向内容的指针)</p></li><li><p>Content Repository：存储 Flowfile 内容</p></li><li><p>Provenance Repository：存储 Flowfile 运行时状态</p></li></ul><p>  <img src="https://nifi.apache.org/docs/nifi-docs/html/images/zero-master-cluster.png" alt="NiFi Cluster Architecture Diagram"></p><h3 id="创建数据流"><a href="#创建数据流" class="headerlink" title="创建数据流"></a>创建数据流</h3><h4 id="invoke-http"><a href="#invoke-http" class="headerlink" title="invoke http"></a>invoke http</h4><p>首选我们要定义调用 randomuser api 获取用户数据，NiFi 中通过 <code>Invoke HTTP</code> 这个 Processor 发起 HTTP 请求</p><p><img src="/images/image-20190104101245046.png" alt="image-20190104101245046"></p><p>这个 HTTP Endpoint 返回的资源格式如下 <a href="https://randomuser.me/api?results=50" target="_blank" rel="noopener">https://randomuser.me/api?results=50</a></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"results"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"gender"</span>: <span class="string">"male"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: &#123;</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"mr"</span>,</span><br><span class="line">                <span class="attr">"first"</span>: <span class="string">"آرسین"</span>,</span><br><span class="line">                <span class="attr">"last"</span>: <span class="string">"رضایی"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"location"</span>: &#123;</span><br><span class="line">                <span class="attr">"street"</span>: <span class="string">"6802 فلسطین"</span>,</span><br><span class="line">                <span class="attr">"city"</span>: <span class="string">"خمینیشهر"</span>,</span><br><span class="line">                <span class="attr">"state"</span>: <span class="string">"هرمزگان"</span>,</span><br><span class="line">                <span class="attr">"postcode"</span>: <span class="number">87162</span>,</span><br><span class="line">                <span class="attr">"coordinates"</span>: &#123;</span><br><span class="line">                    <span class="attr">"latitude"</span>: <span class="string">"31.5995"</span>,</span><br><span class="line">                    <span class="attr">"longitude"</span>: <span class="string">"-64.0100"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"timezone"</span>: &#123;</span><br><span class="line">                    <span class="attr">"offset"</span>: <span class="string">"-12:00"</span>,</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Eniwetok, Kwajalein"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"آرسین.رضایی@example.com"</span>,</span><br><span class="line">            <span class="attr">"login"</span>: &#123;</span><br><span class="line">                <span class="attr">"uuid"</span>: <span class="string">"120a95ad-7626-481e-a8d7-deeb86260ff3"</span>,</span><br><span class="line">                <span class="attr">"username"</span>: <span class="string">"ticklishkoala843"</span>,</span><br><span class="line">                <span class="attr">"password"</span>: <span class="string">"lakeside"</span>,</span><br><span class="line">                <span class="attr">"salt"</span>: <span class="string">"EykxGh6P"</span>,</span><br><span class="line">                <span class="attr">"md5"</span>: <span class="string">"ccd83cf95763b0f4a04e78b0aaf16f08"</span>,</span><br><span class="line">                <span class="attr">"sha1"</span>: <span class="string">"3f78b70a952d75e4567d52c5b3967c5975c1323d"</span>,</span><br><span class="line">                <span class="attr">"sha256"</span>: <span class="string">"e7f0bec78b81937aec798c4455ea0f91b7440192faa149ab031156cae46266ea"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"dob"</span>: &#123;</span><br><span class="line">                <span class="attr">"date"</span>: <span class="string">"1992-04-17T00:59:50Z"</span>,</span><br><span class="line">                <span class="attr">"age"</span>: <span class="number">26</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"registered"</span>: &#123;</span><br><span class="line">                <span class="attr">"date"</span>: <span class="string">"2017-05-06T00:12:16Z"</span>,</span><br><span class="line">                <span class="attr">"age"</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"phone"</span>: <span class="string">"054-14099232"</span>,</span><br><span class="line">            <span class="attr">"cell"</span>: <span class="string">"0937-683-3855"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"value"</span>: <span class="literal">null</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"picture"</span>: &#123;</span><br><span class="line">                <span class="attr">"large"</span>: <span class="string">"https://randomuser.me/api/portraits/men/69.jpg"</span>,</span><br><span class="line">                <span class="attr">"medium"</span>: <span class="string">"https://randomuser.me/api/portraits/med/men/69.jpg"</span>,</span><br><span class="line">                <span class="attr">"thumbnail"</span>: <span class="string">"https://randomuser.me/api/portraits/thumb/men/69.jpg"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"nat"</span>: <span class="string">"IR"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">        <span class="attr">"seed"</span>: <span class="string">"4203aa4638365efa"</span>,</span><br><span class="line">        <span class="attr">"results"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"page"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"version"</span>: <span class="string">"1.2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SplitJson"><a href="#SplitJson" class="headerlink" title="SplitJson"></a>SplitJson</h4><p>我们只需要 results 里面的数据，所以需要进行切分</p><p>NiFi 中通过 <code>SplitJson</code> 来切分 JSON 数据</p><p><img src="/images/image-20190104101828670.png" alt="image-20190104101828670"></p><p>定义完这两个 Processor ，可以先测试一下</p><p>将两个 Processer 连接起来</p><p>这里的 Relationships 是根据 Processor 中 Flowfile 的状态，需要定义对应状态下的 Flowfile 应该路由到哪一个 Processor</p><p>我们这里定义 Relationships，Response 数据流路由到 SplitJson</p><p><img src="/images/image-20190104102234538.png" alt="image-20190104102234538"></p><p>但是在 NiFi 中，所有的 Relationships 都得定义，所以对应的 Failure、No Retry、Original、Retry 也得路由到对应的 Processor，我们这里使用 DebugFlow 来接收这些错误的数据</p><p>Automatically Terminate Relationships 指的是数据流路由到这个 Processor 后，特定状态下会被删除，一般在 Endpoint Processor 配置，因为数据流不需要再被继续路由了</p><p><img src="/images/image-20190104103115028.png" alt="image-20190104103115028"></p><p>最后我们这个简单的数据流如下</p><p><img src="/images/image-20190104103643971.png" alt="image-20190104103643971"></p><p>启动数据流之后，通过 NiFi Data Provenance 可以看到数据流的状态</p><p><img src="/images/image-20190104103836337.png" alt="image-20190104103836337"></p><p>可以看到 JSON 数据已经被切分了</p><p><img src="/images/image-20190104103902591.png" alt="image-20190104103902591"></p><h4 id="kafka-producer"><a href="#kafka-producer" class="headerlink" title="kafka producer"></a><strong>kafka producer</strong></h4><p>完成 JSON 数据的切分过后就可以将数据存储到 Kafka 中了</p><p>我们需要创建 PublishKafka Processor，由于 Kafka 不同版本的 API 不兼容，所以 NiFi 提供了多个版本的 Processor</p><p><img src="/images/image-20190104104302166.png" alt="image-20190104104302166"></p><p>我们这里使用的是 2.1.2 版本的 Kafka，所以用 PublishKafka_2_0 即可</p><p>配置好 Kafka 的连接参数</p><p><img src="/images/image-20190104104510785.png" alt="image-20190104104510785"></p><p>由于 Kafka 在这个数据流中是 Endpoint Processor，数据流不需要再被路由了，所以 Automatically Terminate Relationships 都勾选上</p><p><img src="/images/image-20190104104600684.png" alt="image-20190104104600684"></p><p>将 SplitJson 与 PublishKafka 连接，整个数据流就构建好了</p><p><img src="/images/image-20190104105243452-6570363.png" alt="image-20190104105243452"></p><h4 id="kafka-consumer-测试"><a href="#kafka-consumer-测试" class="headerlink" title="kafka consumer 测试"></a><strong>kafka consumer 测试</strong></h4><p>能够从 kafka 消费数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br><span class="line"></span><br><span class="line">&#123;"gender":"female","name":&#123;"title":"ms","first":"charlie","last":"smith"&#125;,"location":&#123;"street":"2802 george st","city":"trout lake","state":"northwest territories","postcode":"M5K 7B1","coordinates":&#123;"latitude":"-66.5974","longitude":"162.8858"&#125;,"timezone":&#123;"offset":"-3:00","description":"Brazil, Buenos Aires, Georgetown"&#125;&#125;,"email":"charlie.smith@example.com","login":&#123;"uuid":"4de548e6-102f-4e57-bb03-8850da99ad55","username":"bluelion557","password":"555666","salt":"bi96vEBT","md5":"3526a37c16429aadd417953550b09a45","sha1":"acddea2bdea1eb17bd9c24bd74fff5de84a9af31","sha256":"9d2b53a41ea2cc6a235c540475b95d97ff9f875ab37fb71d627e86e98d137dfc"&#125;,"dob":&#123;"date":"1961-11-18T05:30:31Z","age":57&#125;,"registered":&#123;"date":"2003-01-20T03:57:43Z","age":15&#125;,"phone":"666-683-3176","cell":"297-613-3978","id":&#123;"name":"","value":null&#125;,"picture":&#123;"large":"https://randomuser.me/api/portraits/women/83.jpg","medium":"https://randomuser.me/api/portraits/med/women/83.jpg","thumbnail":"https://randomuser.me/api/portraits/thumb/women/83.jpg"&#125;,"nat":"CA"&#125;</span><br></pre></td></tr></table></figure><h4 id="ConsumerKafka"><a href="#ConsumerKafka" class="headerlink" title="ConsumerKafka"></a>ConsumerKafka</h4><p>创建 ConsumerKafka Processor</p><p>配置 Kafka 连接参数</p><p><img src="/images/image-20190104110620459-6571180.png" alt="image-20190104110620459"></p><h4 id="FlattenJson"><a href="#FlattenJson" class="headerlink" title="FlattenJson"></a>FlattenJson</h4><p>创建 FlattenJson Processor</p><p>配置 Separator 为下划线 _</p><p><img src="/images/image-20190104123520294-6576520.png" alt="image-20190104123520294"></p><p>展开的格式如下</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;'gender': 'male',</span><br><span class="line"> 'name_title': 'mr',</span><br><span class="line"> 'name_first': 'lucas',</span><br><span class="line"> 'name_last': 'olsen',</span><br><span class="line"> 'location_street': '7882 mariagervej',</span><br><span class="line"> 'location_city': 'saltum',</span><br><span class="line"> 'location_state': 'midtjylland',</span><br><span class="line"> 'location_postcode': 52010,</span><br><span class="line"> 'location_coordinates_latitude': '66.7960',</span><br><span class="line"> 'location_coordinates_longitude': '169.3742',</span><br><span class="line"> 'location_timezone_offset': '+8:00',</span><br><span class="line"> 'location_timezone_description': 'Beijing, Perth, Singapore, Hong Kong',</span><br><span class="line"> 'email': 'lucas.olsen@example.com',</span><br><span class="line"> 'login_uuid': '7e1f3118-a6aa-4ee9-a2a1-0a51ff05e210',</span><br><span class="line"> 'login_username': 'smalllion212',</span><br><span class="line"> 'login_password': 'oscar',</span><br><span class="line"> 'login_salt': 'X06x1uIC',</span><br><span class="line"> 'login_md5': 'cede0ee5c6da51ab45f30d443c0bce87',</span><br><span class="line"> 'login_sha1': '65ae36af8670df9f5aaba7aa6ada24466f01c6a0',</span><br><span class="line"> 'login_sha256': '14a363b54ae02f62e1e1a6a1f38e81f771ac57c0e10cbe931af332d52deea9ac',</span><br><span class="line"> 'dob_date': '1990-12-30T04:11:02Z',</span><br><span class="line"> 'dob_age': 28,</span><br><span class="line"> 'registered_date': '2009-07-24T19:30:29Z',</span><br><span class="line"> 'registered_age': 9,</span><br><span class="line"> 'phone': '84828860',</span><br><span class="line"> 'cell': '74092531',</span><br><span class="line"> 'id_name': 'CPR',</span><br><span class="line"> 'id_value': '819452-4601',</span><br><span class="line"> 'picture_large': 'https://randomuser.me/api/portraits/men/84.jpg',</span><br><span class="line"> 'picture_medium': 'https://randomuser.me/api/portraits/med/men/84.jpg',</span><br><span class="line"> 'picture_thumbnail': 'https://randomuser.me/api/portraits/thumb/men/84.jpg',</span><br><span class="line"> 'nat': 'DK'&#125;</span><br></pre></td></tr></table></figure><p>连接 FlattenJson 和 ConsumerKafka</p><h4 id="ConvertJSONToSQL"><a href="#ConvertJSONToSQL" class="headerlink" title="ConvertJSONToSQL"></a>ConvertJSONToSQL</h4><p>首先在 MySQL 中创建库和表</p><p>表结构如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">users</span> (</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`name_title`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`name_first`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`name_last`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_street`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_city`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_state`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_postcode`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_coordinates_latitude`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_coordinates_longitude`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_timezone_offset`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`location_timezone_description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_uuid`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_password`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_salt`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_md5`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_sha1`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`login_sha256`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`dob_date`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`dob_age`</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="string">`registered_date`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`registered_age`</span> <span class="built_in">int</span>,</span><br><span class="line"><span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`cell`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`id_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`id_value`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`picture_large`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`picture_medium`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`picture_thumbnail`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line"><span class="string">`nat`</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建 ConvertJSONToSQL Processor</p><p>在 NiFi 中创建并配置 MySQL service，需要指定 Connector Driver 的路径和类名(这里使用的是 MariaDB)，并填写 用户名、连接地址等参数</p><p><img src="/images/image-20190104125536816-6577736.png" alt="image-20190104125536816"></p><p>创建好 MySQL Service 后在 ConvertJSONToSQL 中配置对应的参数</p><p><img src="/images/image-20190104125940747-6577980.png" alt="image-20190104125940747"></p><p>连接 ConvertJSONToSQL 和 FlattenJson</p><h4 id="ExecuteSQL"><a href="#ExecuteSQL" class="headerlink" title="ExecuteSQL"></a>ExecuteSQL</h4><p>创建 ExecuteSQL Processor</p><p>配置对应的数据库连接池，这里可以复用上一步创建的 MySQLConnection Service</p><p><img src="/images/image-20190104130509688-6578309.png" alt="image-20190104130509688"></p><p>连接 ExecuteSQL 和 ConvertJSONToSQL</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>最后我们的数据流如下</p><p><img src="/images/image-20190104130758360-6578478.png" alt="image-20190104130758360"></p><p>查询数据库，不断的有数据插入</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(login_username) from users;</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| count(login_username) |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">|                108154 |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br></pre></td></tr></table></figure><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>当 上游数据生产的过快，无法及时消费，就需要限流，限制上游的连接数，防止数据过载对整个数据流的影响</p><p>NiFi 可以对每一个连接的队列设置阈值</p><p>默认是 1000 个 flowfile 或者 1G 大小</p><p><img src="/images/image-20190104140848748-6582128.png" alt="image-20190104140848748"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解了 Processor 和 Flowfile 的状态和流程，在 NiFi 中定义 数据流还是很容易的，NiFi 自带的 Processor 种类也非常丰富，也支持自己写对应的 Processor</p><p>在 NiFi 中定义了数据流之后，就可以很清晰的看到流式数据的路由，状态，也很容易地对现有的数据流进行扩展</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多情况下，需要从不同的数据源中提取数据，并将数据格式进行转换，定义不同的流程，传输到对应的系统中&lt;/p&gt;
&lt;p&gt;需求较为简单的情况下，可以通过自己写代码实现，但在数据流比较复杂后，整个流程难以维护，扩展性很差&lt;/p&gt;
&lt;p&gt;这时候就需要引入像 NiFi、StreamSets 这类的 DFM(Data Flow Management) 数据流处理平台，这篇文章主要介绍在 NiFi 中定义一个简单的数据流&lt;/p&gt;
    
    </summary>
    
    
      <category term="dataflow" scheme="https://anyisalin.github.io/tags/dataflow/"/>
    
      <category term="nifi" scheme="https://anyisalin.github.io/tags/nifi/"/>
    
  </entry>
  
  <entry>
    <title>科技改生活 · 2018 败家记录</title>
    <link href="https://anyisalin.github.io/2018/12/31/2018-buy/"/>
    <id>https://anyisalin.github.io/2018/12/31/2018-buy/</id>
    <published>2018-12-31T09:08:54.000Z</published>
    <updated>2018-12-31T14:55:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>明天就是 2019 了，简单总结一下 2018 年买过的电子产品。</p><a id="more"></a><h2 id="台式机的升级"><a href="#台式机的升级" class="headerlink" title="台式机的升级"></a>台式机的升级</h2><p>上半年玩网游，对 cpu 单核性能要求较高，所以升级了一下配置</p><h3 id="i7-8700k"><a href="#i7-8700k" class="headerlink" title="i7 8700k"></a>i7 8700k</h3><p>由于之前是 ryzen r7 1700，换成了 87k 之后玩网游的时候提升巨大，但体质不太好，日常只能超到 4.8</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-cpu.jpg" alt="UNADJUSTEDNONRAW_thumb_5cd"></p><h3 id="影驰名人堂HOF-Extreme-DDR4-3600-8G-x-2"><a href="#影驰名人堂HOF-Extreme-DDR4-3600-8G-x-2" class="headerlink" title="影驰名人堂HOF Extreme DDR4 3600 8G x 2"></a>影驰名人堂HOF Extreme DDR4 3600 8G x 2</h3><p>这个内存可以直接通过 profile.2 超频到 3600hz，在当时价格也比较便宜 (1400 两条)</p><h3 id="技嘉-Z370-AORUS-GAMING-WIFI"><a href="#技嘉-Z370-AORUS-GAMING-WIFI" class="headerlink" title="技嘉 Z370 AORUS GAMING WIFI"></a>技嘉 Z370 AORUS GAMING WIFI</h3><p>超频群里的大佬推荐的，是 gaming 5 的马甲版，便宜好几百，但设计上存在有问题，宣传内存可以超频到 4000，但实际上最高只能到 3600</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-board.jpg" alt="UNADJUSTEDNONRAW_thumb_606"></p><h2 id="外设"><a href="#外设" class="headerlink" title="外设"></a>外设</h2><h3 id="K70-LUX-RGB-红轴"><a href="#K70-LUX-RGB-红轴" class="headerlink" title="K70 LUX RGB 红轴"></a>K70 LUX RGB 红轴</h3><p>迫不得已才买的这一款，当时需要一个支持全键键盘宏的键盘，除了雷蛇只有海盗船支持了，实际用下来体验非常的差，软件驱动相比于雷蛇的很糟糕，键盘手感一般，还得接两个 usb 口，线没办法分离就算了，还特别的粗，没法整理</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-k70.jpg" alt="UNADJUSTEDNONRAW_thumb_5e7"></p><h3 id="MX-Master"><a href="#MX-Master" class="headerlink" title="MX Master"></a>MX Master</h3><p>今年有一段时间在写前端的项目，F12 调试需要频繁的点击，用 MacBook Pro 的触摸板一个礼拜，手指疼的不行，所以就买了一个</p><p>用了半年多，体验非常好，smartshift 和 左边拇指滚动键 以及 通过罗技驱动完成在各场景下的快捷操作，大大提高了工作效率</p><h3 id="AirPods"><a href="#AirPods" class="headerlink" title="AirPods"></a>AirPods</h3><p>今年买的最值的一款数码产品</p><ul><li>在 iPhone、iPad、Macbook Pro 上灵活切换</li><li>续航很好，充满一次 Apple Case 能够用一整天</li></ul><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-airpods.jpg" alt="UNADJUSTEDNONRAW_thumb_7e0"></p><h3 id="Apple-Watch-Series-4"><a href="#Apple-Watch-Series-4" class="headerlink" title="Apple Watch Series 4"></a>Apple Watch Series 4</h3><p>买之前以为要吃灰的，没想到超级好用，睡觉都戴着</p><ul><li>接收 iPhone 通知，不需要频繁的抬手机</li><li>关注身体状况，心率，睡眠(autosleep)等数据</li><li>通过 AirPods 连接手机听歌时，可以调整音量</li></ul><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-applewatchs4.jpg" alt="UNADJUSTEDNONRAW_thumb_8f6"></p><h3 id="LG34uc79g"><a href="#LG34uc79g" class="headerlink" title="LG34uc79g"></a>LG34uc79g</h3><p>性价比很高的一款显示器，就是分辨率太低了</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-lg-monitor.jpg" alt="UNADJUSTEDNONRAW_thumb_9dd"></p><h2 id="智能家居"><a href="#智能家居" class="headerlink" title="智能家居"></a>智能家居</h2><h3 id="小米扫地机器人"><a href="#小米扫地机器人" class="headerlink" title="小米扫地机器人"></a>小米扫地机器人</h3><p>扫地机器人不是 “扫地” 的，而是扫灰的，除了缠住线会 “罢工” 以外，打扫的很干净。</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-mi-robot.jpg" alt="UNADJUSTEDNONRAW_thumb_745"></p><h3 id="小米空气净化器-Pro"><a href="#小米空气净化器-Pro" class="headerlink" title="小米空气净化器 Pro"></a>小米空气净化器 Pro</h3><p>感觉贼亏，因为这边除了隔壁邻居做饭抽油烟机逆阀以外，PM 2.5 没有超过 10 的时候</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-mi-air-pro.jpg" alt="UNADJUSTEDNONRAW_thumb_7f3"></p><h3 id="小爱同学"><a href="#小爱同学" class="headerlink" title="小爱同学"></a>小爱同学</h3><p>不得不说，小爱同学今年帮了我不少忙</p><ul><li>小爱同学，帮我把空调打开并调成制冷模式</li><li>小爱同学，我出门了 (自动关灯，关空调，关电风扇)</li><li>小爱同学，最近有啥好听的歌</li><li>小爱同学，明天早上六点半叫我起床</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Nintendo-Switch"><a href="#Nintendo-Switch" class="headerlink" title="Nintendo Switch"></a>Nintendo Switch</h3><p>闲下来的时候消遣一下</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/buy-ns-switch.jpg" alt="UNADJUSTEDNONRAW_thumb_964"></p><h3 id="xbox-手柄"><a href="#xbox-手柄" class="headerlink" title="xbox 手柄"></a>xbox 手柄</h3><p>手柄游戏体验比键盘好太多了，用过都知道</p><h3 id="电信-1000M-宽带"><a href="#电信-1000M-宽带" class="headerlink" title="电信 1000M 宽带"></a>电信 1000M 宽带</h3><p>飞起来！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还有很多小物件这里就不一一列举了，虽然今年没有更新 Macbook Pro、iPhone 等大件，但即使是这些小的数码产品，也可以为生活增添不一样的色彩</p><p>总之，科技改变生活。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明天就是 2019 了，简单总结一下 2018 年买过的电子产品。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="https://anyisalin.github.io/tags/game/"/>
    
      <category term="buy" scheme="https://anyisalin.github.io/tags/buy/"/>
    
  </entry>
  
  <entry>
    <title>刺客信条·奥德赛 玩后感</title>
    <link href="https://anyisalin.github.io/2018/12/06/assassin-s-creed-odyssey-overview/"/>
    <id>https://anyisalin.github.io/2018/12/06/assassin-s-creed-odyssey-overview/</id>
    <published>2018-12-06T09:03:42.000Z</published>
    <updated>2018-12-07T10:11:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几周花了 50 个小时把 刺客信条·起源 三条主线通关了，很多云玩家认为奥德赛只是起源换了一个皮肤，但是相信真正玩过奥德赛的人不会那么认为，起源是刺客信条 ARPG 和开放世界的初次尝试，而奥德赛增强 ARPG 元素则代表育碧在 ARPG 和开放世界下功夫的决心。</p><a id="more"></a><h2 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h2><p>画面效果和风格和前代基本一致，这也是众多云玩家说奥德赛只是套皮肤的原因，但在场景上，前代故事发生在古埃及，所以沙漠、金字塔的场景比较多，这一代则更多的是城市与神殿，俯瞰点一般都在神殿雕像上。</p><p>我的配置还算可以，在 2560 * 1080 的分辨率下，全程最高特效基本都能在 60 帧以上，特定场景会掉到 40 多帧</p><ul><li>CPU -&gt; i7 8700k</li><li>RAM -&gt; 2 X 8G 3600</li><li>Graphic -&gt; GTX 1080</li><li>SSD  -&gt;  Liteon T10</li></ul><h2 id="战斗系统"><a href="#战斗系统" class="headerlink" title="战斗系统"></a>战斗系统</h2><p>技能加点方面和前代一样，分为 猎人/战士/刺客 三条路线，但在操作方面奥德赛没有起源的盾牌模式，对于特殊技能的使用也赋予了新的组合按键，玩家可以自定义使用的 弓箭和近战武器 的技能，这一方面比起源的体验好了许多。</p><p>起源在关键剧情中引入了海战，奥德赛全程都可以操控船只在古希腊的海域中穿梭，并随时可以与路上的 海盗/雅典/斯巴达 船只战斗，但感觉战斗模式还是比较单一，只有标枪和弓箭可以操作，总的来说还可以。</p><p>奥德赛引入的雇佣兵系统真的很头疼，在你做任务的时候一直都会有人追杀你，而且每次都是一打几，雇佣兵永远杀不完，越杀越多，随着等级的提升，雇佣兵的等级也会提升，特别在清据点的时候，可能据点清完了，却被雇佣兵包围干死了，我好几次实在着急完成任务，只能花重金洗白了。</p><h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>奥德赛的主要剧情分为三个部分，可以先后完成相应部分的结局。对比与前作增加了对话选择系统，也就意味着根据玩家选择的不同，也会有不同的结局。奥德赛有九种不同的结局，我歪打正着完成了完美结局。</p><p>奥德赛的故事开始于公元前 431年，伯罗奔尼撒战争期间，起源的 400 年前，剧情燃点不要太多，后期高潮不断，剧情以及场景对于熟悉古希腊神话的玩家会感到很亲切，这里就不剧透了，但剧情真的超级精彩！</p><h2 id="截图欣赏"><a href="#截图欣赏" class="headerlink" title="截图欣赏"></a>截图欣赏</h2><p><img src="http://anyisalin1-1251720225.cossh.myqcloud.com/blog/acod-overview-1.jpg" alt></p><p><img src="http://anyisalin1-1251720225.cossh.myqcloud.com/blog/acod-overview-2.jpg" alt></p><p><img src="http://anyisalin1-1251720225.cossh.myqcloud.com/blog/acod-overview-3.jpeg" alt></p><p><img src="http://anyisalin1-1251720225.cossh.myqcloud.com/blog/acod-overview-4.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几周花了 50 个小时把 刺客信条·起源 三条主线通关了，很多云玩家认为奥德赛只是起源换了一个皮肤，但是相信真正玩过奥德赛的人不会那么认为，起源是刺客信条 ARPG 和开放世界的初次尝试，而奥德赛增强 ARPG 元素则代表育碧在 ARPG 和开放世界下功夫的决心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="https://anyisalin.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>一次京东售后掉件的经历</title>
    <link href="https://anyisalin.github.io/2018/12/05/jd-airpods/"/>
    <id>https://anyisalin.github.io/2018/12/05/jd-airpods/</id>
    <published>2018-12-05T08:03:42.000Z</published>
    <updated>2018-12-07T10:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>大约半个月前 AirPods 右耳没有声音，无论如何重连，重置，通过 Find My AirPods 播放声音都没用，但是右耳手势能够正常使用，确定耳机故障，于是准备预约 GeniusBar 维修，但是由于附近的 Apple Store 实在太忙了，预约得到下周，然后我为了省事直接走的 京东 售后，预约隔天取件。</p><p>由于在外出差，无法提供包装盒以及原装配件，快递小哥上门时候没办法扫描条形码完成取件流程，和快递小哥商量，耳机先给他带回快递站，然后我去问客服要条形码发给他走流程。</p><p>第二天，我的 AirPods 开始前往 <code>上海3C备件库</code> ，并于 16 号到达这个仓库，然后就没有任何消息了。</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/jd-flow.png" alt></p><p>没有 AirPods 的我仿佛没有了灵魂，每隔几天就骚扰一下京东 <strong>网页客服</strong> 希望能快点维修，但是<strong>网页客服</strong> 总是用 <code>周期为15-30天左右</code> 的说明来搪塞我。</p><p>直到前天，我的显示器屏幕碎了，也走了售后的流程，同样是寄往 <code>上海3C备件库</code> ，但是一天内就有人联系我，说明商品的拆包检测情况，我就感觉不对劲了，于是昨晚我联系了京东的 <strong>电话客服</strong> ，没想到 <strong>电话客服</strong>直接就说我寄的东西与原商品不符合，于是被拒收了。。。但是我半个月却没有收到任何信息，<strong>电话客服</strong>说隔天会有专员联系我处理此事。</p><p>今天中午的时候，京东售后专员联系了我，描述了具体的情况，说他们收到了 <strong>空包</strong> ，我向他解释了上门取件的一些细节后他说可以进行现金赔付，但需要一到两天的时间走流程。</p><p>这件事情到此算是结束了，对于处理结果还是相对满意的，但是仍然有以下几个疑问。</p><ul><li>京东网页客服的权限是否没有电话客服大，为什么电话客服能够准确的解决我的问题</li><li>京东售后取件 -&gt; 维修的流程是否有漏洞，为什么会出现这种情况</li></ul><p>作为京东的钻石+Plus会员多年，一直对京东的时效性和售后服务很满意，但最近除了这件事情之外，还有好几次 <strong>京准达</strong> 快递没有准时送达，哎，希望京东继续努力吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;大约半个月前 AirPods 右耳没有声音，无论如何重连，重置，通过 Find My AirPods 播放声音都没用，但是右耳手势能够正常使用，确定耳机故障，于是准备预约 GeniusBar 维修，但是由于附近的 Apple Store
        
      
    
    </summary>
    
    
      <category term="jd" scheme="https://anyisalin.github.io/tags/jd/"/>
    
  </entry>
  
  <entry>
    <title>通过 Wireguard 构建 NAT to NAT VPN</title>
    <link href="https://anyisalin.github.io/2018/11/21/fast-flexible-nat-to-nat-vpn-wireguard/"/>
    <id>https://anyisalin.github.io/2018/11/21/fast-flexible-nat-to-nat-vpn-wireguard/</id>
    <published>2018-11-21T03:20:19.000Z</published>
    <updated>2019-01-22T05:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>WireGuard ®是一种非常简单而现代，快捷的VPN，利用<strong>最先进的加密技术</strong>。它比IPSec <a href="https://www.wireguard.com/performance/" target="_blank" rel="noopener">更快</a>，<a href="https://www.wireguard.com/quickstart/" target="_blank" rel="noopener">更简单</a>，更精简，更有用。它比OpenVPN更高效。WireGuard设计为通用VPN，适用于多种不同情况。它是跨平台的，可大规模部署。它已经被认为是业内最安全，最易于使用，最简单的VPN解决方案。</p><a id="more"></a><h1 id="nat-to-nat-场景下-openvpn-vs-wireguard-架构"><a href="#nat-to-nat-场景下-openvpn-vs-wireguard-架构" class="headerlink" title="nat to nat 场景下 openvpn vs wireguard 架构"></a>nat to nat 场景下 openvpn vs wireguard 架构</h1><p>传统 vpn 在很难做到类似多个 nat 之间资源共享</p><p>客户端如果想要同时访问多个 nat 只能像图中的 NAT C 客户端一样连接两个 vpn</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/legacy-openvpn2.png" alt="openvpn"></p><p>得益于 wireguard 中没有 client/server 的概念，所有 nat 中的某台机器与 gateway 主机建立连接，即可实现共享所有节点的网络资源</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/new-wireguard.png" alt="wireguard"></p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>实验环境如下，Peer 指的是每个 wireguard 节点的出口网卡，类似 openvpn 连接生成的 tunnel 网卡</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/wireguard-traning.png" alt="image-20181121164048431"></p><p>安装 wireguard 参考 <a href="https://www.wireguard.com/install/" target="_blank" rel="noopener">https://www.wireguard.com/install/</a></p><p>确保需要共享 nat 的 wireguard 节点 ip 转发已开启</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -w net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><h2 id="gateway-配置"><a href="#gateway-配置" class="headerlink" title="gateway 配置"></a>gateway 配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/wireguard</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat &gt; wg0.conf &lt;&lt;EOF</span><br><span class="line">[Interface]</span><br><span class="line">ListenPort = 12000</span><br><span class="line">Address = 5.5.5.1/24</span><br><span class="line">PrivateKey = $&#123;GATEWAY_SERVER_PRIVATE_KEY&#125;</span><br><span class="line">PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg-quick up wg0</span><br></pre></td></tr></table></figure><h2 id="NAT-A-配置"><a href="#NAT-A-配置" class="headerlink" title="NAT-A 配置"></a>NAT-A 配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/wireguard</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat &gt; wg0.conf &lt;&lt;EOF</span><br><span class="line">[Interface]</span><br><span class="line">Address = 5.5.5.4/24</span><br><span class="line">PrivateKey = $&#123;NAT_A_PRIVATE_KEY&#125;</span><br><span class="line">PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;GATEWAY_SERVER_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs =  5.5.5.0/24</span><br><span class="line">Endpoint = $&#123;GATEWAY_SERVER:12000&#125;</span><br><span class="line">PersistentKeepalive = 10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg-quick up wg0</span><br></pre></td></tr></table></figure><h2 id="NAT-D-配置"><a href="#NAT-D-配置" class="headerlink" title="NAT-D 配置"></a>NAT-D 配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/wireguard</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat &gt; wg0.conf &lt;&lt;EOF</span><br><span class="line">[Interface]</span><br><span class="line">Address = 5.5.5.2/24</span><br><span class="line">PrivateKey = $&#123;NAT_D_PRIVATE_KEY&#125;</span><br><span class="line">PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;GATEWAY_SERVER_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs =  5.5.5.0/24</span><br><span class="line">Endpoint = $&#123;GATEWAY_SERVER:12000&#125;</span><br><span class="line">PersistentKeepalive = 10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg-quick up wg0</span><br></pre></td></tr></table></figure><h2 id="NAT-C-配置"><a href="#NAT-C-配置" class="headerlink" title="NAT-C 配置"></a>NAT-C 配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/wireguard</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg genkey | tee privatekey | wg pubkey &gt; publickey</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat &gt; wg0.conf &lt;&lt;EOF</span><br><span class="line">[Interface]</span><br><span class="line">Address = 5.5.5.3/24</span><br><span class="line">PrivateKey = $&#123;NAT_C_PRIVATE_KEY&#125;</span><br><span class="line">PostUp   = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;GATEWAY_SERVER_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs =  5.5.5.0/24</span><br><span class="line">Endpoint = $&#123;GATEWAY_SERVER:12000&#125;</span><br><span class="line">PersistentKeepalive = 10</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg-quick up wg0</span><br></pre></td></tr></table></figure><h2 id="gateway-添加-peer"><a href="#gateway-添加-peer" class="headerlink" title="gateway 添加 peer"></a>gateway 添加 peer</h2><p>在所有的 wireguard 节点配置好之后，要在 gateway 节点添加 peer 的信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd /etc/wireguard</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat &gt;&gt; wg0.conf &lt;&lt;EOF</span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;NAT_A_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs = 5.5.5.4/32</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;NAT_C_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs = 5.5.5.3/32</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;NAT_D_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs = 5.5.5.2/32</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> wg-quick down wg0 &amp;&amp; wg-quick up wg0</span><br></pre></td></tr></table></figure><h2 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h2><p>现在所有节点的 5.5.5.0/24 网段已经建立了连接，在任意 wireguard 节点都应该能够 ping 通以下 IP</p><ul><li>5.5.5.1</li><li>5.5.5.2</li><li>5.5.5.3</li><li>5.5.5.4</li></ul><h2 id="共享-NAT"><a href="#共享-NAT" class="headerlink" title="共享 NAT"></a>共享 NAT</h2><p>连接测试成功之后就可以共享 wireguard 节点的所在的网络了</p><p>wireguard 配置文件中 <code>Peer.AllowedIPs</code> 实际上就是在当前节点上加多条静态路由</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip route add 5.5.5.2/32 dev wg0</span><br></pre></td></tr></table></figure><p>目前 gateway 节点只能够访问 5.5.5.0/24 网段的机器，但我们只需要将需要访问的 nat 网段添加到 对应的 <code>Peer</code> 下的 <code>AllowedIPs</code> 中就能够正常访问了</p><p>例如，我们需要在 gateway 节点上访问 NAT-A(10.10.23.0/24) 网段，那么我们只需要修改 gateway 节点上 wireguard 配置文件中 NAT-A Peer 的配置即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Peer]</span><br><span class="line">PublicKey = $&#123;NAT_A_PUBLIC_KEY&#125;</span><br><span class="line">AllowedIPs = 5.5.5.3/32,10.10.23.0/24</span><br></pre></td></tr></table></figure><p>配置完成之后 <code>wg-quick down wg0 &amp;&amp; wg-quick up wg0</code> 尝试 ping NAT-A 网段的地址即可</p><p>只要 gateway 能够访问 NAT-A 网段的之后，同理在其他的 wireguard 客户端配置 gateway <code>Peer</code> 的 <code>AllowedIPs</code> 之后，通过 gateway 进行一次转发也能够访问 NAT-A 网段了</p><h1 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h1><p>由于工作原因，平时有很多不同的网络环境需要访问，常常需要 ssh 代理、openvpn 来切换各种网络环境，用了 wireguard 之后解决了我的痛点，目前我使用 wireguard 连接了五个 NAT 网络</p><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/my-wireguard-env.png" alt="image-20181121175616327"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过 wireguard 可以迅速构建支持多平台的大规模复杂的 vpn 网络，并且 wireguard 的<a href="https://www.wireguard.com/performance/" target="_blank" rel="noopener">性能</a>高于 <code>openvpn</code>、<code>ipsec</code> 等常用 vpn 方案</p><p>更多关于 wireguard 的资料</p><p><a href="https://www.wireguard.com/" target="_blank" rel="noopener">https://www.wireguard.com/</a></p><p><a href="https://staaldraad.github.io/2017/04/17/nat-to-nat-with-wireguard/" target="_blank" rel="noopener">https://staaldraad.github.io/2017/04/17/nat-to-nat-with-wireguard/</a></p><p><a href="https://github.com/adrianmihalko/raspberrypiwireguard" target="_blank" rel="noopener">https://github.com/adrianmihalko/raspberrypiwireguard</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WireGuard ®是一种非常简单而现代，快捷的VPN，利用&lt;strong&gt;最先进的加密技术&lt;/strong&gt;。它比IPSec &lt;a href=&quot;https://www.wireguard.com/performance/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;更快&lt;/a&gt;，&lt;a href=&quot;https://www.wireguard.com/quickstart/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;更简单&lt;/a&gt;，更精简，更有用。它比OpenVPN更高效。WireGuard设计为通用VPN，适用于多种不同情况。它是跨平台的，可大规模部署。它已经被认为是业内最安全，最易于使用，最简单的VPN解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vpn" scheme="https://anyisalin.github.io/tags/vpn/"/>
    
      <category term="wireguard" scheme="https://anyisalin.github.io/tags/wireguard/"/>
    
  </entry>
  
  <entry>
    <title>外出串流家里台式机玩 assassin&#39;s creed odyssey</title>
    <link href="https://anyisalin.github.io/2018/10/25/moonlight-with-nvidia-shield-internet-streaming/"/>
    <id>https://anyisalin.github.io/2018/10/25/moonlight-with-nvidia-shield-internet-streaming/</id>
    <published>2018-10-25T03:18:33.000Z</published>
    <updated>2018-11-21T10:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于长期出差，又想玩 刺客信条·奥德赛，所以这几天研究了一下 互联网串流的解决方案</p><p>最后选择了 <a href="https://moonlight-stream.com/" target="_blank" rel="noopener">moonlight</a> + <a href="https://www.nvidia.com/en-us/shield/" target="_blank" rel="noopener">NVIDIA Shield</a>  的方案</p><p><code>moonlight</code> 是一个跨平台并且支持 <code>NVIDIA GAMESTREAM</code> 协议的客户端</p><p><code>moonlight</code> 支持最高     120 FPS、4K 分辨率、Xbox/PS4 等控制器</p><p>互联网串流参考 <a href="https://github.com/moonlight-stream/moonlight-docs/wiki/Setup-Guide" target="_blank" rel="noopener">https://github.com/moonlight-stream/moonlight-docs/wiki/Setup-Guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;由于长期出差，又想玩 刺客信条·奥德赛，所以这几天研究了一下 互联网串流的解决方案&lt;/p&gt;
&lt;p&gt;最后选择了 &lt;a href=&quot;https://moonlight-stream.com/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="game" scheme="https://anyisalin.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>dnspod DDNS crontab</title>
    <link href="https://anyisalin.github.io/2018/09/12/dnspod-ddns-crontab/"/>
    <id>https://anyisalin.github.io/2018/09/12/dnspod-ddns-crontab/</id>
    <published>2018-09-12T01:45:43.000Z</published>
    <updated>2018-09-12T01:53:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过控制台获取 <code>TOKEN</code> ，注意请求参数中的 <code>TOKEN</code> 是 用户 ID + <code>TOKEN</code> 组合</p><p><a href="http://www.dnspod.cn/docs/records.html#dns" target="_blank" rel="noopener">dnspod 文档</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat /etc/ddns/ddns.sh</span><br><span class="line">IP=$(/sbin/ifconfig pppoe-wan| grep 'inet addr' | cut -d: -f2 | awk '&#123;print $1&#125;') # 这里 pppoe-wan 指的是公网地址的接口</span><br><span class="line"></span><br><span class="line">/usr/bin/curl -X POST https://dnsapi.cn/Record.Ddns -d "login_token=$&#123;ACCOUNT_ID&#125;,$&#123;TOKEN&#125;&amp;record_line_id=0&amp;sub_domain=home&amp;value=$&#123;IP&#125;"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cat /etc/crontabs/root</span><br><span class="line">*****</span><br><span class="line">*/1 * * * * /etc/ddns/ddns.sh # 如果1小时之内，提交了超过5次没有任何变动的记录修改请求，该记录会被系统锁定1小时</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;通过控制台获取 &lt;code&gt;TOKEN&lt;/code&gt; ，注意请求参数中的 &lt;code&gt;TOKEN&lt;/code&gt; 是 用户 ID + &lt;code&gt;TOKEN&lt;/code&gt; 组合&lt;/p&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="router" scheme="https://anyisalin.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>小米路由器端口转发 Internal Server Error</title>
    <link href="https://anyisalin.github.io/2018/09/07/fix-miwifi-portforward/"/>
    <id>https://anyisalin.github.io/2018/09/07/fix-miwifi-portforward/</id>
    <published>2018-09-07T13:57:29.000Z</published>
    <updated>2018-09-07T14:23:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天想给家里路由器 (XiaoMi R3D) 做个端口映射给同事演示做的东西，但是发现通过网页设置路由器端口映射直接返回 500 错误，查了下日志也看到什么错误，然后查看了一下相关代码，并通过 <code>lua</code> 交互式客户端调试了一下</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">local</span> pf = <span class="built_in">require</span>(<span class="string">"xiaoqiang.module.XQPortForward"</span>)</span><br><span class="line">    pf.setPortForward(<span class="string">'test'</span>, <span class="string">'192.168.231.204'</span>, <span class="number">6800</span>, <span class="number">8000</span>, <span class="string">"tcp"</span>)</span><br><span class="line"><span class="keyword">end</span>&gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt; &gt;&gt;</span><br><span class="line">/usr/lib/lua/xiaoqiang/module/XQPortForward.lua:<span class="number">93</span>: attempt to compare <span class="literal">nil</span> with number</span><br><span class="line">stack <span class="built_in">traceback</span>:</span><br><span class="line">        [C]: <span class="keyword">in</span> <span class="function"><span class="keyword">function</span> '<span class="title">foreach</span>'</span></span><br><span class="line"><span class="function">        /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">lua</span>/<span class="title">xiaoqiang</span>/<span class="title">module</span>/<span class="title">XQPortForward.lua</span>:104: <span class="title">in</span> <span class="title">function</span> '<span class="title">_portConflictCheck</span>'</span></span><br><span class="line"><span class="function">        /<span class="title">usr</span>/<span class="title">lib</span>/<span class="title">lua</span>/<span class="title">xiaoqiang</span>/<span class="title">module</span>/<span class="title">XQPortForward.lua</span>:181: <span class="title">in</span> <span class="title">function</span> '<span class="title">setPortForward</span>'</span></span><br><span class="line"><span class="function">        <span class="title">stdin</span>:6: <span class="title">in</span> <span class="title">main</span> <span class="title">chunk</span></span></span><br><span class="line"><span class="function">        [<span class="title">C</span>]: ?</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>发现错误发生在校验指定的目标端口是否已经使用的代码中，代码如下</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_portRangeOverlap</span><span class="params">(port1, port2)</span></span></span><br><span class="line">    <span class="keyword">local</span> LuciUtil = <span class="built_in">require</span>(<span class="string">"luci.util"</span>)</span><br><span class="line">    <span class="keyword">if</span> port1 <span class="keyword">and</span> port2 <span class="keyword">then</span></span><br><span class="line">        port1 = <span class="built_in">tostring</span>(port1)</span><br><span class="line">        port2 = <span class="built_in">tostring</span>(port2)</span><br><span class="line">        <span class="keyword">if</span> port1 == port2 <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">local</span> range1 = &#123;&#125;</span><br><span class="line">        <span class="keyword">local</span> range2 = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> port1:<span class="built_in">match</span>(<span class="string">"-"</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> sp = LuciUtil.split(port1, <span class="string">"-"</span>)</span><br><span class="line">            range1[<span class="string">"f"</span>] = <span class="built_in">tonumber</span>(sp[<span class="number">1</span>])</span><br><span class="line">            range1[<span class="string">"t"</span>] = <span class="built_in">tonumber</span>(sp[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            range1[<span class="string">"f"</span>] = <span class="built_in">tonumber</span>(port1)</span><br><span class="line">            range1[<span class="string">"t"</span>] = <span class="built_in">tonumber</span>(port1)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> port2:<span class="built_in">match</span>(<span class="string">"-"</span>) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">local</span> sp = LuciUtil.split(port2, <span class="string">"-"</span>)</span><br><span class="line">            range2[<span class="string">"f"</span>] = <span class="built_in">tonumber</span>(sp[<span class="number">1</span>])</span><br><span class="line">            range2[<span class="string">"t"</span>] = <span class="built_in">tonumber</span>(sp[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            range2[<span class="string">"f"</span>] = <span class="built_in">tonumber</span>(port2)</span><br><span class="line">            range2[<span class="string">"t"</span>] = <span class="built_in">tonumber</span>(port2)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> (range1.f &gt;= range2.f <span class="keyword">and</span> range1.f &lt;= range2.t) <span class="keyword">or</span></span><br><span class="line">            (range1.t &gt;= range2.f <span class="keyword">and</span> range1.t &lt;= range2.t) <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>错误出现在这一行代码中，错误的原因是 <code>range1.f</code> 的值为 <code>nil</code> 而 <code>range2.f</code> 的数据类型为 <code>number</code> 不能进行比较</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (range1.f &gt;= range2.f <span class="keyword">and</span> range1.f &lt;= range2.t)</span><br></pre></td></tr></table></figure><p>为什么 <code>range1.f</code> 会是 <code>nil</code> 呢，笔者看了一下前面的代码</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">uci:<span class="built_in">foreach</span>(<span class="string">"firewall"</span>, <span class="string">"redirect"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span><span class="params">(s)</span></span></span><br><span class="line">        <span class="keyword">if</span> _portRangeOverlap(port, s.src_dport) <span class="keyword">then</span></span><br><span class="line">            result = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>是对 uci (lua 统一配置接口) 中的 <code>firewall.redirect</code> 这部分内容进行迭代，与指定的目标端口进行对比，那么原因就出现在笔者环境中的 <code>firewall.redirect</code> 里面了，通过命令查看配置内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> uci show firewall.@redirect[1]</span><br><span class="line">firewall.cfg333837=redirect</span><br><span class="line">firewall.cfg333837.name=wan samba</span><br><span class="line">firewall.cfg333837.src=wan</span><br><span class="line">firewall.cfg333837.src_dport=137 139 445</span><br><span class="line">firewall.cfg333837.dest=lan</span><br><span class="line">firewall.cfg333837.proto=tcp udp</span><br></pre></td></tr></table></figure><p>可以看到这个配置里面的 dport 不是标准的格式，那么问题就是出现在这里了，通过以下命令删除对应的配置就搞定了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> uci delete firewall.@redirect[1]</span><br></pre></td></tr></table></figure><p>为什么会出现这个问题，笔者认为应该是之前配置 <code>smb</code> 外网访问导致的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天想给家里路由器 (XiaoMi R3D) 做个端口映射给同事演示做的东西，但是发现通过网页设置路由器端口映射直接返回 500 错误，查了下日志也看到什么错误，然后查看了一下相关代码，并通过 &lt;code&gt;lua&lt;/code&gt; 交互式客户端调试了一下&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;local&lt;/span&gt; pf = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;xiaoqiang.module.XQPortForward&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pf.setPortForward(&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;192.168.231.204&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6800&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt; &amp;gt;&amp;gt; &amp;gt;&amp;gt; &amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/lib/lua/xiaoqiang/module/XQPortForward.lua:&lt;span class=&quot;number&quot;&gt;93&lt;/span&gt;: attempt to compare &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; with number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stack &lt;span class=&quot;built_in&quot;&gt;traceback&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [C]: &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;foreach&lt;/span&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        /&lt;span class=&quot;title&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;lua&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;xiaoqiang&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;XQPortForward.lua&lt;/span&gt;:104: &lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;_portConflictCheck&lt;/span&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        /&lt;span class=&quot;title&quot;&gt;usr&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;lua&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;xiaoqiang&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;module&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;XQPortForward.lua&lt;/span&gt;:181: &lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;function&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;setPortForward&lt;/span&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        &lt;span class=&quot;title&quot;&gt;stdin&lt;/span&gt;:6: &lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;chunk&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        [&lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;]: ?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="router" scheme="https://anyisalin.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>基于 openstack 的 kubernetes(rancher RKE) 测试</title>
    <link href="https://anyisalin.github.io/2018/09/04/rancher-k8s-openstack/"/>
    <id>https://anyisalin.github.io/2018/09/04/rancher-k8s-openstack/</id>
    <published>2018-09-04T02:21:01.000Z</published>
    <updated>2018-09-04T03:13:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>近日测试 <code>openstack</code> 作为 <code>kubernetes</code> 的基础设施平台为 <code>kubernetes</code> 提供基础服务(storage, loadbalancer)</p><p>目标：</p><ul><li>为 <code>kubernetes</code> 提供 <code>cinder</code> 作为持久卷</li><li>通过 <code>openstack</code> 的 LBAAS v2 为 <code>kubernetes</code> 提供 <code>LoadBalancer</code></li></ul><h2 id="集群架构"><a href="#集群架构" class="headerlink" title="集群架构"></a>集群架构</h2><p><img src="http://anyisalin1-1251720225.file.myqcloud.com/blog/k8s-rancher-ops-arch.png" alt="k8s-rancher-ops"></p><a id="more"></a><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">x509: cannot validate certificate <span class="keyword">for</span> &lt;ipaddress&gt; because <span class="keyword">it</span> <span class="keyword">doesn't contain</span> any IP SANs</span><br></pre></td></tr></table></figure><p>这个问题没有解决，最后通过创建一个新的 openstack region，让 cinder, neutron, compute 的接口都不走 https 来规避这个问题</p><h2 id="cloud-config"><a href="#cloud-config" class="headerlink" title="cloud-config"></a>cloud-config</h2><p>由于是通过 <code>rancher</code> 进行管理，所以 cloud-config 直接写在 <code>rancher</code> 集群配置文件中即可</p><p>如果是原始的 <code>kubernetes</code> 集群，需要在 kubelet 启动时指定 cloud-config 文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cloud_provider:</span> </span><br><span class="line"><span class="attr">  name:</span> <span class="string">"openstack"</span></span><br><span class="line"><span class="attr">  openstackCloudProvider:</span> </span><br><span class="line"><span class="attr">    block_storage:</span> </span><br><span class="line"><span class="attr">      ignore-volume-az:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      trust-device-path:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    global:</span> </span><br><span class="line"><span class="attr">      auth-url:</span> <span class="string">"http://10.10.23.100:45000/v3"</span></span><br><span class="line"><span class="attr">      domain-id:</span> <span class="string">"default"</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">"******"</span></span><br><span class="line"><span class="attr">      region:</span> <span class="string">"RegionTest"</span> <span class="comment"># 笔者创建所有 endpoints 走 http 的 region</span></span><br><span class="line"><span class="attr">      tenant-id:</span> <span class="string">"287da09439154ae7a00c5583fa28de4f"</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">"anyisalin"</span></span><br><span class="line"><span class="attr">    load_balancer:</span> </span><br><span class="line"><span class="attr">      create-monitor:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      manage-security-groups:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      monitor-delay:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      monitor-max-retries:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      monitor-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      subnet-id:</span> <span class="string">"092e753f-cead-4af0-9200-cf779d0cdf04"</span> <span class="comment"># 这里是 private network 的 uuid</span></span><br><span class="line"><span class="attr">      use-octavia:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    metadata:</span> </span><br><span class="line"><span class="attr">      request-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    route:</span> </span><br><span class="line"><span class="attr">      router-id:</span> <span class="string">"8c98f2a8-eec5-451d-9249-d9f2078f768d"</span></span><br></pre></td></tr></table></figure><h2 id="cinder-storageclass"><a href="#cinder-storageclass" class="headerlink" title="cinder storageclass"></a>cinder storageclass</h2><p>cinder 作为持久卷要指定 volume type 作为参数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">RBD</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">kubernetes.io/cinder</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openstack volume list <span class="comment"># 持久卷在 openstack 中的展现</span></span></span><br><span class="line">+--------------------------------------+-------------------------------------------------------------+-----------+------+---------------------------------------------------------------+</span><br><span class="line">| ID                                   | Display Name                                                | Status    | Size | Attached to                                                   |</span><br><span class="line">+--------------------------------------+-------------------------------------------------------------+-----------+------+---------------------------------------------------------------+</span><br><span class="line">| e437f3b4-7f02-412a-b8ac-38d36d79c424 | kubernetes-dynamic-pvc-5bee62ff-aec6-11e8-868b-fa163efa03b6 | available |    1 |                                                               |</span><br><span class="line">| c360e7f0-4bfa-4424-a564-fdb7330f5fa2 | kubernetes-dynamic-pvc-404fe3e5-aec6-11e8-868b-fa163efa03b6 | available |    1 |                                                               |</span><br><span class="line">| 7e2347af-752c-42e3-a92a-c2565ab6b12c | kubernetes-dynamic-pvc-1193480a-aec6-11e8-b38a-fa163eccc6d3 | in-use    |    1 | Attached to worker3 on /dev/vdc                               |</span><br><span class="line">| 77d26e4e-40d1-4227-b605-5150559a5ccf | tst222                                                      | available |    2 |                                                               |</span><br><span class="line">| c40a48cd-c36e-4cf6-bc08-2c5f326794c4 | kubernetes-dynamic-pvc-d22e1c0e-aebf-11e8-868b-fa163efa03b6 | in-use    |   10 | Attached to worker3 on /dev/vdd                               |</span><br><span class="line">| b331a11a-c533-41fe-89aa-e4bca48484c7 | kubernetes-dynamic-pvc-d234bd67-aebf-11e8-868b-fa163efa03b6 | in-use    |   10 | Attached to worker2 on /dev/vdc                               |</span><br><span class="line">| 19bc473b-8215-45ef-b280-4e1d7c26dc56 | kubernetes-dynamic-pvc-d239d596-aebf-11e8-868b-fa163efa03b6 | in-use    |   10 | Attached to worker1 on /dev/vdc                               |</span><br><span class="line">| f03591f7-a69f-402d-9ab5-d6350d8078e9 | kubernetes-dynamic-pvc-5c4a5d33-aebf-11e8-868b-fa163efa03b6 | in-use    |    8 | Attached to worker3 on /dev/vdb                               |</span><br><span class="line">| a1383dde-bbc3-4148-a931-f86962d482a6 | kubernetes-dynamic-pvc-5c36d2c2-aebf-11e8-868b-fa163efa03b6 | in-use    |    8 | Attached to worker2 on /dev/vdb                               |</span><br><span class="line">| 568f72bc-6b74-4cd2-b795-ab109f753501 | kubernetes-dynamic-pvc-5c406970-aebf-11e8-868b-fa163efa03b6 | in-use    |    2 | Attached to worker1 on /dev/vdb                               |</span><br><span class="line">| 4e3d531e-3ea6-4f3f-a40b-3639548ed9bc | kubernetes-dynamic-pvc-0742b2bc-aebe-11e8-8fc8-fa163e64cc4c | available |    1 |                                                               |</span><br><span class="line">| 9528824a-35f0-47be-88b9-2108ba10e4cb | kubernetes-dynamic-pvc-1dae4606-acce-11e8-ad52-fa163eae37fd | in-use    |    2 | Attached to 1a5e3cee-ed4e-4a31-963f-2c7a96470c63 on /dev/vdb  |</span><br><span class="line">| f573db1e-2df1-48f9-b45f-237667b891fa | kubernetes-dynamic-pvc-1b7761b6-acc0-11e8-81f7-fa163ef239c4 | in-use    |    1 | Attached to 454551f2-5736-4b52-8c85-321f795e0cff on /dev/vdb  |</span><br><span class="line">| 2aa122b4-887b-4eaa-977e-7bbd6a001449 | kubernetes-dynamic-pvc-6a297820-ac29-11e8-b902-fa163e785cc9 | available |    1 |                                                               |</span><br><span class="line">| c6af8fc5-9c1e-4ae2-87c0-2798dbf80bc4 | kubernetes-dynamic-pvc-37419971-ac22-11e8-b864-fa163ecfcbd0 | available |    1 |                                                               |</span><br><span class="line">| 4eef9daa-3311-4787-afb8-2e41fd39c9ca | kubernetes-dynamic-pvc-b9f73456-ac18-11e8-b932-fa163e0fecaa | available |    8 |                                                               |</span><br><span class="line">| a0c0ad15-d674-4389-918f-d37126ffb59d | kubernetes-dynamic-pvc-b9fe461d-ac18-11e8-b932-fa163e0fecaa | available |   10 |                                                               |</span><br><span class="line">+--------------------------------------+-------------------------------------------------------------+-----------+------+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h2 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> neutron lbaas-member-list  2e75b034-d291-4e87-b9bf-2421bce1fc3a <span class="comment"># LoadBalancer 服务在 openstack 中的展现</span></span></span><br><span class="line">neutron CLI is deprecated and will be removed in the future. Use openstack CLI instead.</span><br><span class="line">+--------------------------------------+-----------------------------------------------------+------------+---------------+--------+--------------------------------------+----------------+</span><br><span class="line">| id                                   | name                                                | address    | protocol_port | weight | subnet_id                            | admin_state_up |</span><br><span class="line">+--------------------------------------+-----------------------------------------------------+------------+---------------+--------+--------------------------------------+----------------+</span><br><span class="line">| 2b09be24-e6b8-4fa2-872a-7840691e3f74 | member_a11a75f2eaec611e8b38afa163eccc6d_0_worker3   | 13.20.0.16 |         31127 |      1 | 092e753f-cead-4af0-9200-cf779d0cdf04 | True           |</span><br><span class="line">| 34b22906-d794-4c10-976f-74e00dfdbb91 | member_a11a75f2eaec611e8b38afa163eccc6d_0_control-2 | 13.20.0.14 |         31127 |      1 | 092e753f-cead-4af0-9200-cf779d0cdf04 | True           |</span><br><span class="line">| 5a98c11c-544f-4414-9ec8-2991b7d123e8 | member_a11a75f2eaec611e8b38afa163eccc6d_0_worker2   | 13.20.0.9  |         31127 |      1 | 092e753f-cead-4af0-9200-cf779d0cdf04 | True           |</span><br><span class="line">| 68a65652-7c4f-4b68-82e4-4a2731542664 | member_a11a75f2eaec611e8b38afa163eccc6d_0_control-3 | 13.20.0.24 |         31127 |      1 | 092e753f-cead-4af0-9200-cf779d0cdf04 | True           |</span><br><span class="line">| 8fe6c1a0-c802-4eda-b3b7-ccef920500b6 | member_a11a75f2eaec611e8b38afa163eccc6d_0_worker1   | 13.20.0.22 |         31127 |      1 | 092e753f-cead-4af0-9200-cf779d0cdf04 | True           |</span><br><span class="line">| b3a05a40-7428-4d77-a773-bfec5f93544e | member_a11a75f2eaec611e8b38afa163eccc6d_0_control-1 | 13.20.0.20 |         31127 |      1 | 092e753f-cead-4af0-9200-cf779d0cdf04 | True           |</span><br><span class="line">+--------------------------------------+-----------------------------------------------------+------------+---------------+--------+--------------------------------------+----------------+</span><br></pre></td></tr></table></figure><p><code>kubernetes</code> LoadBalancer 的原理就是通过外部服务对 service 的 NodePort 进行反代，NodePort 是通过 Kube-Proxy 做转发的，无法获取真实客户端的 IP 地址，最好还是通过 ingress 服务访问集群中的服务</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近日测试 &lt;code&gt;openstack&lt;/code&gt; 作为 &lt;code&gt;kubernetes&lt;/code&gt; 的基础设施平台为 &lt;code&gt;kubernetes&lt;/code&gt; 提供基础服务(storage, loadbalancer)&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 &lt;code&gt;kubernetes&lt;/code&gt; 提供 &lt;code&gt;cinder&lt;/code&gt; 作为持久卷&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;openstack&lt;/code&gt; 的 LBAAS v2 为 &lt;code&gt;kubernetes&lt;/code&gt; 提供 &lt;code&gt;LoadBalancer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;集群架构&quot;&gt;&lt;a href=&quot;#集群架构&quot; class=&quot;headerlink&quot; title=&quot;集群架构&quot;&gt;&lt;/a&gt;集群架构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://anyisalin1-1251720225.file.myqcloud.com/blog/k8s-rancher-ops-arch.png&quot; alt=&quot;k8s-rancher-ops&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="kubernetes" scheme="https://anyisalin.github.io/tags/kubernetes/"/>
    
      <category term="container" scheme="https://anyisalin.github.io/tags/container/"/>
    
      <category term="cloud" scheme="https://anyisalin.github.io/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>Heroku Cloud Native Application Design Twelve Factor</title>
    <link href="https://anyisalin.github.io/2018/08/26/heroku-twelve-factor/"/>
    <id>https://anyisalin.github.io/2018/08/26/heroku-twelve-factor/</id>
    <published>2018-08-26T13:26:13.000Z</published>
    <updated>2018-08-26T13:38:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://rootsongjc.gitbooks.io/kubernetes-handbook/content/cloud-native/kubernetes-and-cloud-native-app-overview.html#12%E5%9B%A0%E7%B4%A0%E5%BA%94%E7%94%A8" target="_blank" rel="noopener">中文解释 Kubernetes Handbook</a></p><p><a href="https://12factor.net/" target="_blank" rel="noopener">来源</a></p><h2 id="I-Codebase"><a href="#I-Codebase" class="headerlink" title="I. Codebase"></a><a href="https://12factor.net/codebase" target="_blank" rel="noopener">I. Codebase</a></h2><h3 id="One-codebase-tracked-in-revision-control-many-deploys"><a href="#One-codebase-tracked-in-revision-control-many-deploys" class="headerlink" title="One codebase tracked in revision control, many deploys"></a>One codebase tracked in revision control, many deploys</h3><h2 id="II-Dependencies"><a href="#II-Dependencies" class="headerlink" title="II. Dependencies"></a><a href="https://12factor.net/dependencies" target="_blank" rel="noopener">II. Dependencies</a></h2><h3 id="Explicitly-declare-and-isolate-dependencies"><a href="#Explicitly-declare-and-isolate-dependencies" class="headerlink" title="Explicitly declare and isolate dependencies"></a>Explicitly declare and isolate dependencies</h3><h2 id="III-Config"><a href="#III-Config" class="headerlink" title="III. Config"></a><a href="https://12factor.net/config" target="_blank" rel="noopener">III. Config</a></h2><h3 id="Store-config-in-the-environment"><a href="#Store-config-in-the-environment" class="headerlink" title="Store config in the environment"></a>Store config in the environment</h3><h2 id="IV-Backing-services"><a href="#IV-Backing-services" class="headerlink" title="IV. Backing services"></a><a href="https://12factor.net/backing-services" target="_blank" rel="noopener">IV. Backing services</a></h2><h3 id="Treat-backing-services-as-attached-resources"><a href="#Treat-backing-services-as-attached-resources" class="headerlink" title="Treat backing services as attached resources"></a>Treat backing services as attached resources</h3><h2 id="V-Build-release-run"><a href="#V-Build-release-run" class="headerlink" title="V. Build, release, run"></a><a href="https://12factor.net/build-release-run" target="_blank" rel="noopener">V. Build, release, run</a></h2><h3 id="Strictly-separate-build-and-run-stages"><a href="#Strictly-separate-build-and-run-stages" class="headerlink" title="Strictly separate build and run stages"></a>Strictly separate build and run stages</h3><h2 id="VI-Processes"><a href="#VI-Processes" class="headerlink" title="VI. Processes"></a><a href="https://12factor.net/processes" target="_blank" rel="noopener">VI. Processes</a></h2><h3 id="Execute-the-app-as-one-or-more-stateless-processes"><a href="#Execute-the-app-as-one-or-more-stateless-processes" class="headerlink" title="Execute the app as one or more stateless processes"></a>Execute the app as one or more stateless processes</h3><h2 id="VII-Port-binding"><a href="#VII-Port-binding" class="headerlink" title="VII. Port binding"></a><a href="https://12factor.net/port-binding" target="_blank" rel="noopener">VII. Port binding</a></h2><h3 id="Export-services-via-port-binding"><a href="#Export-services-via-port-binding" class="headerlink" title="Export services via port binding"></a>Export services via port binding</h3><h2 id="VIII-Concurrency"><a href="#VIII-Concurrency" class="headerlink" title="VIII. Concurrency"></a><a href="https://12factor.net/concurrency" target="_blank" rel="noopener">VIII. Concurrency</a></h2><h3 id="Scale-out-via-the-process-model"><a href="#Scale-out-via-the-process-model" class="headerlink" title="Scale out via the process model"></a>Scale out via the process model</h3><h2 id="IX-Disposability"><a href="#IX-Disposability" class="headerlink" title="IX. Disposability"></a><a href="https://12factor.net/disposability" target="_blank" rel="noopener">IX. Disposability</a></h2><h3 id="Maximize-robustness-with-fast-startup-and-graceful-shutdown"><a href="#Maximize-robustness-with-fast-startup-and-graceful-shutdown" class="headerlink" title="Maximize robustness with fast startup and graceful shutdown"></a>Maximize robustness with fast startup and graceful shutdown</h3><h2 id="X-Dev-prod-parity"><a href="#X-Dev-prod-parity" class="headerlink" title="X. Dev/prod parity"></a><a href="https://12factor.net/dev-prod-parity" target="_blank" rel="noopener">X. Dev/prod parity</a></h2><h3 id="Keep-development-staging-and-production-as-similar-as-possible"><a href="#Keep-development-staging-and-production-as-similar-as-possible" class="headerlink" title="Keep development, staging, and production as similar as possible"></a>Keep development, staging, and production as similar as possible</h3><h2 id="XI-Logs"><a href="#XI-Logs" class="headerlink" title="XI. Logs"></a><a href="https://12factor.net/logs" target="_blank" rel="noopener">XI. Logs</a></h2><h3 id="Treat-logs-as-event-streams"><a href="#Treat-logs-as-event-streams" class="headerlink" title="Treat logs as event streams"></a>Treat logs as event streams</h3><h2 id="XII-Admin-processes"><a href="#XII-Admin-processes" class="headerlink" title="XII. Admin processes"></a><a href="https://12factor.net/admin-processes" target="_blank" rel="noopener">XII. Admin processes</a></h2><h3 id="Run-admin-management-tasks-as-one-off-processes"><a href="#Run-admin-management-tasks-as-one-off-processes" class="headerlink" title="Run admin/management tasks as one-off processes"></a>Run admin/management tasks as one-off processes</h3></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="container" scheme="https://anyisalin.github.io/tags/container/"/>
    
      <category term="cloudnative" scheme="https://anyisalin.github.io/tags/cloudnative/"/>
    
      <category term="microservice" scheme="https://anyisalin.github.io/tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Reverse Proxy Dynamic PDF URL and Online Preview</title>
    <link href="https://anyisalin.github.io/2018/08/21/nginx-reverse-proxy-pdf/"/>
    <id>https://anyisalin.github.io/2018/08/21/nginx-reverse-proxy-pdf/</id>
    <published>2018-08-21T05:10:43.000Z</published>
    <updated>2018-08-21T05:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ /wlwxb/(?&lt;aid&gt;[0-9]+)/paper.pdf &#123;</span><br><span class="line">    resolver 114.114.114.114;</span><br><span class="line">    proxy_pass http://www.wlwxb.cn/CN/article/downloadArticleFile.do?attachType=PDF&amp;id=$aid;</span><br><span class="line">    proxy_hide_header Content-Type;</span><br><span class="line">    proxy_hide_header Content-Disposition;</span><br><span class="line">    add_header Content-Type application/pdf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;location ~ /wlwxb/(?&amp;lt;aid&amp;gt;[0-9]+)/paper.pdf
        
      
    
    </summary>
    
    
      <category term="ops" scheme="https://anyisalin.github.io/tags/ops/"/>
    
      <category term="nginx" scheme="https://anyisalin.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Django Aliyun OSS Plugin Example</title>
    <link href="https://anyisalin.github.io/2018/08/15/django-aliyun-oss-plugin/"/>
    <id>https://anyisalin.github.io/2018/08/15/django-aliyun-oss-plugin/</id>
    <published>2018-08-15T05:59:59.000Z</published>
    <updated>2018-08-15T06:05:33.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># project.storage.py</span></span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.core.files.storage <span class="keyword">import</span> Storage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AliyunObjectStorage</span><span class="params">(Storage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.access_key_id = settings.ALIYUN_OSS_KEY_ID</span><br><span class="line">        self.access_key_secret = settings.ALIYUN_OSS_KEY_SECRET</span><br><span class="line">        self.bucket_name = settings.ALIYUN_OSS_BUCKET_NAME</span><br><span class="line">        self.endpoint = settings.ALIYUN_OSS_ENDPOINT</span><br><span class="line">        self.access_url = settings.ALIYUN_OSS_ACCESS_URL</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bucket</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> oss2.Bucket(oss2.Auth(self.access_key_id, self.access_key_secret), self.endpoint, self.bucket_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_open</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.bucket.get_object(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_save</span><span class="params">(self, name, content)</span>:</span></span><br><span class="line">        self.bucket.put_object(name, content)</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.bucket.delete_object(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exists</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.bucket.object_exists(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">listdir</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        dirs, files = [], []</span><br><span class="line">        objects = self.bucket.list_objects(path).object_list</span><br><span class="line">        <span class="keyword">for</span> object <span class="keyword">in</span> objects:</span><br><span class="line">            files.append(object.key.split(path)[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> dirs, files</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.bucket.get_object_meta(name).content_length</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">url</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;/&#123;&#125;'</span>.format(self.access_url, name)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#
        
      
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
      <category term="web" scheme="https://anyisalin.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>极验 Django Example</title>
    <link href="https://anyisalin.github.io/2018/08/11/geetest-with-django/"/>
    <id>https://anyisalin.github.io/2018/08/11/geetest-with-django/</id>
    <published>2018-08-11T07:43:48.000Z</published>
    <updated>2018-08-11T07:54:26.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> user <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'register/'</span>, views.RegisterView.as_view(), name=<span class="string">'register'</span>),</span><br><span class="line">    path(<span class="string">'login/'</span>, views.LoginView.as_view(), name=<span class="string">'login'</span>),</span><br><span class="line">    path(<span class="string">'logout/'</span>, views.LogoutView.as_view(), name=<span class="string">'logout'</span>),</span><br><span class="line">    path(<span class="string">'pc-gt/'</span>, views.GtValidateView.as_view(), name=<span class="string">'gt-validate'</span>),</span><br><span class="line">    path(<span class="string">r'active/&lt;uidb64&gt;/&lt;token&gt;/'</span>, views.ActiveView.as_view(), name=<span class="string">'active'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> messages</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse_lazy</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth <span class="keyword">import</span> login, logout</span><br><span class="line"><span class="keyword">from</span> django.utils.http <span class="keyword">import</span> urlsafe_base64_decode</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.tokens <span class="keyword">import</span> default_token_generator</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect, HttpResponseBadRequest</span><br><span class="line"><span class="keyword">from</span> django.views.generic <span class="keyword">import</span> FormView, View, TemplateView, CreateView</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> geetest <span class="keyword">import</span> GeetestLib <span class="comment"># https://github.com/GeeTeam/gt-python-sdk</span></span><br><span class="line"><span class="keyword">from</span> user.forms <span class="keyword">import</span> UserRegisterForm, UserLoginForm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeeTestMixin</span><span class="params">(object)</span>:</span></span><br><span class="line">    gid = settings.GEETEST_ID <span class="comment"># 极验ID</span></span><br><span class="line">    gkey = settings.GEETEST_KEY <span class="comment"># 极验 Key</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_request</span><span class="params">(self, request)</span>:</span> <span class="comment"># 检查验证是否通过</span></span><br><span class="line">        gt = GeetestLib(self.gid, self.gkey)</span><br><span class="line">        challenge = request.POST.get(gt.FN_CHALLENGE, <span class="string">''</span>)</span><br><span class="line">        validate = request.POST.get(gt.FN_VALIDATE, <span class="string">''</span>)</span><br><span class="line">        seccode = request.POST.get(gt.FN_SECCODE, <span class="string">''</span>)</span><br><span class="line">        status = request.session[gt.GT_STATUS_SESSION_KEY]</span><br><span class="line">        user_id = request.session[<span class="string">"user_id"</span>]</span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            <span class="keyword">return</span> gt.success_validate(challenge, validate, seccode, user_id)</span><br><span class="line">        <span class="keyword">return</span> gt.failback_validate(challenge, validate, seccode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterView</span><span class="params">(CreateView, GeeTestMixin)</span>:</span></span><br><span class="line">    template_name = <span class="string">'login_and_register.html'</span></span><br><span class="line">    form_class = UserRegisterForm</span><br><span class="line">    success_url = reverse_lazy(<span class="string">'user:login'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_context_data</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        context = super().get_context_data(**kwargs)</span><br><span class="line">        context.update(&#123;</span><br><span class="line">            <span class="string">'form_title'</span>: <span class="string">'注册'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> context</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">form_valid</span><span class="params">(self, form)</span>:</span></span><br><span class="line">        super().form_valid(form)</span><br><span class="line">        messages.add_message(self.request, messages.INFO, <span class="string">'激活邮件已发出，请检查您的邮箱'</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(self.get_success_url())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.check_request(request):</span><br><span class="line">            messages.add_message(request, messages.ERROR, <span class="string">'验证失败'</span>)</span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(reverse_lazy(<span class="string">'user:register'</span>))</span><br><span class="line">        <span class="keyword">return</span> super().post(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GtValidateView</span><span class="params">(View, GeeTestMixin)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        user_id = <span class="string">'test'</span></span><br><span class="line">        gt = GeetestLib(self.gid, self.gkey)</span><br><span class="line">        status = gt.pre_process(user_id)</span><br><span class="line">        request.session[gt.GT_STATUS_SESSION_KEY] = status</span><br><span class="line">        request.session[<span class="string">"user_id"</span>] = user_id</span><br><span class="line">        response_str = gt.get_response_str()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(response_str)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">"&#123;% url 'user:gt-validate' %&#125;"</span>,</span><br><span class="line">    type: <span class="string">"get"</span>,</span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//请检测data的数据结构， 保证data.gt, data.challenge, data.success有值</span></span><br><span class="line">        initGeetest(&#123;</span><br><span class="line">                <span class="comment">// 以下配置参数来自服务端 SDK</span></span><br><span class="line">                gt: data.gt,</span><br><span class="line">                challenge: data.challenge,</span><br><span class="line">                offline: !data.success,</span><br><span class="line">                new_captcha: <span class="literal">true</span>,</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">captchaObj</span>) </span>&#123;</span><br><span class="line">                captchaObj.appendTo(<span class="string">'#captchaBox'</span>)</span><br><span class="line"></span><br><span class="line">                captchaObj.onReady(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                &#125;).onSuccess(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">'button[type=submit]'</span>).removeAttr(<span class="string">'disabled'</span>)</span><br><span class="line">                &#125;).onError(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; user &lt;span
        
      
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="web" scheme="https://anyisalin.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>openvpn 中转 EasyConnect</title>
    <link href="https://anyisalin.github.io/2018/04/12/openvpn-with-easyconnect/"/>
    <id>https://anyisalin.github.io/2018/04/12/openvpn-with-easyconnect/</id>
    <published>2018-04-12T05:59:11.000Z</published>
    <updated>2019-01-07T03:35:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>国内大部分高校都使用 <code>easyconnect</code> 这种傻逼的软件作为 <code>vpn</code> 解决方案，最近需要频繁登入某高校 VPN(easyconnect)，由于手上只有一个账号，所以遇到了以下几个问题</p><ul><li>同一账号最多只能在一个客户端登录(多人使用会被挤下线)</li><li>除了 Mac 和 Windows，Linux 下基本没法用</li><li>连接过程过于繁琐</li></ul><p>同事给我提了一个方案，通过一台主机中转 <code>EasyConnect</code> 连接，来解决上面的这些问题</p><p>大致拓扑图如下</p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/blog/vpn-architecture.png" alt="VPN Architecture"></p><a id="more"></a><p>说干就干，我先尝试了 <code>Ubuntu</code> 和 <code>CentOS</code> 作为 <code>EasyConnect</code> 的客户端，各种失败，因为浏览器版本太新不支持 <code>Java</code>，<code>EasyConnect</code> 给出的文档是要求 <code>Opera 10.10</code> 的版本</p><p>。。。。天哪，这是 2018 年了，哪里去找 10.10 的版本，最后我在 <code>rpmfind</code> 上找到一个 10.12 的 Opera，装上了 <code>JRE</code> 的插件，还是不能连接 <code>EasyConnect</code>，我就放弃 Linux 转用 Windows 作为客户端了</p><p>Windows 上 <code>EasyConnect</code> 几分钟就搞定了，连上学校的 <code>vpn</code> 后，开始安装 <code>openvpn Server</code>，教程可以看 <a href="https://community.openvpn.net/openvpn/wiki/Easy_Windows_Guide" target="_blank" rel="noopener">Easy_Windows_Guide</a> 最后直接在 EasyConnect 的网络设备里面 <code>sharing traffic</code> 给 <code>openvpn</code> 的 <code>tun</code> 设备即可</p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/blog/sharing-network.png" alt="Sharing Network"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国内大部分高校都使用 &lt;code&gt;easyconnect&lt;/code&gt; 这种傻逼的软件作为 &lt;code&gt;vpn&lt;/code&gt; 解决方案，最近需要频繁登入某高校 VPN(easyconnect)，由于手上只有一个账号，所以遇到了以下几个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一账号最多只能在一个客户端登录(多人使用会被挤下线)&lt;/li&gt;
&lt;li&gt;除了 Mac 和 Windows，Linux 下基本没法用&lt;/li&gt;
&lt;li&gt;连接过程过于繁琐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同事给我提了一个方案，通过一台主机中转 &lt;code&gt;EasyConnect&lt;/code&gt; 连接，来解决上面的这些问题&lt;/p&gt;
&lt;p&gt;大致拓扑图如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://anyisalin1-1251720225.file.myqcloud.com/blog/vpn-architecture.png&quot; alt=&quot;VPN Architecture&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="network" scheme="https://anyisalin.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>数据结构 - 栈</title>
    <link href="https://anyisalin.github.io/2017/11/28/data-structure-stack/"/>
    <id>https://anyisalin.github.io/2017/11/28/data-structure-stack/</id>
    <published>2017-11-28T07:56:29.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>栈是一种 LIFO(Last In First Out) 的数据结构，栈插入和删除都在 栈顶 操作</p><a id="more"></a><p>Python 中内置的数据结构 List 就可以实现栈的后进先出，只需要对其进行简单的封装</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._stack = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self._stack.append(item)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty:</span><br><span class="line">            <span class="keyword">return</span> self._stack.pop()</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'stack is empty'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_empty:</span><br><span class="line">            <span class="keyword">return</span> self._stack[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'stack is empty'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._stack.clear()</span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._stack)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._stack) == <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><p><strong>二进制转换</strong></p><p>通过 “除二取余法” 将十进制转换为二进制，栈 这种数据结构再适合不过了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">d2bin</span><span class="params">(number)</span>:</span></span><br><span class="line">  s = Stack()</span><br><span class="line">  <span class="keyword">while</span> number &gt; <span class="number">0</span>:</span><br><span class="line">    s.push(number % <span class="number">2</span>)</span><br><span class="line">    number = number // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  bin_string = str()</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> s.is_empty:</span><br><span class="line">    bin_string += str(s.pop())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bin_string</span><br></pre></td></tr></table></figure><p>这样写只是为了距离，Python 内置数据结构和语法比较强大，完全没有必要这样写</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;栈是一种 LIFO(Last In First Out) 的数据结构，栈插入和删除都在 栈顶 操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="data-structure" scheme="https://anyisalin.github.io/tags/data-structure/"/>
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>刺客信条·起源 玩后感</title>
    <link href="https://anyisalin.github.io/2017/11/22/aco-overview/"/>
    <id>https://anyisalin.github.io/2017/11/22/aco-overview/</id>
    <published>2017-11-22T14:00:02.000Z</published>
    <updated>2018-08-15T12:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>这几天把起源玩了一遍，虽然没有刷满全部成就，但是也前前后后玩了 30 多个小时，浅谈一下我对起源的看法。</p><a id="more"></a><h2 id="画面"><a href="#画面" class="headerlink" title="画面"></a>画面</h2><p>笔者是全程极高画质，感觉画面水平对比与前作并没有很大进步，但是整体细节打磨的非常好，无论是沙漠中的金字塔，还是城市里的建筑，仿佛身临其境一般。</p><p>笔者是 R7 1700 + 16G 3000 DDR4 + GTX 1080 的配置，大部分场景只有 60 多帧，少部分场景还会掉到 50 帧左右，通过游戏自带的性能测试，分数也不是特别高，这个配置虽不是很强，但也凑和，却只能跑 60 多帧，优化做的确有些差</p><h2 id="战斗系统"><a href="#战斗系统" class="headerlink" title="战斗系统"></a>战斗系统</h2><p>起源更像一个 RPG 游戏，加入了等级机制，感觉挺不错，玩法也更加多样化，加入了盾牌，弓箭，各类武器，以至于可以站地 1v5，也可以偷偷用袖箭刺杀敌人。</p><p>鹰眼直接改成可以共享🦅的视角了，比前代的鹰眼更有感觉，还可以通过🦅找到目标或者纠缠敌人，挺有意思。</p><h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>笔者比较喜欢历史，对刺客信条一直很喜欢，刺客信条是一个平行宇宙，将刺客组织与圣殿骑士贯穿整个历史，从人类起源到古时代再到中世纪、文艺复兴、资产阶级革命、近现代，可以说人类历史进程，都是他们主导的，所以主角只够目睹甚至于主导整个历史事件，书里面的内容自己在游戏里面也经历过，有一种奇妙的感觉。</p><p>起源的主线剧情是在公元前 50 年到 44 年期间，从克里奥帕特拉流放 到 凯撒遇刺，主角经历丧子之痛后和媳妇一起踏上复仇之路，就不剧透了，总之剧情还是挺精彩的，无数次在书中看到凯撒大帝的名字，没想到最后是我刺杀的他(2333333)</p><h2 id="截图欣赏"><a href="#截图欣赏" class="headerlink" title="截图欣赏"></a>截图欣赏</h2><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/game/aco-caesar.jpg" alt></p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/game/aco-bayke_and_aya.jpg" alt></p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/game/aco-overview.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天把起源玩了一遍，虽然没有刷满全部成就，但是也前前后后玩了 30 多个小时，浅谈一下我对起源的看法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="https://anyisalin.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Container Overview</title>
    <link href="https://anyisalin.github.io/2017/10/27/container-overview/"/>
    <id>https://anyisalin.github.io/2017/10/27/container-overview/</id>
    <published>2017-10-27T02:45:53.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结了一些容器的知识，回答别人的问题</p><a id="more"></a><h2 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h2><p>实际上，容器技术流行之后最受益的是开发者，因为开发者可以借助容器技术快速的部署好开发测试环境，也可以将自己的应用打包成一个镜像发放出去，用户可以直接拥有和开发者相同的环境，不需要繁琐的部署</p><h2 id="CI-CD-持续集成、持续部署"><a href="#CI-CD-持续集成、持续部署" class="headerlink" title="CI/CD(持续集成、持续部署)"></a>CI/CD(持续集成、持续部署)</h2><p>容器非常适合敏捷开发模式，开发者将代码通过 svn/git 提交到远程仓库后，通过 jenkins/gitlab-ci 等持续集成工具直接构建包含最新代码的镜像，运行测试，测试成功后自动将新版本的代码的镜像滚动更新到线上环境，完全自动化，解放运维</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>将大型应用解耦成若干个服务模块，各服务模块松耦合，独立部署，各服务模块通过 HTTP API/RPC 通信，这种架构使得每个服务皆可以实现横向扩展，故障转移，滚动更新等高级特性，不过对于微服务来说，容器技术只是辅助，最关键的还是服务的设计</p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h2 id="别人如何使用我的容器？"><a href="#别人如何使用我的容器？" class="headerlink" title="别人如何使用我的容器？"></a>别人如何使用我的容器？</h2><p>容器不是虚拟机，一般不会直接进入内部操作，打包一个镜像后，用户只需要最简单的 <code>docker run</code>，需要的时候提供一些环境变量用来初始化应用即可，并不需要进入内部！</p><p>就比如 mysql 官方的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run -d -e MYSQL_ROOT_PASSWORD=passwd mysql # 这样就可以了，直接通过外部去访问 mysql，不需要进入容器内部</span><br></pre></td></tr></table></figure><p>相比与在 centos 上安装 mysql 需要做的步骤…</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> yum install mysql mysql-server -y</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> mysql</span><br><span class="line"></span><br><span class="line">GRANT ALL ....</span><br></pre></td></tr></table></figure><p>当然，这只是最简单的一个数据库安装，如果你的应用 前端用的是 nginx，后端是 mysql，还要部署 php 环境呢？假设你的应用叫做 <code>summer-blog</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> docker pull summer-blog</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run -tid -p 80:80 summer-blog</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl localhost:80</span><br></pre></td></tr></table></figure><p>将复杂的环境直接打包成一个镜像，用户直接通过 <code>docker run</code> 就可以得到和你一样的环境，直接运行你的应用，再也不需要 *** install… 操作了</p><p>不过一般不推荐这么做，因为将那么多组件打包在一个镜像里面，无法追踪其状态</p><p>推荐分别将 nginx, mysql, php 环境独立为一个容器，再通过一些编排工具 例如 <code>docker-compose</code>  将每个容器连接起来</p><p>就可以使用一些很高级的功能，比如 <code>health check</code>，检测到 nginx 异常退出了，自动将 nginx 容器重启，提高整个架构的可用性</p><h2 id="RUN、CMD、ENTRYPOINT-的区别"><a href="#RUN、CMD、ENTRYPOINT-的区别" class="headerlink" title="RUN、CMD、ENTRYPOINT 的区别"></a>RUN、CMD、ENTRYPOINT 的区别</h2><p>Dockerfile 中有三个用来执行命令的方式，分别是 RUN、CMD、ENTRYPOINT</p><p>它们分别有什么区别呢？</p><ul><li><p>RUN 是用来指定构建镜像(build image) 过程中执行的命令</p></li><li><p>CMD 是指定容器运行时(docker run) 默认命令和参数，可以被 <code>docker run *** command</code> 的命令所覆盖</p></li><li><p>ENTRYPOINT 也是容器运行时执行的命令，但是可以接受 <code>docker run *** args</code>或者 CMD 提供的参数，一般用于容器配置初始化</p></li></ul><p>主要是 CMD 和 ENTRYPOINT 之间的差异，一个 Dockerfile 中，如果 CMD 和 ENTRYPOINT 同时存在，那么 CMD 的会传给 ENTRYPOINT，我们来看一个例子</p><p><strong>通过 CMD 的方式输出字符串</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat Dockerfile</span><br><span class="line"></span><br><span class="line">from centos:7</span><br><span class="line"></span><br><span class="line">CMD ["echo", "hello world"]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker build . -t test</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run test</span><br><span class="line"></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>如果我们想自定义输出的字符串的，可以修改 Dockerfile 重新 build 镜像，或者手动传递执行的命令，像下面这样</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> docker run test echo hello docker</span><br><span class="line"></span><br><span class="line">hello docker</span><br></pre></td></tr></table></figure><p>因为 CMD 是容器启动时候的默认命令，是会被 docker run image 后面的内容给覆盖的</p><p><strong>通过 ENTRYPOINT 输出字符串</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat Dockerfile</span><br><span class="line"></span><br><span class="line">from centos:7</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["echo", "hello"]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker build . -t test</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run test</span><br><span class="line"></span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run test world</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run test echo hello world</span><br><span class="line"></span><br><span class="line">hello echo hello world</span><br></pre></td></tr></table></figure><p>可以看出，使用 ENTRYPOINT 之后，docker run image 后面的内容就作为位置参数传递进去了，并没有覆盖原有的命令</p><p><strong>CMD 和 ENTRYPOINT 同时存在</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cat Dockerfile</span><br><span class="line"></span><br><span class="line">from centos:7</span><br><span class="line"></span><br><span class="line">ENTRYPOINT ["echo"]</span><br><span class="line"></span><br><span class="line">CMD ["hello world"]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker build -t test</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> docker run test</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>会看到 CMD 也作为参数传递到 ENTRYPOINT 后面了，因为 Dockerfile 中的 CMD 其实和命令行 docker run image 后面跟的内容是等价的，但是命令行的优先级更高</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> docker run test hello python</span><br><span class="line"></span><br><span class="line">hello python # 覆盖了 CMD</span><br></pre></td></tr></table></figure><p><strong>实际使用</strong></p><p>现在比较流行的做法是 ENTRYPOINT 和 CMD 混用，ENTRYPOINT 指定一个初始化容器的脚本，CMD 指定启动前台应用的命令，我们来看看 redis 官方镜像是怎么做的</p><p><a href="https://github.com/docker-library/mysql/blob/master/5.7/Dockerfile" target="_blank" rel="noopener">MySQL 5.7 Dockerfile</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 省略前面</span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">RUN ln -s usr/local/bin/docker-entrypoint.sh /entrypoint.sh # backwards compat</span><br><span class="line">ENTRYPOINT ["docker-entrypoint.sh"]</span><br><span class="line"></span><br><span class="line">EXPOSE 3306</span><br><span class="line">CMD ["mysqld"]</span><br></pre></td></tr></table></figure><p><a href="https://github.com/docker-library/mysql/blob/master/5.7/docker-entrypoint.sh" target="_blank" rel="noopener">docker-entrypoint.sh</a></p><p>MySQL 的 docker-entrypoint 大概的意思就是，可以手动传递一些选项，或者通过 -e 设置类似 <code>MYSQL_ROOT_PASSWORD</code> 这样的环境变量来初始化 MySQL</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结了一些容器的知识，回答别人的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="devops" scheme="https://anyisalin.github.io/tags/devops/"/>
    
      <category term="container" scheme="https://anyisalin.github.io/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>Hbase Thrift API Test</title>
    <link href="https://anyisalin.github.io/2017/10/20/hbase-thrift-api/"/>
    <id>https://anyisalin.github.io/2017/10/20/hbase-thrift-api/</id>
    <published>2017-10-20T08:13:31.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Install-Thrift"><a href="#Install-Thrift" class="headerlink" title="Install Thrift"></a>Install Thrift</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> yum groupinstall 'Development Tools' # install package group on centos</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git clone https://github.com/apache/thrift.git</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd thrift</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> ./configure --with-lua=no</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Build-Hbase-Client-Package"><a href="#Build-Hbase-Client-Package" class="headerlink" title="Build Hbase Client Package"></a>Build Hbase Client Package</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> thrift --gen py hbase-src/hbase-1.3.1/hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift/Hbase.thrift</span><br></pre></td></tr></table></figure><h2 id="Start-Hbase-Thrift-API"><a href="#Start-Hbase-Thrift-API" class="headerlink" title="Start Hbase Thrift API"></a>Start Hbase Thrift API</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> bin/hbase thrift start</span><br></pre></td></tr></table></figure><h2 id="Test-Hbase-Thrift-API"><a href="#Test-Hbase-Thrift-API" class="headerlink" title="Test Hbase Thrift API"></a>Test Hbase Thrift API</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> thrift.transport.TSocket <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport.TTransport <span class="keyword">import</span> TBufferedTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> hbase <span class="keyword">import</span> Hbase</span><br><span class="line"><span class="keyword">from</span> hbase.ttypes <span class="keyword">import</span> ColumnDescriptor</span><br><span class="line"></span><br><span class="line">transport = TBufferedTransport(TSocket(<span class="string">'192.168.20.209'</span>, <span class="string">'9090'</span>))</span><br><span class="line">transport.open()</span><br><span class="line">protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line"></span><br><span class="line">client = Hbase.Client(protocol)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_table</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'tables: &#123;&#125;'</span>.format(client.getTableNames()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table</span><span class="params">(table_name, family_name)</span>:</span></span><br><span class="line">    c = ColumnDescriptor(family_name)</span><br><span class="line">    client.createTable(table_name, [c])</span><br><span class="line">    print(<span class="string">'create table &#123;&#125;'</span>.format(table_name.decode()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">disable_table</span><span class="params">(table_name)</span>:</span></span><br><span class="line">    client.disableTable(table_name)</span><br><span class="line">    print(<span class="string">'disaable table &#123;&#125;'</span>.format(table_name.decode()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_table</span><span class="params">(table_name)</span>:</span></span><br><span class="line">    client.deleteTable(table_name)</span><br><span class="line">    print(<span class="string">'delete table &#123;&#125;'</span>.format(table_name.decode()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># get all table</span></span><br><span class="line">    list_table()</span><br><span class="line">    <span class="comment"># create a tables</span></span><br><span class="line">    create_table(<span class="string">b'test_table'</span>, <span class="string">b'test_family'</span>)</span><br><span class="line">    list_table()</span><br><span class="line">    <span class="comment"># disable table</span></span><br><span class="line">    disable_table(<span class="string">b'test_table'</span>)</span><br><span class="line">    <span class="comment"># delete table</span></span><br><span class="line">    delete_table(<span class="string">b'test_table'</span>)</span><br><span class="line">    list_table()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Install-Thrift&quot;&gt;&lt;a href=&quot;#Install-Thrift&quot; class=&quot;headerlink&quot; title=&quot;Install Thrift&quot;&gt;&lt;/a&gt;Install Thrift&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; yum groupinstall &#39;Development Tools&#39; # install package group on centos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git clone https://github.com/apache/thrift.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; cd thrift&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; ./configure --with-lua=no&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="rpc" scheme="https://anyisalin.github.io/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>Python File Buffer</title>
    <link href="https://anyisalin.github.io/2017/10/13/python-file-buffer/"/>
    <id>https://anyisalin.github.io/2017/10/13/python-file-buffer/</id>
    <published>2017-10-13T03:08:00.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 内置的 <code>open</code> 函数有一个 <code>buffering</code> 参数，用来设置打开文件的缓冲策略(buffer policy)</p><a id="more"></a><h2 id="什么是-Buffer"><a href="#什么是-Buffer" class="headerlink" title="什么是 Buffer ?"></a>什么是 Buffer ?</h2><p>可以将 buffer 理解为 内存数据写入硬盘时 的中间层，用于减少硬盘的 写入次数</p><p>例如:</p><p>​    有一个 500 byte 的文件，一 byte 一 byte 的写入硬盘，要写 500 次，如果 50  byte 写一次，只需要写十次，无论是对于硬盘(减少写入次数) 还是系统(减少写入时的系统调用) 来说都是极好的事情</p><h2 id="Python-写文件时候如何使用-buffer"><a href="#Python-写文件时候如何使用-buffer" class="headerlink" title="Python 写文件时候如何使用 buffer ?"></a>Python 写文件时候如何使用 buffer ?</h2><p>Python 内置的 open 函数就带有 buffering 参数，用于设置打开文件的 buffer policy</p><p>open 函数对文件 buffer 的设置是对系统调用的封装，并不是 Python 本身实现的，而是系统 API 中早已提供的</p><p>对于不同参数(-1, 0, 1, &gt; 1)，不同类型的文件 (Binary/Text) 还有不同的策略</p><table><thead><tr><th>File Type</th><th>buffering=-1</th><th>buffering=0</th><th>buffering=1</th><th>buffering&gt;1</th></tr></thead><tbody><tr><td>Binary</td><td>io.DEFAULT_BUFFER_SIZE</td><td>unbuffered</td><td>1</td><td>buffering</td></tr><tr><td>Text</td><td>io.DEFAULT_BUFFER_SIZE</td><td>不允许</td><td>line buffering</td><td>DEFAULT_BUFFER_SIZE</td></tr></tbody></table><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>io.DEFAULT_BUFFER_SIZE</td><td>系统默认的 buffer 大小</td></tr><tr><td>unbunffered</td><td>不使用 buffer</td></tr><tr><td>line buffering</td><td>行缓冲</td></tr><tr><td>buffering</td><td>指定缓冲区大小</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>不理解 buffer 之前认为 open 函数打开的文件，写入了数据，如果不 close，或者不提前用 flush 是不会刷入硬盘的，实际上这和 buffer policy 有关，如果设置了 line buffering 的策略，则为每写一行数据就会刷入硬盘，如果指定 buffer size，写入大于 buffer size 数据才会刷入硬盘</p><p><strong>line buffering</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: f = open(<span class="string">'line_buffer.txt'</span>, <span class="string">'w'</span>, buffering=<span class="number">1</span>) <span class="comment"># line buffering 策略写文件</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: cat line_buffer.txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: f.write(<span class="string">'this is line\n'</span>) <span class="comment"># 写入一行，没有 flush/close，实际上也刷入硬盘了</span></span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">13</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: cat line_buffer.txt <span class="comment"># 因为是 ipython，所以可以直接调用 bash 内建命令</span></span><br><span class="line">this <span class="keyword">is</span> line</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: f.write(<span class="string">'this not a line'</span>) <span class="comment"># 写入数据，但是没有加换行符，没有刷入硬盘</span></span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">15</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: cat line_buffer.txt</span><br><span class="line">this <span class="keyword">is</span> line</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: f.write(<span class="string">'\n'</span>) <span class="comment"># 写入换行符，刷入了硬盘</span></span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: cat line_buffer.txt</span><br><span class="line">this <span class="keyword">is</span> line</span><br><span class="line">this <span class="keyword">not</span> a line</span><br></pre></td></tr></table></figure><p><strong>unbunffered</strong></p><p>只有二进制文件才能禁用 buffer</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: f = open(<span class="string">'binary_unbuffered.txt'</span>, <span class="string">'wb'</span>, buffering=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: cat binary_unbuffered.txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: f.write(<span class="string">b'hello'</span>) <span class="comment"># 写入任意大小的数据，都直接刷入硬盘</span></span><br><span class="line">Out[<span class="number">13</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: cat binary_unbuffered.txt</span><br><span class="line">hello</span><br><span class="line">In [<span class="number">15</span>]: f.write(<span class="string">b' world'</span>)</span><br><span class="line">Out[<span class="number">15</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: cat binary_unbuffered.txt</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p><strong>指定 buffer size</strong></p><p>也只有二进制文件才能指定 buffer size</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">18</span>]: f = open(<span class="string">'binary_buffer_size.txt'</span>, <span class="string">'wb'</span>, buffering=<span class="number">10</span>) <span class="comment">#设置 buffer size 为 10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]: cat binary_buffer_size.txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: f.write(<span class="string">b'hello'</span>) <span class="comment"># 写入 5 byte 数据，由于 buffer 还没有满，所以不会刷入缓冲区</span></span><br><span class="line">Out[<span class="number">21</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: cat binary_buffer_size.txt</span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: f.write(<span class="string">b'helloworld'</span>)</span><br><span class="line">Out[<span class="number">23</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">24</span>]: cat binary_buffer_size.txt <span class="comment"># buffer 满了，刷入缓冲区</span></span><br><span class="line">hello</span><br><span class="line">In [<span class="number">25</span>]: f.write(<span class="string">b'helloworld111'</span>)</span><br><span class="line">Out[<span class="number">25</span>]: <span class="number">13</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: cat binary_buffer_size.txt</span><br><span class="line">hellohelloworldhelloworld111</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 内置的 &lt;code&gt;open&lt;/code&gt; 函数有一个 &lt;code&gt;buffering&lt;/code&gt; 参数，用来设置打开文件的缓冲策略(buffer policy)&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 源码解析 - ansible 命令的调用</title>
    <link href="https://anyisalin.github.io/2017/06/16/ansible-code-reading-1/"/>
    <id>https://anyisalin.github.io/2017/06/16/ansible-code-reading-1/</id>
    <published>2017-06-16T07:01:44.000Z</published>
    <updated>2018-08-15T12:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>这一系列文章将通过一些常见的 Ansible 使用例子来解析 Ansible 内部代码实现</p><p>Ansible 有很多命令，ansible、ansible-playbook、ansible-doc、ansible-galaxy、ansible-console 等，笔者在看 Ansible 入口代码的时候发现 Ansible 对于不同命令的处理方式很特别</p><a id="more"></a><p>笔者的环境是 <a href="github.com/ansible/ansible">Github ansible/ansible</a> 仓库的 <code>stable-2.2</code> 分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git branch</span><br><span class="line"></span><br><span class="line">* (detached from origin/stable-2.2)</span><br><span class="line">  devel</span><br></pre></td></tr></table></figure><p>先来看看入口文件 <code>setup.py</code>，了解 <code>setuptools</code> 的朋友应该对这个参数不陌生，简单来说，就是这些文件将会被复制到系统 <code>PATH</code> 中，供用户调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scripts=[</span><br><span class="line">    <span class="string">'bin/ansible'</span>,</span><br><span class="line">    <span class="string">'bin/ansible-playbook'</span>,</span><br><span class="line">    <span class="string">'bin/ansible-pull'</span>,</span><br><span class="line">    <span class="string">'bin/ansible-doc'</span>,</span><br><span class="line">    <span class="string">'bin/ansible-galaxy'</span>,</span><br><span class="line">    <span class="string">'bin/ansible-console'</span>,</span><br><span class="line">    <span class="string">'bin/ansible-vault'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>到这里，没有什么问题，正常的写法应该是每一个命令对应某一个 <code>Cli</code> 类去处理，但是 Ansible 不是这样做的，可以看到所有的命令其实都是 ansible 命令的软链接，也就是说，无论我们调用 ansible-playbook、ansible-doc、ansible-galaxy 命令最终都是去执行 ansible 命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls bin -l</span><br><span class="line"></span><br><span class="line">total 8</span><br><span class="line">-rwxr-xr-x. 1 root root 4795 Jun 16 11:03 ansible</span><br><span class="line">lrwxrwxrwx. 1 root root    7 Jun 16 10:17 ansible-console -&gt; ansible</span><br><span class="line">lrwxrwxrwx. 1 root root    7 Jun 16 10:17 ansible-doc -&gt; ansible</span><br><span class="line">lrwxrwxrwx. 1 root root    7 Jun 16 10:17 ansible-galaxy -&gt; ansible</span><br><span class="line">lrwxrwxrwx. 1 root root    7 Jun 16 10:17 ansible-playbook -&gt; ansible</span><br><span class="line">lrwxrwxrwx. 1 root root    7 Jun 16 10:17 ansible-pull -&gt; ansible</span><br><span class="line">lrwxrwxrwx. 1 root root    7 Jun 16 10:17 ansible-vault -&gt; ansible</span><br></pre></td></tr></table></figure><p>那 Ansible 是如何区分不同命令调用的？</p><h2 id="ansible-命令解析"><a href="#ansible-命令解析" class="headerlink" title="ansible 命令解析"></a>ansible 命令解析</h2><p>代码路径 <a href="https://github.com/ansible/ansible/blob/devel/bin/ansible" target="_blank" rel="noopener">ansible/bin/ansible</a></p><p>下面是简化过的 ansible 命令入口代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">ignore from import</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    display = LastResort()</span><br><span class="line">    cli = <span class="keyword">None</span></span><br><span class="line">    me = os.path.basename(sys.argv[<span class="number">0</span>])</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    me 为调用的命令名称，如果调用 ansible-playbook 命令则为 ansible-playbook</span></span><br><span class="line"><span class="string">    ansible-doc 则为 ansible-doc ....</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        display = Display()</span><br><span class="line">        display.debug(<span class="string">"starting run"</span>)</span><br><span class="line"></span><br><span class="line">        sub = <span class="keyword">None</span></span><br><span class="line">        target = me.split(<span class="string">'-'</span>)</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        如果调用的命令是 ansible-playbook，这里的 target 为 ['ansible', 'playbook']</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> target[<span class="number">-1</span>][<span class="number">0</span>].isdigit():</span><br><span class="line">            <span class="comment"># Remove any version or pthon version info as downstreams</span></span><br><span class="line">            <span class="comment"># sometimes add that</span></span><br><span class="line">            target = target[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(target) &gt; <span class="number">1</span>:</span><br><span class="line">            sub = target[<span class="number">1</span>]</span><br><span class="line">            myclass = <span class="string">"%sCLI"</span> % sub.capitalize()</span><br><span class="line">            <span class="string">""""如果调用的命令是 ansible-playbook，这里的 myclass 为 PlaybookCLI"""</span></span><br><span class="line">        <span class="keyword">elif</span> target[<span class="number">0</span>] == <span class="string">'ansible'</span>:</span><br><span class="line">            sub = <span class="string">'adhoc'</span></span><br><span class="line">            myclass = <span class="string">'AdHocCLI'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> AnsibleError(<span class="string">"Unknown Ansible alias: %s"</span> % me)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mycli = getattr(__import__(<span class="string">"ansible.cli.%s"</span> % sub, fromlist=[myclass]), myclass)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            这里通过 python 内建函数 __import__ 通过类名获取到对应的 CLI 类</span></span><br><span class="line"><span class="string">           </span></span><br><span class="line"><span class="string">           如果被调用的命令是 ansible-playbook 那么这里的 mycli</span></span><br><span class="line"><span class="string">           则为 ansible.cli.playbook.PlaybookCLI</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">        <span class="keyword">except</span> ImportError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># ImportError members have changed in py3</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">'msg'</span> <span class="keyword">in</span> dir(e):</span><br><span class="line">                msg = e.msg</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                msg = e.message</span><br><span class="line">            <span class="keyword">if</span> msg.endswith(<span class="string">' %s'</span> % sub):</span><br><span class="line">                <span class="keyword">raise</span> AnsibleError(<span class="string">"Ansible sub-program not implemented: %s"</span> % me)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            args = [to_text(a, errors=<span class="string">'surrogate_or_strict'</span>) <span class="keyword">for</span> a <span class="keyword">in</span> sys.argv]</span><br><span class="line">        <span class="keyword">except</span> UnicodeError:</span><br><span class="line">            display.error(<span class="string">'Command line args are not in utf-8, unable to continue.  Ansible currently only understands utf-8'</span>)</span><br><span class="line">            display.display(<span class="string">u"The full traceback was:\n\n%s"</span> % to_text(traceback.format_exc()))</span><br><span class="line">            exit_code = <span class="number">6</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cli = mycli(args)</span><br><span class="line">            cli.parse()</span><br><span class="line">            exit_code = cli.run()</span><br><span class="line">            <span class="string">"""实例化 --&gt; 解析命令行 --&gt; 调用 run 方法"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> AnsibleOptionsError <span class="keyword">as</span> e:</span><br><span class="line">        cli.parser.print_help()</span><br><span class="line">        display.error(to_text(e), wrap_text=<span class="keyword">False</span>)</span><br><span class="line">        exit_code = <span class="number">5</span></span><br><span class="line">    <span class="keyword">except</span> AnsibleParserError <span class="keyword">as</span> e:</span><br><span class="line">        display.error(to_text(e), wrap_text=<span class="keyword">False</span>)</span><br><span class="line">        exit_code = <span class="number">4</span></span><br><span class="line"><span class="comment"># TQM takes care of these, but leaving comment to reserve the exit codes</span></span><br><span class="line"><span class="comment">#    except AnsibleHostUnreachable as e:</span></span><br><span class="line"><span class="comment">#        display.error(str(e))</span></span><br><span class="line"><span class="comment">#        exit_code = 3</span></span><br><span class="line"><span class="comment">#    except AnsibleHostFailed as e:</span></span><br><span class="line"><span class="comment">#        display.error(str(e))</span></span><br><span class="line"><span class="comment">#        exit_code = 2</span></span><br><span class="line">    <span class="keyword">except</span> AnsibleError <span class="keyword">as</span> e:</span><br><span class="line">        display.error(to_text(e), wrap_text=<span class="keyword">False</span>)</span><br><span class="line">        exit_code = <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        display.error(<span class="string">"User interrupted execution"</span>)</span><br><span class="line">        exit_code = <span class="number">99</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        have_cli_options = cli <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> cli.options <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line">        display.error(<span class="string">"Unexpected Exception, this is probably a bug: %s"</span> % to_text(e), wrap_text=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> have_cli_options <span class="keyword">or</span> have_cli_options <span class="keyword">and</span> cli.options.verbosity &gt; <span class="number">2</span>:</span><br><span class="line">            log_only = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            display.display(<span class="string">"to see the full traceback, use -vvv"</span>)</span><br><span class="line">            log_only = <span class="keyword">True</span></span><br><span class="line">        display.display(<span class="string">u"the full traceback was:\n\n%s"</span> % to_text(traceback.format_exc()), log_only=log_only)</span><br><span class="line">        exit_code = <span class="number">250</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># Remove ansible tempdir</span></span><br><span class="line">        shutil.rmtree(C.DEFAULT_LOCAL_TMP, <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    sys.exit(exit_code)</span><br></pre></td></tr></table></figure><p>Ansible 通过调用命令的名称来动态的引入对应的类</p><p><code>__imoprt__</code> 是 Python 的内置函数，<code>import</code> 也是调用 <code>__import__</code> 实现的，下面是两种方式引用的对比</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> ansible.cli.playbook <span class="keyword">import</span> PlaybookCLI <span class="keyword">as</span> mycli</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mycli</span><br><span class="line">ansible.cli.playbook.PlaybookCLI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mycli = getattr(__import__(<span class="string">'ansible.cli.playbook'</span>, fromlist=[<span class="string">'PlaybookCLI'</span>]), <span class="string">'PlaybookCLI'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mycli</span><br><span class="line">ansible.cli.playbook.PlaybookCLI</span><br></pre></td></tr></table></figure><p><code>__import__</code> 可以以字符串的形式引入模块/类/方法，更适合动态引入</p><p>这样我们可以得知，如果调用 ansible 命令，会引入  <code>ansible.cli.adhoc.AdhocCLI</code> 类，而 调用 ansible-playbook 命令，会引入 <code>ansible.cli.playbook.PlaybookCLI</code> 类，然后实例化对象，将命令行参数传递给对象进行解析，再调用对象的 <code>run</code> 方法完成此次调用</p><h2 id="CLI-类"><a href="#CLI-类" class="headerlink" title="CLI 类"></a>CLI 类</h2><p>那么我们来看看具体  <code>CLI</code> 类的实现，从  <a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/cli/adhoc.py" target="_blank" rel="noopener">ansible/cli/adhoc.py</a>  这个文件中可以看出，所有 Ansible 的子命令类都是继承于 <code>ansible.cli.CLI</code> (<a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/cli/__init__.py" target="_blank" rel="noopener">ansible/cli/<strong>init</strong>.py</a>) 实现的</p><p><code>CLI</code> 是一个抽象类，具体看 <a href="http://www.cnblogs.com/Security-Darren/p/4094959.html" target="_blank" rel="noopener">Python装饰器、metaclass、abc模块学习笔记</a> 这篇文章</p><p><code>ansible.cli.CLI</code> 最核心的方法是下面这几个</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base_parser</span><span class="params">(usage=<span class="string">""</span>, output_opts=False, runas_opts=False, meta_opts=False, runtask_opts=False, vault_opts=False, module_opts=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                async_opts=False, connect_opts=False, subset_opts=False, check_opts=False, inventory_opts=False, epilog=None, fork_opts=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                runas_prompt_opts=False, desc=None)</span>:</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用了 abstractmethod 装饰器的方法，子类都必须实现这个方法，不然无法实例化对象</span></span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@abstractmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br></pre></td></tr></table></figure><p><code>base_parser</code> 定义一些基础分类的命令行选项，并返回 <code>SortedOptParser</code> 对象</p><p>子类通过传递参数来选择是否需要特定分类的命令行选项，再通过重写的 <code>parse</code> 方法中调用 <code>CLI.base_parser</code> 并添加额外选项，再解析传入的命令行参数，<code>AdhocCLI</code> 的实现如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">''' create an options parser for bin/ansible '''</span></span><br><span class="line"></span><br><span class="line">    self.parser = CLI.base_parser(</span><br><span class="line">        usage=<span class="string">'%prog &lt;host-pattern&gt; [options]'</span>,</span><br><span class="line">        runas_opts=<span class="keyword">True</span>,</span><br><span class="line">        inventory_opts=<span class="keyword">True</span>,</span><br><span class="line">        async_opts=<span class="keyword">True</span>,</span><br><span class="line">        output_opts=<span class="keyword">True</span>,</span><br><span class="line">        connect_opts=<span class="keyword">True</span>,</span><br><span class="line">        check_opts=<span class="keyword">True</span>,</span><br><span class="line">        runtask_opts=<span class="keyword">True</span>,</span><br><span class="line">        vault_opts=<span class="keyword">True</span>,</span><br><span class="line">        fork_opts=<span class="keyword">True</span>,</span><br><span class="line">        module_opts=<span class="keyword">True</span>,</span><br><span class="line">        desc=<span class="string">"Define and run a single task 'playbook' against a set of hosts"</span>,</span><br><span class="line">        epilog=<span class="string">"Some modules do not make sense in Ad-Hoc (include, meta, etc)"</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># options unique to ansible ad-hoc</span></span><br><span class="line">    self.parser.add_option(<span class="string">'-a'</span>, <span class="string">'--args'</span>, dest=<span class="string">'module_args'</span>,</span><br><span class="line">                           help=<span class="string">"module arguments"</span>, default=C.DEFAULT_MODULE_ARGS)</span><br><span class="line">    self.parser.add_option(<span class="string">'-m'</span>, <span class="string">'--module-name'</span>, dest=<span class="string">'module_name'</span>,</span><br><span class="line">                           help=<span class="string">"module name to execute (default=%s)"</span> % C.DEFAULT_MODULE_NAME,</span><br><span class="line">                           default=C.DEFAULT_MODULE_NAME)</span><br><span class="line"></span><br><span class="line">    super(AdHocCLI, self).parse()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(self.args) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> AnsibleOptionsError(<span class="string">"Missing target hosts"</span>)</span><br><span class="line">    <span class="keyword">elif</span> len(self.args) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> AnsibleOptionsError(<span class="string">"Extraneous options or arguments"</span>)</span><br><span class="line"></span><br><span class="line">    display.verbosity = self.options.verbosity</span><br><span class="line">    self.validate_conflicts(runas_opts=<span class="keyword">True</span>, vault_opts=<span class="keyword">True</span>, fork_opts=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p><code>AdhocCLI</code> 子类添加了两个新的选项 <code>-a</code>、<code>-m</code> 用来指定模块参数和模块名称，然后通过调用 <code>validate_conflicts</code> 来验证命令行参数合法性</p><p><code>run</code> 方法则是用来运行特定任务的，<code>AdhocCLI</code> 中用来创建单个 <code>play task</code> ，关于这里的代码，下篇文章会有介绍</p><p><a href="https://github.com/ansible/ansible/blob/devel/lib/ansible/cli/adhoc.py#L93" target="_blank" rel="noopener">ansible.cli.adhoc.AdhocCLI.run</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>画了个思维导图，不是很清晰，但是大致就是这样，点击图片可放大查看</p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/blog/ansible-reading/ansible-cli.png" alt="ansible-cli"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一系列文章将通过一些常见的 Ansible 使用例子来解析 Ansible 内部代码实现&lt;/p&gt;
&lt;p&gt;Ansible 有很多命令，ansible、ansible-playbook、ansible-doc、ansible-galaxy、ansible-console 等，笔者在看 Ansible 入口代码的时候发现 Ansible 对于不同命令的处理方式很特别&lt;/p&gt;
    
    </summary>
    
    
      <category term="devops" scheme="https://anyisalin.github.io/tags/devops/"/>
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="ansible" scheme="https://anyisalin.github.io/tags/ansible/"/>
    
  </entry>
  
  <entry>
    <title>iPhone7 初体验</title>
    <link href="https://anyisalin.github.io/2017/06/16/iPhone7-Preview/"/>
    <id>https://anyisalin.github.io/2017/06/16/iPhone7-Preview/</id>
    <published>2017-06-15T17:44:44.000Z</published>
    <updated>2018-08-15T12:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>垂涎 iPhone 7 已久，正好京东 618(并没有打折) 入了一部</p><a id="more"></a><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>外观方面比预想的更好，边框过渡更加圆润，因为买的是磨砂黑，背面也没有白带，一体感很强</p><p>3D Touch  已经离不开了，对于不能按压的 Home 键，一下就习惯了，因为 MacBook Pro 2015 款的触摸板也是不能按压的(Force Touch)</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>出厂系统是 10.3.1，到手立马升级到最新(10.3.2)，还是有一些问题，上划出控制中心时经常出现破音，设置中心出现过未响应的情况</p><p>总的来说，iOS 还是非常优秀的，配合着 iPhone 7 强悍的硬件配置，非常流畅</p><p>新版系统的 Widget 也很好用，特别是 PIN 这款剪切板管理工具 <a href="https://sspai.com/post/32404" target="_blank" rel="noopener">你对剪贴板的需求它都能满足：iOS 剪贴板增强工具 Pin</a></p><p>Shadowrocket 快捷开关非常方便，迅速开启/关闭/切换 代理</p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/blog/iPhone7-review/widget.jpg" alt="widget"></p><p>iOS 上使用 Google 服务实在太方便了，只需要科学上网即可，国内的各种 Android 系统则需要安装 GOAPPS，非常耗电</p><p>笔者之前已经有过 Apple 的相应设备，对于 iOS 系统还是非常熟悉的，这里就不多说了</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>软件生态圈绝对是 iOS 最大的优势，笔者喜欢折腾效率工具，来提高效(bi)率(ge)，非常喜欢 workflow、PIN 这类效率应用</p><p><a href="https://sspai.com/search/article?q=workflow" target="_blank" rel="noopener">Workflow 介绍</a></p><p>最常用的莫过于 万能扫码 这个模板了，扫微信二维码 跳转微信，支付宝 跳转 支付宝，微博 跳转 微博，豆瓣 跳转 豆瓣，再也不用进入每个应用做多余的操作了</p><p><a href="https://sspai.com/post/37132" target="_blank" rel="noopener">从头教你用制作 Workflow 万能扫码 | Matrix 精选</a></p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/blog/iPhone7-review/workflow-3dtouch.png" alt="workflow-3dtouch"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>iPhone 7 没有辜负笔者的期望，附上主屏截图一份</p><p><img src="https://anyisalin1-1251720225.file.myqcloud.com/blog/iPhone7-review/home.png" alt="home"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;垂涎 iPhone 7 已久，正好京东 618(并没有打折) 入了一部&lt;/p&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="https://anyisalin.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>代码解析 - envoy</title>
    <link href="https://anyisalin.github.io/2017/05/09/python-envoy-code-reading/"/>
    <id>https://anyisalin.github.io/2017/05/09/python-envoy-code-reading/</id>
    <published>2017-05-09T03:22:40.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>envoy</code> 是对 Python 标准库中 <code>subprocess</code> 模块的封装， 虽然功能对比原生 <code>subprocess</code> 来说少了很多，但是更易于使用，<a href="https://github.com/kennethreitz/envoy" target="_blank" rel="noopener">Github 项目地址</a></p><a id="more"></a><h1 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h1><p><code>envoy</code> 只有一个文件，两百多行代码，非常的简单</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> tree envoy</span><br><span class="line">envoy</span><br><span class="line">├── __init__.py</span><br><span class="line">└── core.py</span><br></pre></td></tr></table></figure><p><code>envoy</code> 可以非常轻松通过管道传递数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> envoy.core <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line">r = run(<span class="string">'ifconfig|wc -l'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r</span><br><span class="line">&lt;Response [wc]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.command</span><br><span class="line">[<span class="string">'wc'</span>, <span class="string">'-l'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.std_out</span><br><span class="line"><span class="string">'      52\n'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[&lt;Response [ifconfig]&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者像这样</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run(<span class="string">'wc -l'</span>, data=<span class="string">'1\n2\n3\n'</span>).std_out</span><br><span class="line"><span class="string">'       3\n'</span></span><br></pre></td></tr></table></figure><p>我们先看看 <code>run</code> 函数</p><p><code>run</code> 函数接接收 命令，管道数据，超时时间，<code>kill</code> 超时时间，扩展环境变量，执行目录 作为参数</p><p><code>run</code> 函数是对 <code>Command.run</code> 的封装，首先通过 <code>expand_args</code> 函数解析命令，通过 <code>Command.run</code> 执行多个命令，如果有多个命令的话，将上个命令的输出传递给下一个命令，实现管道间的数据传递，并返回一个 <code>Response</code> 对象</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(command, data=None, timeout=None, kill_timeout=None, env=None, cwd=None)</span>:</span></span><br><span class="line">    <span class="string">"""Executes a given commmand and returns Response.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Blocks until process is complete, or timeout is reached.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    command = expand_args(command)</span><br><span class="line"></span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> command:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(history):</span><br><span class="line">            <span class="comment"># due to broken pipe problems pass only first 10 KiB</span></span><br><span class="line">            data = history[<span class="number">-1</span>].std_out[<span class="number">0</span>:<span class="number">10</span>*<span class="number">1024</span>]</span><br><span class="line"></span><br><span class="line">        cmd = Command(c)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            out, err = cmd.run(data, timeout, kill_timeout, env, cwd)</span><br><span class="line">            status_code = cmd.returncode</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            out, err = <span class="string">''</span>, <span class="string">u"\n"</span>.join([e.strerror, traceback.format_exc()])</span><br><span class="line">            status_code = <span class="number">127</span></span><br><span class="line"></span><br><span class="line">        r = Response(process=cmd)</span><br><span class="line"></span><br><span class="line">        r.command = c</span><br><span class="line">        r.std_out = out</span><br><span class="line">        r.std_err = err</span><br><span class="line">        r.status_code = status_code</span><br><span class="line"></span><br><span class="line">        history.append(r)</span><br><span class="line"></span><br><span class="line">    r = history.pop()</span><br><span class="line">    r.history = history</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><p>我们再看看 <code>envoy</code> 是如何解析我们传入的命令的</p><p>如果传入的类型的是 <code>str</code> 或者 <code>unicode</code>, 则通过 <code>shelx</code> 模块对其进行解析成 <code>subprocess</code> 需要的格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand_args</span><span class="params">(command)</span>:</span></span><br><span class="line">    <span class="string">"""Parses command strings and returns a Popen-ready list."""</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prepare arguments.</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(command, (str, unicode)):</span><br><span class="line">        splitter = shlex.shlex(command.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        splitter.whitespace = <span class="string">'|'</span></span><br><span class="line">        splitter.whitespace_split = <span class="keyword">True</span></span><br><span class="line">        command = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            token = splitter.get_token()</span><br><span class="line">            <span class="keyword">if</span> token:</span><br><span class="line">                command.append(token)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        command = list(map(shlex.split, command))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> command</span><br></pre></td></tr></table></figure><p>我们手动传入一条命令，看一下它的返回</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> envoy.core <span class="keyword">import</span> expand_args</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expand_args(<span class="string">'ls -l|wc -l'</span>)</span><br><span class="line">[[<span class="string">'ls'</span>, <span class="string">'-l'</span>], [<span class="string">'wc'</span>, <span class="string">'-l'</span>]]</span><br></pre></td></tr></table></figure><p>我们再仔细看一下，<code>envoy</code> 里面是如何通过管道传递数据的</p><p>首先 初始化一个 <code>history</code> 列表，保存每一次执行的命令，如果 <code>len(history) &gt; 0</code>，也说明执行的命令超过一条，则将上条命令的 <code>std_out</code> 前 <code>10 KiB</code> 的数据赋值给 <code>data</code></p><p>再将 <code>data</code> 传递给 <code>Command.run</code> 方法，也就是下个命令的 <code>std_in</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(command, data=None, timeout=None, kill_timeout=None, env=None, cwd=None)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    history = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> command:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(history):</span><br><span class="line">            <span class="comment"># due to broken pipe problems pass only first 10 KiB</span></span><br><span class="line">            data = history[<span class="number">-1</span>].std_out[<span class="number">0</span>:<span class="number">10</span>*<span class="number">1024</span>]</span><br><span class="line"></span><br><span class="line">        cmd = Command(c)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            out, err = cmd.run(data, timeout, kill_timeout, env, cwd)</span><br><span class="line">            status_code = cmd.returncode</span><br><span class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">            ....</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>envoy</code> 中最关键的就是 <code>Command.run</code> 这个方法了，我们来看看它是如何封装 <code>subprocess</code> 的</p><p><code>Command</code> 的构造函数接收一个命令作为参数</p><p><code>run</code> 方法则比较复杂，里面定义了一个 <code>target</code> 函数，<code>target</code> 函数封装 <code>subprocess.Popen</code>，然后将管道中的数据传入 <code>communicate</code> 方法</p><p>然后启动了一个新的线程，等待线程执行完成或者超时，并做一些检查 以保证进程完全退出，最后返回 <code>std_out</code> 和 <code>std_err</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, cmd)</span>:</span></span><br><span class="line">        self.cmd = cmd</span><br><span class="line">        self.process = <span class="keyword">None</span></span><br><span class="line">        self.out = <span class="keyword">None</span></span><br><span class="line">        self.err = <span class="keyword">None</span></span><br><span class="line">        self.returncode = <span class="keyword">None</span></span><br><span class="line">        self.data = <span class="keyword">None</span></span><br><span class="line">        self.exc = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, data, timeout, kill_timeout, env, cwd)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        environ = dict(os.environ)</span><br><span class="line">        environ.update(env <span class="keyword">or</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.process = subprocess.Popen(self.cmd,</span><br><span class="line">                    universal_newlines=<span class="keyword">True</span>,</span><br><span class="line">                    shell=<span class="keyword">False</span>,</span><br><span class="line">                    env=environ,</span><br><span class="line">                    stdin=subprocess.PIPE,</span><br><span class="line">                    stdout=subprocess.PIPE,</span><br><span class="line">                    stderr=subprocess.PIPE,</span><br><span class="line">                    bufsize=<span class="number">0</span>,</span><br><span class="line">                    cwd=cwd,</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sys.version_info[<span class="number">0</span>] &gt;= <span class="number">3</span>:</span><br><span class="line">                    self.out, self.err = self.process.communicate(</span><br><span class="line">                        input = bytes(self.data, <span class="string">"UTF-8"</span>) <span class="keyword">if</span> self.data <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.out, self.err = self.process.communicate(self.data)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">                self.exc = exc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        thread = threading.Thread(target=target)</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">        thread.join(timeout)</span><br><span class="line">        <span class="keyword">if</span> self.exc:</span><br><span class="line">            <span class="keyword">raise</span> self.exc</span><br><span class="line">        <span class="keyword">if</span> _is_alive(thread) :</span><br><span class="line">            _terminate_process(self.process)</span><br><span class="line">            thread.join(kill_timeout)</span><br><span class="line">            <span class="keyword">if</span> _is_alive(thread):</span><br><span class="line">                _kill_process(self.process)</span><br><span class="line">                thread.join()</span><br><span class="line">        self.returncode = self.process.returncode</span><br><span class="line">        <span class="keyword">return</span> self.out, self.err</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>envoy</code> 的代码还是很简单的，代码里面也没有用什么黑魔法，毕竟只是一个简单的封装</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;envoy&lt;/code&gt; 是对 Python 标准库中 &lt;code&gt;subprocess&lt;/code&gt; 模块的封装， 虽然功能对比原生 &lt;code&gt;subprocess&lt;/code&gt; 来说少了很多，但是更易于使用，&lt;a href=&quot;https://github.com/kennethreitz/envoy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github 项目地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="read-code" scheme="https://anyisalin.github.io/tags/read-code/"/>
    
  </entry>
  
  <entry>
    <title>Git - log</title>
    <link href="https://anyisalin.github.io/2017/03/24/git-log/"/>
    <id>https://anyisalin.github.io/2017/03/24/git-log/</id>
    <published>2017-03-24T03:12:58.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>git</code> 是一款非常牛逼的分布式代码管理工具，<code>Linux</code> 之父 <code>linus torvalds</code> 所编写，是目前全世界最流行的代码管理工具，全世界最大的代码托管平台 <code>Github</code> 就是基于 <code>git</code> 做的，无数的开源项目使用 <code>git</code> ，如果不会 <code>git</code> 简直无法在开源世界立足，因为最近在看 <code>《pro git》</code> 这本书，所以我会写几篇 <code>git</code> 的文章，这篇文章主要介绍 <code>git log</code> 子命令的一些用法</p><a id="more"></a><h2 id="log-基础"><a href="#log-基础" class="headerlink" title="log 基础"></a>log 基础</h2><p>如果想查看一个 <code>git</code> 管理的项目的提交记录，可以通过 <code>log</code> 子命令来查看，为了演示，就把 <code>Flask</code> 项目的源码拉下来演示</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/pallets/flask.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 最近 Github 被墙的厉害，最好通过科学上网去 clone</span><br></pre></td></tr></table></figure><p>进入项目，直接通过 <code>git log</code> 可以查看所有的历史提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> cd flask</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git log</span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 13:43:01 2017 -0700</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">    Print a stacktrace on CLI error (closes #2208)</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 20:56:12 2017 +0100</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br><span class="line"></span><br><span class="line">commit ad42d88fb2cda12a21c4fb6f002f425f233d1fe3</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 14:42:09 2017 +0100</span><br><span class="line"></span><br><span class="line">    Remove useless pass</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span> ignore</span><br></pre></td></tr></table></figure><h3 id="follow"><a href="#follow" class="headerlink" title="follow"></a><strong>follow</strong></h3><p>通过 <code>--follow $FILE</code> 选项可以查看所有提交历史中，包含指定文件更改的记录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --follow Makefile #查看 Makefile 的更改</span><br><span class="line"></span><br><span class="line">commit a4ed3d28066bb1625c15fc6a89c1533535dc7879</span><br><span class="line">Author: Markus Unterwaditzer &lt;markus@unterwaditzer.net&gt;</span><br><span class="line">Date:   Wed Nov 2 17:56:59 2016 +0100</span><br><span class="line"></span><br><span class="line">    Use tox from make test</span><br><span class="line"></span><br><span class="line">commit fd1a355899691215bda059f410256e6fff470955</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Thu Jun 2 09:44:41 2016 +0200</span><br><span class="line"></span><br><span class="line">    Added test-requirements.txt. Refs #1835</span><br><span class="line"></span><br><span class="line">commit 523e27118359425048541d92892f20ee048c0b76</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Thu May 26 20:07:52 2016 +0200</span><br><span class="line"></span><br><span class="line">    Implemented simplified CLI interface</span><br></pre></td></tr></table></figure><p>感觉输出的条目太多了，我只想看最后一条怎么办？在选项前指定想要查看的行数 <code>-number</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log -1 --follow Makefile</span><br><span class="line"></span><br><span class="line">commit a4ed3d28066bb1625c15fc6a89c1533535dc7879</span><br><span class="line">Author: Markus Unterwaditzer &lt;markus@unterwaditzer.net&gt;</span><br><span class="line">Date:   Wed Nov 2 17:56:59 2016 +0100</span><br><span class="line"></span><br><span class="line">    Use tox from make test</span><br></pre></td></tr></table></figure><h3 id="merges"><a href="#merges" class="headerlink" title="merges"></a><strong>merges</strong></h3><p>通过 <code>--merges</code> 显示合并的提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log -1 --merges</span><br><span class="line"></span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 13:43:01 2017 -0700</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">    Print a stacktrace on CLI error (closes #2208)</span><br></pre></td></tr></table></figure><h3 id="no-merges"><a href="#no-merges" class="headerlink" title="no-merges"></a><strong>no-merges</strong></h3><p>通过<code>--no-merges</code> 显示不是合并的提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log -1 --no-merges</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 20:56:12 2017 +0100</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br></pre></td></tr></table></figure><h3 id="author"><a href="#author" class="headerlink" title="author"></a><strong>author</strong></h3><p>通过<code>--author</code> 过滤出对应作者的提交，我们看一下 <code>Flask</code> 作者<code>Armin Ronacher</code> 的提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --author='Armin Ronacher' -1</span><br><span class="line"></span><br><span class="line">commit c9b33d0e860e347f1ed46eebadbfef4f5422b6da</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Sun Jan 29 12:26:52 2017 +0100</span><br><span class="line"></span><br><span class="line">    Convert Flask.run into a noop when run from the CLI</span><br></pre></td></tr></table></figure><h3 id="stat"><a href="#stat" class="headerlink" title="stat"></a><strong>stat</strong></h3><p>通过<code>--stat</code> 显示对比上一次提交，文件的增减</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --stat -3</span><br><span class="line"></span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 13:43:01 2017 -0700</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">    Print a stacktrace on CLI error (closes #2208)</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 20:56:12 2017 +0100</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br><span class="line"></span><br><span class="line"> tests/test_cli.py | 17 +++++++++++++++++</span><br><span class="line"> 1 file changed, 17 insertions(+)</span><br><span class="line"></span><br><span class="line">commit ad42d88fb2cda12a21c4fb6f002f425f233d1fe3</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 14:42:09 2017 +0100</span><br><span class="line"></span><br><span class="line">    Remove useless pass</span><br><span class="line"></span><br><span class="line"> flask/cli.py | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br></pre></td></tr></table></figure><h3 id="since"><a href="#since" class="headerlink" title="since"></a><strong>since</strong></h3><p>通过<code>--since</code> 显示某天之后的提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --since '2 week ago'</span><br><span class="line"></span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 13:43:01 2017 -0700</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">    Print a stacktrace on CLI error (closes #2208)</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 20:56:12 2017 +0100</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br><span class="line"></span><br><span class="line">commit ad42d88fb2cda12a21c4fb6f002f425f233d1fe3</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 14:42:09 2017 +0100</span><br><span class="line"></span><br><span class="line">    Remove useless pass</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ignore</span><br></pre></td></tr></table></figure><p><code>since</code> 可以在很多种格式下工作，例如 <code>git log --since 2015-7-11</code> ，<code>git log --since 2.weeks</code></p><h3 id="until"><a href="#until" class="headerlink" title="until"></a><strong>until</strong></h3><p>通过<code>—until</code> 显示某天之前的提交，和<code>since</code> 相反</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --until 6.year.11.month.17.day</span><br><span class="line"></span><br><span class="line">commit 44b42e0fbd93d86e0f4e929bda8e5fb63e81035d</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Tue Apr 6 16:16:34 2010 +0200</span><br><span class="line"></span><br><span class="line">    Added a README file for MiniTwit.</span><br><span class="line"></span><br><span class="line">commit 4ec7d2a0d8eac4f915dc0d38a886cd57045bb0c4</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Tue Apr 6 16:02:14 2010 +0200</span><br><span class="line"></span><br><span class="line">    Started working on documentation.</span><br><span class="line"></span><br><span class="line">    So far just the stable parts :)</span><br><span class="line"></span><br><span class="line">commit b15ad394279fc3b7f998fa56857f334a7c0156f6</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Tue Apr 6 13:23:18 2010 +0200</span><br><span class="line"></span><br><span class="line">    Added setup.py and README</span><br><span class="line"></span><br><span class="line">commit 33850c0ebd23ae615e6823993d441f46d80b1ff0</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Tue Apr 6 13:12:57 2010 +0200</span><br><span class="line"></span><br><span class="line">    Initial checkin of stuff that exists so far.</span><br></pre></td></tr></table></figure><h3 id="显示diff"><a href="#显示diff" class="headerlink" title="显示diff"></a><strong>显示diff</strong></h3><p>也可以通过 <code>-p</code> 选项来显示每一次提交之间的 <code>diff</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log -p -2</span><br><span class="line"></span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 13:43:01 2017 -0700</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">    Print a stacktrace on CLI error (closes #2208)</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 20:56:12 2017 +0100</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br><span class="line"></span><br><span class="line">diff --git a/tests/test_cli.py b/tests/test_cli.py</span><br><span class="line">index 313a34d..82c69f9 100644</span><br><span class="line">--- a/tests/test_cli.py</span><br><span class="line">+++ b/tests/test_cli.py</span><br><span class="line">@@ -191,3 +191,20 @@ def test_flaskgroup():</span><br><span class="line">     result = runner.invoke(cli, ['test'])</span><br><span class="line">     assert result.exit_code == 0</span><br><span class="line">     assert result.output == 'flaskgroup\n'</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+def test_print_exceptions():</span><br><span class="line">+    """Print the stacktrace if the CLI."""</span><br><span class="line">+    def create_app(info):</span><br><span class="line">+        raise Exception("oh no")</span><br><span class="line">+        return Flask("flaskgroup")</span><br><span class="line">+</span><br><span class="line">+    @click.group(cls=FlaskGroup, create_app=create_app)</span><br><span class="line">+    def cli(**params):</span><br><span class="line">+        pass</span><br><span class="line">+</span><br><span class="line">+    runner = CliRunner()</span><br><span class="line">+    result = runner.invoke(cli, ['--help'])</span><br><span class="line">+    assert result.exit_code == 0</span><br><span class="line">+    assert 'Exception: oh no' in result.output</span><br><span class="line">+    assert 'Traceback' in result.output</span><br></pre></td></tr></table></figure><h3 id="搜索名称"><a href="#搜索名称" class="headerlink" title="搜索名称"></a><strong>搜索名称</strong></h3><p>通过 <code>grep</code> 选项，可以通过提交名称来过滤</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --grep fix -3</span><br><span class="line"></span><br><span class="line">commit c43560777a3efeaeaf0eb47568171f04103dc363</span><br><span class="line">Author: Grey Li &lt;withlihui@gmail.com&gt;</span><br><span class="line">Date:   Sat Mar 4 18:29:04 2017 +0800</span><br><span class="line"></span><br><span class="line">    Add tips for debug config with flask cli (#2196)</span><br><span class="line"></span><br><span class="line">    * Add tips for debug config with flask cli</span><br><span class="line"></span><br><span class="line">    `app.debug` and `app.config['DEBUG']` are not compatible with the `flask` script.</span><br><span class="line"></span><br><span class="line">    * Grammar fix</span><br><span class="line"></span><br><span class="line">    * Grammar fix</span><br><span class="line"></span><br><span class="line">commit bb0e755c808a8541192982ba7b86308b68ff7657</span><br><span class="line">Author: Jeff Widman &lt;jeff@jeffwidman.com&gt;</span><br><span class="line">Date:   Sat Feb 11 01:43:11 2017 -0800</span><br><span class="line"></span><br><span class="line">    Migrate various docs links to https (#2180)</span><br><span class="line"></span><br><span class="line">    Also fixed a few outdated links</span><br><span class="line"></span><br><span class="line">commit 46c1383919454ae281967316d6d6fb33bce9b773</span><br><span class="line">Author: wgwz &lt;klawlor419@gmail.com&gt;</span><br><span class="line">Date:   Sat Dec 31 12:37:39 2016 -0500</span><br></pre></td></tr></table></figure><h3 id="搜索字符串"><a href="#搜索字符串" class="headerlink" title="搜索字符串"></a>搜索字符串</h3><p>通过 <code>-S</code> 选项，可以过滤出指定字符串的修改的提交，可以配合 <code>-p</code> 来查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log -S 'app.run()' -p -1</span><br></pre></td></tr></table></figure><h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><p><code>git log</code> 子命令大多数情况下都可以指定文件，查看这个文件的历史提交，如果不指定文件的情况下，则查看这个 <code>repo</code> 的历史提交</p><p>我们也可以组合上面这些选项使用</p><p>例如：找出<code>Armin Ronacher</code> 在六年 十一月 十八天 前对 <code>setup.py</code> 的提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --author='Armin Ronacher' --stat --until 6.year.11.month.18.day setup.py</span><br><span class="line"></span><br><span class="line">commit b15ad394279fc3b7f998fa56857f334a7c0156f6</span><br><span class="line">Author: Armin Ronacher &lt;armin.ronacher@active-4.com&gt;</span><br><span class="line">Date:   Tue Apr 6 13:23:18 2010 +0200</span><br><span class="line"></span><br><span class="line">    Added setup.py and README</span><br><span class="line"></span><br><span class="line"> setup.py | 19 +++++++++++++++++++</span><br><span class="line"> 1 file changed, 19 insertions(+)</span><br></pre></td></tr></table></figure><h2 id="更漂亮的输出"><a href="#更漂亮的输出" class="headerlink" title="更漂亮的输出"></a>更漂亮的输出</h2><p>通过 <code>pretty</code> 选项可以让 <code>log</code> 的输出更加的符合我们的需求</p><h3 id="oneline"><a href="#oneline" class="headerlink" title="oneline"></a><strong>oneline</strong></h3><p>输出格式如下</p><blockquote><p><sha1> <title line></title></sha1></p></blockquote><p>每个提交只输出一行，更加简洁</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --pretty=oneline -2</span><br><span class="line"></span><br><span class="line">6efea346dd54fa9adb65fc044d72e5ec8bdf4018 Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line">ed17bc171046a15f03c890687db8eb9652513bd9 Add test to showcase that printing a traceback works</span><br></pre></td></tr></table></figure><h3 id="short"><a href="#short" class="headerlink" title="short"></a><strong>short</strong></h3><p>输出格式如下</p><blockquote><p>commit <sha1><br>Author: <author></author></sha1></p><title line></title></blockquote><p>输出简短的信息，默认就是 short</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --pretty=short -2</span><br><span class="line"></span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br></pre></td></tr></table></figure><h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a><strong>medium</strong></h3><p>输出格式如下</p><blockquote><p>commit <sha1><br>Author: <author><br>Commit: <committer></committer></author></sha1></p><title line><full commit message></full></title></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --pretty=medium -2</span><br><span class="line"></span><br><span class="line">commit 6efea346dd54fa9adb65fc044d72e5ec8bdf4018</span><br><span class="line">Merge: 1add1f8 ed17bc1</span><br><span class="line">Author: David Lord &lt;davidism@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 13:43:01 2017 -0700</span><br><span class="line"></span><br><span class="line">    Merge pull request #2209 from svenstaro/print-stacktrace-on-cli-error</span><br><span class="line"></span><br><span class="line">    Print a stacktrace on CLI error (closes #2208)</span><br><span class="line"></span><br><span class="line">commit ed17bc171046a15f03c890687db8eb9652513bd9</span><br><span class="line">Author: Sven-Hendrik Haase &lt;svenstaro@gmail.com&gt;</span><br><span class="line">Date:   Thu Mar 16 20:56:12 2017 +0100</span><br><span class="line"></span><br><span class="line">    Add test to showcase that printing a traceback works</span><br></pre></td></tr></table></figure><h3 id="other"><a href="#other" class="headerlink" title="other"></a><strong>other</strong></h3><p>还有 <code>full</code>、<code>email</code>、<code>full</code>、<code>fuller</code> 、<code>raw</code> 等 <code>git</code> 自带的格式输出，这里就不介绍了</p><h2 id="自定义输出"><a href="#自定义输出" class="headerlink" title="自定义输出"></a>自定义输出</h2><p><code>pretty</code> 强大之处在于它可以自定义 <code>log</code> 的输出，就像下面这样</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> git log --pretty=format:'%H - %ae' -2</span><br><span class="line"></span><br><span class="line">6efea346dd54fa9adb65fc044d72e5ec8bdf4018 - davidism@gmail.com</span><br><span class="line">ed17bc171046a15f03c890687db8eb9652513bd9 - svenstaro@gmail.com</span><br></pre></td></tr></table></figure><p>格式如下，更多的看官方文档。。</p><blockquote><ul><li>%H: commit hash</li><li>%h: abbreviated commit hash</li><li>%T: tree hash</li><li>%t: abbreviated tree hash</li><li>%P: parent hashes</li><li>%p: abbreviated parent hashes</li><li>%an: author name</li><li>%aN: author name (respecting .mailmap, see git-shortlog(1) or git-blame(1))</li><li>%ae: author email</li><li>%aE: author email (respecting .mailmap, see git-shortlog(1) or git-blame(1))</li><li>%ad: author date (format respects –date= option)</li><li>%aD: author date, RFC2822 style</li></ul></blockquote><p>从 <a href="http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs" target="_blank" rel="noopener">stackoverflow</a> 上抄了两个很好看的 <code>log format</code>，当然，你并不需要输入那么长，可以定义别名</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all</span><br></pre></td></tr></table></figure><blockquote><p>参考资料:</p><p><a href="http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs" target="_blank" rel="noopener">pretty git branch graphs</a></p><p><a href="https://git-scm.com/docs/git-log" target="_blank" rel="noopener">git log docs</a></p><p>《progit》</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;git&lt;/code&gt; 是一款非常牛逼的分布式代码管理工具，&lt;code&gt;Linux&lt;/code&gt; 之父 &lt;code&gt;linus torvalds&lt;/code&gt; 所编写，是目前全世界最流行的代码管理工具，全世界最大的代码托管平台 &lt;code&gt;Github&lt;/code&gt; 就是基于 &lt;code&gt;git&lt;/code&gt; 做的，无数的开源项目使用 &lt;code&gt;git&lt;/code&gt; ，如果不会 &lt;code&gt;git&lt;/code&gt; 简直无法在开源世界立足，因为最近在看 &lt;code&gt;《pro git》&lt;/code&gt; 这本书，所以我会写几篇 &lt;code&gt;git&lt;/code&gt; 的文章，这篇文章主要介绍 &lt;code&gt;git log&lt;/code&gt; 子命令的一些用法&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://anyisalin.github.io/tags/git/"/>
    
      <category term="vcs" scheme="https://anyisalin.github.io/tags/vcs/"/>
    
      <category term="log" scheme="https://anyisalin.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>Python - SQLAlchemy</title>
    <link href="https://anyisalin.github.io/2017/03/18/python-sqlalchemy/"/>
    <id>https://anyisalin.github.io/2017/03/18/python-sqlalchemy/</id>
    <published>2017-03-18T15:34:18.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 中有很多连接数据库的模块，<code>pymysql</code>、<code>psycopg2</code>、<code>sqlite3</code> 等，但是通常情况下我们都不会单独使用它们，因为程序可能需要支持多个数据库，而且直接通过调用 <code>SQL</code> 的方式去获取数据库中的数据会使得代码维护成本变高，这种情况下可能就要用到 <code>ORM (数据关系映射, Object Relational Mapping)</code>，而 Python 中最著名的 <code>ORM</code> 当属 <code>SQLAlchemy</code> 了</p><a id="more"></a><p><code>SQLAlchemy</code> 的关系映射提供了 数据库中的表 与 Python 的类、实例之间的映射关系 一般个类对应一张表，一个实例对应一列</p><h2 id="SQLAlchemy-基础"><a href="#SQLAlchemy-基础" class="headerlink" title="SQLAlchemy 基础"></a>SQLAlchemy 基础</h2><p>首先我们肯定得先安装 <code>SQLAlchemy</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install sqlalchemy</span></span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine </span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///:memory:'</span>) <span class="comment">#通过 create_engine 连接数据库，这里我们使用 sqlite，并存储数据在内存中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 debug 模式</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">engine = create_engine('sqlite:///:memeory:', echo=True)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>关于连接数据库的 url 可以看官方文档 <a href="http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls" target="_blank" rel="noopener">database-url</a></p><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>如果我们需要一张 <code>users</code> 的表，那么我们可以通过一个 <code>User</code> 类来声明它的元数据，它继承自 <code>Base</code> 基类</p><p>它有以下几个字段</p><ul><li>username</li><li>email</li><li>location</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, String, Integer</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///:memory:'</span>, echo=<span class="keyword">True</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">SQLAlchemy 通过 Column 这个描述器类来替换数据库字段的访问和赋值过程</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)  <span class="comment"># 每一个类都需要主键</span></span><br><span class="line">    username = Column(String(<span class="number">64</span>), index=<span class="keyword">True</span>)</span><br><span class="line">    email = Column(String(<span class="number">64</span>), unique=<span class="keyword">True</span>, index=<span class="keyword">True</span>)</span><br><span class="line">    location = Column(String(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""定义 repr 让输出更加直观优雅"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User &#123;&#125;&gt;'</span>.format(self.username)</span><br></pre></td></tr></table></figure><p>上面的代码用来声明一个数据表的元数据，可以通过 <code>User.__table__</code> 看看</p><p>会返回一个 Table 对象，我们并没有定义 <code>__table__</code>，但是为什么会有这个属性呢？这都是通过 <code>Base</code> 的元类<code>DeclarativeMeta</code>  来完成的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>User.__table__</span><br><span class="line">Table(<span class="string">'users'</span>, MetaData(bind=<span class="keyword">None</span>), Column(<span class="string">'id'</span>, Integer(), table=&lt;users&gt;, primary_key=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>), Column(<span class="string">'username'</span>, String(length=<span class="number">64</span>), table=&lt;users&gt;), Column(<span class="string">'email'</span>, String(length=<span class="number">64</span>), table=&lt;users&gt;), Column(<span class="string">'location'</span>, String(length=<span class="number">128</span>), table=&lt;users&gt;), schema=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><h3 id="创建-Schema"><a href="#创建-Schema" class="headerlink" title="创建 Schema"></a>创建 Schema</h3><p><code>users</code> 表定义了，我们该如何创建呢？可以通过 <code>Metadata</code> 类的 <code>create_all</code> 方法来创建数据表的 <code>schema</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base.metadata.create_all(bind=engine) <span class="comment"># 由于指定了 echo 参数，所以打印出创建过程</span></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">121</span> INFO sqlalchemy.engine.base.Engine SELECT CAST(<span class="string">'test plain returns'</span> AS VARCHAR(<span class="number">60</span>)) AS anon_1</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">122</span> INFO sqlalchemy.engine.base.Engine ()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">123</span> INFO sqlalchemy.engine.base.Engine SELECT CAST(<span class="string">'test unicode returns'</span> AS VARCHAR(<span class="number">60</span>)) AS anon_1</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">123</span> INFO sqlalchemy.engine.base.Engine ()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">124</span> INFO sqlalchemy.engine.base.Engine PRAGMA table_info(<span class="string">"users"</span>)</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">124</span> INFO sqlalchemy.engine.base.Engine ()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">126</span> INFO sqlalchemy.engine.base.Engine</span><br><span class="line">CREATE TABLE users (</span><br><span class="line">        id INTEGER NOT NULL,</span><br><span class="line">        username VARCHAR(<span class="number">64</span>),</span><br><span class="line">        email VARCHAR(<span class="number">64</span>),</span><br><span class="line">        location VARCHAR(<span class="number">128</span>),</span><br><span class="line">        PRIMARY KEY (id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">126</span> INFO sqlalchemy.engine.base.Engine ()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">126</span> INFO sqlalchemy.engine.base.Engine COMMIT</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">126</span> INFO sqlalchemy.engine.base.Engine CREATE INDEX ix_users_username ON users (username)</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">126</span> INFO sqlalchemy.engine.base.Engine ()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">126</span> INFO sqlalchemy.engine.base.Engine COMMIT</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">127</span> INFO sqlalchemy.engine.base.Engine CREATE UNIQUE INDEX ix_users_email ON users (email)</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">127</span> INFO sqlalchemy.engine.base.Engine ()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">20</span>:<span class="number">44</span>:<span class="number">08</span>,<span class="number">127</span> INFO sqlalchemy.engine.base.Engine COMMIT</span><br></pre></td></tr></table></figure><h3 id="创建-instance"><a href="#创建-instance" class="headerlink" title="创建 instance"></a>创建 instance</h3><p>我们已经创建了一张表，怎么给它加字段呢？其实添加一个字段就像新建一个实例一样简单</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>anyisalin = User(username=<span class="string">'AnyISalIn'</span>, email=<span class="string">'anyisalin@gmail.com'</span>, location=<span class="string">'ShangHai/China'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anyisalin.__dict__</span><br><span class="line">&#123;<span class="string">'_sa_instance_state'</span>: &lt;sqlalchemy.orm.state.InstanceState at <span class="number">0x112aa4438</span>&gt;,</span><br><span class="line"> <span class="string">'email'</span>: <span class="string">'anyisalin@gmail.com'</span>,</span><br><span class="line"> <span class="string">'location'</span>: <span class="string">'ShangHai/China'</span>,</span><br><span class="line"> <span class="string">'username'</span>: <span class="string">'AnyISalIn'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="CRUD-操作"><a href="#CRUD-操作" class="headerlink" title="CRUD 操作"></a>CRUD 操作</h2><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p>虽然我们添加了一个字段，但是并没有将它保存到数据库中，如果我们需要 存储、查询、更新数据，那么我们就需要定义 <code>Session</code> 类了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">session = sessionmaker(bind=engine)() <span class="comment">#就像 Metadata 类一样，需要 bind engine</span></span><br></pre></td></tr></table></figure><p>通过 <code>add</code> 方法将实例临时存储在 <code>Session</code> 对象里面，然后通过 <code>commit</code> 方法提交到数据库，其实 <code>Session</code> 对象的操作就是在进行事务，当然也可以 <code>rollback</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(anyisalin)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit() <span class="comment">#如果不想提交，并恢复可以调用 session.rollback()</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">47</span>,<span class="number">336</span> INFO sqlalchemy.engine.base.Engine BEGIN (implicit)</span><br><span class="line">2017-03-23 21:07:47,338 INFO sqlalchemy.engine.base.Engine INSERT INTO users (username, email, location) VALUES (?, ?, ?)</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">47</span>,<span class="number">338</span> INFO sqlalchemy.engine.base.Engine (<span class="string">'AnyISalIn'</span>, <span class="string">'anyisalin@gmail.com'</span>, <span class="string">'ShangHai/China'</span>)</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">47</span>,<span class="number">338</span> INFO sqlalchemy.engine.base.Engine COMMIT</span><br></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>这里先不介绍读取操作了，后面介绍查询</p><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>如果想要更新字段的数据，其实也非常简单</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>anyisalin.username</span><br><span class="line"><span class="string">'AnyISalIn'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>anyisalin.username = <span class="string">'hahahaha'</span> <span class="comment">#直接修改实例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(anyisalin)<span class="comment">#重新 add</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.dirty</span><br><span class="line">IdentitySet([&lt;User hahahaha&gt;]) <span class="comment">#identiyset中可以看到修改的字段</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit() <span class="comment">#再次 commit</span></span><br></pre></td></tr></table></figure><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>想要删除字段，调用 <code>delete</code> 方法就可以了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.delete(anyisalin)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>我们先添加一点假的数据以供查询</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> faker <span class="keyword">import</span> Faker <span class="comment"># 使用 faker 这个模块来生成一些假数据, pip install faker</span></span><br><span class="line"></span><br><span class="line">faker = Faker()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fake_data_generate</span><span class="params">(User, session)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        user = User(username=faker.name(), email=faker.email(), location=faker.address())</span><br><span class="line">        session.add(user)</span><br><span class="line">    session.commit()</span><br></pre></td></tr></table></figure><p>生成假数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fake_data_generate(User, session)</span><br><span class="line">2017-03-23 21:26:44,761 INFO sqlalchemy.engine.base.Engine INSERT INTO users (username, email, location) VALUES (?, ?, ?)</span><br><span class="line"><span class="meta">... </span>ignore output</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-23</span> <span class="number">21</span>:<span class="number">26</span>:<span class="number">44</span>,<span class="number">766</span> INFO sqlalchemy.engine.base.Engine COMMIT</span><br></pre></td></tr></table></figure><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User) <span class="comment">#指定查询的字段, 如果只指定了表，则会查询所有字段，相当于 select * from table</span></span><br><span class="line">&lt;sqlalchemy.orm.query.Query at <span class="number">0x112ceeeb8</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>all</strong></p><p>返回所有的字段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).all()</span><br><span class="line">[&lt;User Sherry Collins&gt;,</span><br><span class="line"> &lt;User Jeffrey Pierce&gt;,</span><br><span class="line"> &lt;User Tamara Sherman&gt;,</span><br><span class="line"> &lt;User Lori James&gt;,</span><br><span class="line"> &lt;User Kendra Hernandez&gt;,</span><br><span class="line"> &lt;User Mitchell Campbell&gt;,</span><br><span class="line"> &lt;User Patricia Maldonado&gt;,</span><br><span class="line"> &lt;User Jennifer Johnson&gt;,</span><br><span class="line"> &lt;User Timothy Williamson&gt;,</span><br><span class="line"> &lt;User Pamela Cochran&gt;]</span><br></pre></td></tr></table></figure><p><strong>first</strong></p><p>返回第一个字段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).first()</span><br><span class="line">&lt;User Sherry Collins&gt;</span><br></pre></td></tr></table></figure><p><strong>filter</strong></p><p>很多时候需要过滤一些条件，可以通过 filter 方法来实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).filter(User.id == <span class="number">1</span>)</span><br><span class="line"><span class="string">'&lt;User Sherry Collins&gt;'</span></span><br></pre></td></tr></table></figure><p><strong>count</strong></p><p>计数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).count()</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="还没写"><a href="#还没写" class="headerlink" title="还没写"></a>还没写</h3><h2 id="relationship"><a href="#relationship" class="headerlink" title="relationship"></a>relationship</h2><p>如果我们需要将用户的 <code>email</code> 单独存放在一张表里面，并使它们的实例都有一定关联关系，我们就需要定义 <code>relationship</code> 字段了</p><p>这是一个简单的例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, String, Integer, create_engine, ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, sessionmaker</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///:memory:'</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'emails'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    address = Column(String(<span class="number">128</span>))</span><br><span class="line">    user_id = Column(Integer, ForeignKey(<span class="string">'users.id'</span>))  <span class="comment"># 如果要使用 relationship, 必须有一个引用外键</span></span><br><span class="line">    user = relationship(<span class="string">'User'</span>, back_populates=<span class="string">'emails'</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        back_populates 参数指的是，</span></span><br><span class="line"><span class="string">        可以通过这个参数来反推,</span></span><br><span class="line"><span class="string">        也就是说 email.user 可以获取对应用户的实例,</span></span><br><span class="line"><span class="string">        user.emails 可以获取对应所有邮箱的实例</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;Email &#123;&#125;&gt;'</span>.format(self.address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    username = Column(String(<span class="number">64</span>))</span><br><span class="line">    emails = relationship(<span class="string">'Email'</span>, order_by=Email.id, back_populates=<span class="string">'user'</span>)</span><br><span class="line">    location = Column(String(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;User &#123;&#125;&gt;'</span>.format(self.username)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base.metadata.create_all(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session = sessionmaker(bind=engine)()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user1 = User(username=<span class="string">'anyisalin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user1.emails</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user1.emails.append(Email(address=<span class="string">'anyisalin@gmail.com'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user1.emails.append(Email(address=<span class="string">'xilin@vanecloud.com'</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>user1.emails</span><br><span class="line">[&lt;Email anyisalin@gmail.com&gt;, &lt;Email xilin@vanecloud.com&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(user1)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(User).first()</span><br><span class="line">&lt;User anyisalin&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = session.query(User).first()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.emails</span><br><span class="line">[&lt;Email xilin@vanecloud.com&gt;, &lt;Email anyisalin@gmail.com&gt;]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u.emails[<span class="number">0</span>].user</span><br><span class="line">&lt;User anyisalin&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python 中有很多连接数据库的模块，&lt;code&gt;pymysql&lt;/code&gt;、&lt;code&gt;psycopg2&lt;/code&gt;、&lt;code&gt;sqlite3&lt;/code&gt; 等，但是通常情况下我们都不会单独使用它们，因为程序可能需要支持多个数据库，而且直接通过调用 &lt;code&gt;SQL&lt;/code&gt; 的方式去获取数据库中的数据会使得代码维护成本变高，这种情况下可能就要用到 &lt;code&gt;ORM (数据关系映射, Object Relational Mapping)&lt;/code&gt;，而 Python 中最著名的 &lt;code&gt;ORM&lt;/code&gt; 当属 &lt;code&gt;SQLAlchemy&lt;/code&gt; 了&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
      <category term="database" scheme="https://anyisalin.github.io/tags/database/"/>
    
      <category term="orm" scheme="https://anyisalin.github.io/tags/orm/"/>
    
  </entry>
  
  <entry>
    <title>Python Web编程 - WSGI</title>
    <link href="https://anyisalin.github.io/2017/03/17/python-wsgi/"/>
    <id>https://anyisalin.github.io/2017/03/17/python-wsgi/</id>
    <published>2017-03-17T05:37:10.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>WSGI</code> 是服务器与应用程序通信的接口规范，在 <a href="https://www.python.org/dev/peps/pep-3333/" target="_blank" rel="noopener">PEP-3333</a> 提出，如果一个 Web 框架基于 <code>WSGI</code> 规范编写，那么它就可以运行在任意支持 <code>WSGI</code> 规范的 Web 服务器上，<code>httpd</code>、<code>nginx</code> 以及 Python 标准库中的 <code>wsgiref</code> 等 Web 服务器都支持 <code>WSGI</code> 规范，而 <code>django</code>、<code>flask</code> 这些基于 <code>WSGI</code> 的 Web 框架也都能够运行在这些服务器上</p><a id="more"></a><h2 id="编写应用程序"><a href="#编写应用程序" class="headerlink" title="编写应用程序"></a>编写应用程序</h2><p><code>WSGI</code> 应用程序有以下几点要求</p><ul><li>需要是一个 <code>callable</code> 对象</li><li>接受两个参数，环境字典、还有一个向 Web 服务器返回状态码和响应头部的函数</li><li>返回值为一个可迭代对象</li></ul><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">easy_app</span><span class="params">(env, resp)</span>:</span></span><br><span class="line">    resp_headers = [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)] <span class="comment">#头部需要用列表嵌套元组的格式</span></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    resp(status, resp_headers)  <span class="comment">#resp 函数接受 状态码和头部</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">b'&lt;h1&gt;hello, world&lt;/h1&gt;'</span>] <span class="comment">#返回一个可迭代对象，并且 body 必须转为 ascii 码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = make_server(<span class="string">'localhost'</span>, <span class="number">8080</span>, easy_app) <span class="comment">#这里使用 python 自带的 wsgi 服务器</span></span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:8080</span></span><br><span class="line">&lt;h1&gt;hello, world&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="操作环境变量"><a href="#操作环境变量" class="headerlink" title="操作环境变量"></a>操作环境变量</h3><p>这个例子返回当前这次请求的一些环境变量</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, resp)</span>:</span></span><br><span class="line">    resp_body = [<span class="string">'&#123;&#125;:&#123;&#125;'</span>.format(key, val) <span class="keyword">for</span> key, val <span class="keyword">in</span> env.items() <span class="keyword">if</span></span><br><span class="line">                 key <span class="keyword">in</span> (<span class="string">'SERVER_PROTOCOL'</span>, <span class="string">'CONTENT_TYPE'</span>, <span class="string">'HTTP_HOST'</span>, <span class="string">'USER'</span>)]</span><br><span class="line">    <span class="comment">#由于变量太多，只返回这几个就行了</span></span><br><span class="line">    resp_body = <span class="string">'\n'</span>.join(resp_body) <span class="comment">#格式化以下返回 body</span></span><br><span class="line"></span><br><span class="line">    status = <span class="string">'200 OK'</span></span><br><span class="line">    resp_headers = [ </span><br><span class="line">        (<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>),</span><br><span class="line">        (<span class="string">'Content-Length'</span>, str(len(resp_body))) <span class="comment">#增加 Length 字段</span></span><br><span class="line">    ]</span><br><span class="line">    resp(status, resp_headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [resp_body.encode(<span class="string">'ascii'</span>)] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    server = make_server(<span class="string">'localhost'</span>, <span class="number">8080</span>, application) </span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&gt; server.serve_forever()</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> - - [<span class="number">18</span>/Mar/<span class="number">2017</span> <span class="number">10</span>:<span class="number">11</span>:<span class="number">01</span>] <span class="string">"GET / HTTP/1.1"</span> <span class="number">200</span> <span class="number">88</span></span><br></pre></td></tr></table></figure><p>启动之后通过 <code>curl</code> 测试，返回了我们指定的几个环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:8080</span></span><br><span class="line">USER:anyisalin</span><br><span class="line">HTTP_HOST:localhost:8080</span><br><span class="line">SERVER_PROTOCOL:HTTP/1.1</span><br><span class="line">CONTENT_TYPE:text/plain</span><br></pre></td></tr></table></figure><h3 id="表单解析"><a href="#表单解析" class="headerlink" title="表单解析"></a>表单解析</h3><p>如果我们需要解析表单并处理，看下面这个例子</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_form</span><span class="params">(env)</span>:</span> <span class="comment">#写一个将查询参数转换为字典的函数</span></span><br><span class="line">    data = env.get(<span class="string">'QUERY_STRING'</span>)  <span class="comment">#环境变量中的 QUERY_STRING 就是表单的参数</span></span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        <span class="keyword">return</span> &#123;key: val[<span class="number">0</span>] <span class="keyword">for</span> key, val <span class="keyword">in</span> parse_qs(data).items()&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(env, resp)</span>:</span></span><br><span class="line">    form = get_form(env)</span><br><span class="line">    <span class="keyword">if</span> form.get(<span class="string">'submitted'</span>): <span class="comment">#判断是否是表单提交</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            name = form.get(<span class="string">'name'</span>)</span><br><span class="line">            resp_html = <span class="string">'&lt;h1&gt;Hello &#123;&#125;&lt;/h1&gt;'</span>.format(name)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            resp(<span class="string">'500 ERR'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)])</span><br><span class="line">            <span class="keyword">return</span> [str(e).encode(<span class="string">'ascii'</span>)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resp(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">            <span class="keyword">return</span> [resp_html.encode(<span class="string">'ascii'</span>)]</span><br><span class="line">    <span class="keyword">else</span>:<span class="comment">#如果不是表单提交，就正常渲染表单</span></span><br><span class="line">        resp(<span class="string">'200 OK'</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html'</span>)])</span><br><span class="line">        resp_html = <span class="string">'''</span></span><br><span class="line"><span class="string">        &lt;form&gt;</span></span><br><span class="line"><span class="string">        name: &lt;input type="text", name="name"/&gt;</span></span><br><span class="line"><span class="string">        submit: &lt;input type="submit", name="submitted"/&gt;</span></span><br><span class="line"><span class="string">        &lt;/form&gt;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> [resp_html.encode(<span class="string">'ascii'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server = make_server(<span class="string">''</span>, <span class="number">8080</span>, application)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><p>测试，点击提交</p><p><img src="/images/wsgi_form1.png" alt></p><p><img src="/images/wsgi_form2.png" alt></p><h2 id="写不下去了"><a href="#写不下去了" class="headerlink" title="写不下去了"></a>写不下去了</h2><p>为什么不用 Web 框架呢</p><p>这样写简直 LOW 到爆，没有路由，不够安全、扩展性不够</p><p>主要还是写起来真累！</p><p>我想要这样写！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/', methods=['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;hello, world&lt;/h1&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;username&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;hello &#123;&#125;&lt;/h1&gt;'</span>.format(username)</span><br></pre></td></tr></table></figure><p>嗯，这些都是 Web 框架干的事，处理请求，提供路由 等</p><p>如果只是要进行 Web 开发，而不打算深入理解底层框架实现的话，用现成的框架就可以了，Python 有很多牛逼的 Web 框架，<code>Flask</code>、<code>Django</code>、<code>Tornado</code>等，各有各的优点，随便挑选一个开始你的 Web 开发之路吧</p><p>嗯，如果你都用不惯的话，也可以自己实现一个</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;WSGI&lt;/code&gt; 是服务器与应用程序通信的接口规范，在 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP-3333&lt;/a&gt; 提出，如果一个 Web 框架基于 &lt;code&gt;WSGI&lt;/code&gt; 规范编写，那么它就可以运行在任意支持 &lt;code&gt;WSGI&lt;/code&gt; 规范的 Web 服务器上，&lt;code&gt;httpd&lt;/code&gt;、&lt;code&gt;nginx&lt;/code&gt; 以及 Python 标准库中的 &lt;code&gt;wsgiref&lt;/code&gt; 等 Web 服务器都支持 &lt;code&gt;WSGI&lt;/code&gt; 规范，而 &lt;code&gt;django&lt;/code&gt;、&lt;code&gt;flask&lt;/code&gt; 这些基于 &lt;code&gt;WSGI&lt;/code&gt; 的 Web 框架也都能够运行在这些服务器上&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
      <category term="web" scheme="https://anyisalin.github.io/tags/web/"/>
    
      <category term="network" scheme="https://anyisalin.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Python Web 编程 - CGI</title>
    <link href="https://anyisalin.github.io/2017/03/16/python-cgi/"/>
    <id>https://anyisalin.github.io/2017/03/16/python-cgi/</id>
    <published>2017-03-16T11:34:56.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>所谓的动态网页就是会根据某些变量，渲染出不同的页面，曾经的 Web 后端开发主要就是通过服务端脚本生成 HTML 文档给用户，但是这已经过时了，现在流行前后端分离的架构，后端只提供 API，前端通过调用后端 API 获取数据，因为现在前端可以做很多事，是门大学问，坑也非常多，这里就不说了，本文主要介绍已经过时的 Web 开发的基础， CGI 协议</p><p>嗯，我在胡说八道</p><a id="more"></a><p>不知道该写啥，随便看个例子吧</p><p>cgi 脚本一般通过 HTTP Server 调用，所以我先装个 httpd</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> yum install -y httpd# centos 大法好</span><br></pre></td></tr></table></figure><p>httpd 默认把 cgi 脚本放在 /var/www/cgi-bin</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第一行必须得写指定的解释器，因为 cgi 脚本并不限定语言，所以必须指定</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">'Content-type: text/html'</span>) <span class="comment"># 设置 content-type 为 text/html </span></span><br><span class="line">print(<span class="string">''</span>) <span class="comment"># 结束头部，得打印空行</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'&lt;h1&gt;Life is short&lt;/h1&gt;'</span>) <span class="comment"># 这就是输出的 html</span></span><br></pre></td></tr></table></figure><p>来，试一试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> chmod +x test.py # 加个执行权限，当前在 cgi-bin 目录下</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> curl localhost/cgi-bin/test.py</span><br><span class="line">&lt;h1&gt;Life is short&lt;/h1&gt; # 实在懒得开浏览器截图了，直接用 curl</span><br></pre></td></tr></table></figure><p>说实话，第一次写这个的时候感觉 low 到爆</p><h2 id="cgi-模块"><a href="#cgi-模块" class="headerlink" title="cgi 模块"></a>cgi 模块</h2><p>如果需要传递参数，提交表单啊 啥的就需要 cgi 模块来搞定了</p><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>先看看怎么用吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># cgi-module.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"></span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">args = cgi.FieldStorage()</span><br><span class="line">print(args)</span><br></pre></td></tr></table></figure><p>发送带参数的请求试试</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> curl 'localhost/cgi-bin/cgi-module.py?name=AnyISalIn&amp;email=anyisalin@gmail.com'</span><br><span class="line">FieldStorage(None, None, [MiniFieldStorage('name', 'AnyISalIn'), MiniFieldStorage('email', 'anyisalin@gmail.com')])</span><br></pre></td></tr></table></figure><h3 id="通过传递的参数渲染页面"><a href="#通过传递的参数渲染页面" class="headerlink" title="通过传递的参数渲染页面"></a>通过传递的参数渲染页面</h3><p>可以通过 <code>getvalue</code> 方法来获取参数的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># args2.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Content-type: text/html'</span>)</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">args = cgi.FieldStorage()</span><br><span class="line">print(<span class="string">'&lt;h1&gt;Hello &#123;&#125;, Website &#123;&#125;&lt;/h1&gt;'</span>.format(args.getvalue(<span class="string">'name'</span>), args.getvalue(<span class="string">'url'</span>)))</span><br></pre></td></tr></table></figure><p>测试，多个参数之前用 <code>&amp;</code> 符号分隔</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> curl 'localhost/cgi-bin/args2.py?name=aaa&amp;url=http://anyisalin.github.io'</span><br><span class="line">&lt;h1&gt;Hello aaa, Website http://anyisalin.github.io&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="GET-表单测试"><a href="#GET-表单测试" class="headerlink" title="GET 表单测试"></a>GET 表单测试</h3><p>文档路径为 <code>/var/www/html/form1.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/args2.py"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">    name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    url: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输入参数</p><p><img src="/images/form1.png" alt="form1"></p><p>点击 submit</p><p><img src="/images/form2.png" alt="form2"></p><h3 id="POST-表单测试"><a href="#POST-表单测试" class="headerlink" title="POST 表单测试"></a>POST 表单测试</h3><p>通过 POST 传递数据更加的安全，密码之类的字段不会明文显示在请求 url 上</p><p>文档路径为 <code>/var/www/html/form2.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/args3.py"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    url: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"url"</span> /&gt;</span></span><br><span class="line">    password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建一个 <code>args3.py</code> 的 cgi 脚本，简单的登录支持</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># args3.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Content-type: text/html'</span>)</span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">args = cgi.FieldStorage()</span><br><span class="line">print(<span class="string">'&lt;h1&gt;Hello &#123;&#125;, Website &#123;&#125;&lt;/h1&gt;'</span>.format(args.getvalue(<span class="string">'name'</span>), args.getvalue(<span class="string">'url'</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> args.getvalue(<span class="string">'password'</span>) == <span class="string">'password'</span>:</span><br><span class="line">    print(<span class="string">'Login Pass'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Deny Login'</span>)</span><br></pre></td></tr></table></figure><p>故意输错密码</p><p><img src="/images/form3.png" alt></p><p>拒绝登录</p><p><img src="/images/form4.png" alt></p><p>密码输入正确，登录成功</p><p><img src="/images/form5.png" alt></p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>还是通过表单的方式上传文件</p><p>文档路径为 <code>/var/www/html/form3.html</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">action</span>=<span class="string">"/cgi-bin/upfile.py"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">    select file: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>建一个 <code>upload</code> 目录来存上传的文件，并设置所有者为 <code>apache</code> 用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> pwd</span><br><span class="line">/var/www/cgi-bin</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> install -d -g apache -o apache upload</span><br></pre></td></tr></table></figure><p>编写一个 <code>upfile.py</code> 的 cgi 脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># upfile.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi, os</span><br><span class="line"></span><br><span class="line">args = cgi.FieldStorage()</span><br><span class="line"></span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">fileitem = args[<span class="string">'file'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> fileitem.filename:</span><br><span class="line">    f = os.path.join(<span class="string">'upload'</span>, fileitem.filename)</span><br><span class="line">    <span class="keyword">with</span> open(f, <span class="string">'wb'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">        fd.write(fileitem.file.read())</span><br><span class="line">    print(<span class="string">'upload success'</span>)</span><br></pre></td></tr></table></figure><p>选择文件</p><p><img src="/images/form6.png" alt></p><p>点击上传</p><p><img src="/images/form7.png" alt></p><p>查看 <code>upload</code> 目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> ls upload/</span><br><span class="line">export.json</span><br></pre></td></tr></table></figure><h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><p>如果我们的 cgi 脚本运行出错，一般情况下 HTTP Server 会抛出 500 错误，但是我们可能希望 HTTP Server 能够准确的抛出异常，供我们排错，这时候就要用到 <code>cgitb</code> 这个模块了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># traceback.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"><span class="keyword">import</span> cgitb</span><br><span class="line"></span><br><span class="line">cgitb.enable()</span><br><span class="line"></span><br><span class="line">print(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'hello, world'</span>, aaaa) <span class="comment">#故意打错</span></span><br></pre></td></tr></table></figure><p>请求一下页面试试</p><p><img src="/images/traceback.png" alt></p><h2 id="CGI-的一些问题"><a href="#CGI-的一些问题" class="headerlink" title="CGI 的一些问题"></a>CGI 的一些问题</h2><p>有几个比较关键的问题</p><ul><li>所有脚本都必须有执行权限</li><li>不同操作系统的换行符可能会有问题</li><li>要使用特定的扩展名去访问</li><li>cgi 脚本中必须指定解释器</li><li>性能不行</li></ul><p>在 Python 中解决这些问题可能就需要用到  <code>WSGI</code> 了</p><blockquote><p>参考资料: </p><p><a href="http://www.runoob.com/python/python-cgi.html" target="_blank" rel="noopener">Python CGI | 菜鸟教程</a></p><p><a href="https://docs.python.org/3/library/cgi.html" target="_blank" rel="noopener">Python doc CGI</a></p><p><a href="https://docs.python.org/3/howto/webservers.html#howto-use-python-in-the-web" target="_blank" rel="noopener">HOWTO Use Python in the web</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所谓的动态网页就是会根据某些变量，渲染出不同的页面，曾经的 Web 后端开发主要就是通过服务端脚本生成 HTML 文档给用户，但是这已经过时了，现在流行前后端分离的架构，后端只提供 API，前端通过调用后端 API 获取数据，因为现在前端可以做很多事，是门大学问，坑也非常多，这里就不说了，本文主要介绍已经过时的 Web 开发的基础， CGI 协议&lt;/p&gt;
&lt;p&gt;嗯，我在胡说八道&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
      <category term="web" scheme="https://anyisalin.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Python 网络编程 - socket</title>
    <link href="https://anyisalin.github.io/2017/03/15/python-socket/"/>
    <id>https://anyisalin.github.io/2017/03/15/python-socket/</id>
    <published>2017-03-15T02:30:48.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果希望我们的程序能够通过网络进行调用，就需用到网络编程的模块，Python 最基础的网络程序就是 通过 <code>socket</code>  来编写，高级一点的就是所谓的 <code>Web</code> 编程了，底层无非也就是 <code>socket</code> 通信，本文主要介绍 <code>socket</code> 这个模块的用法</p><a id="more"></a><h2 id="socket-基础用法"><a href="#socket-基础用法" class="headerlink" title="socket 基础用法"></a>socket 基础用法</h2><p>和 <code>threading</code> 一样，Python 中 <code>socket</code> 是对 <code>_socket</code> 的封装，<code>_socket</code> 更为底层，我们一般使用 <code>socket</code> </p><p>为了方便，我们导入 <code>socket</code> 模块中的所有类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><p><code>socket</code> 接受几个参数</p><ul><li>family : 传输使用的地址族，常用的是 <code>AF_INET</code>、<code>AF_INET6</code>、<code>AF_UNIX</code></li><li>type : 传输使用的协议，常用的是 <code>SOCK_STREAM/TCP</code>、<code>SOCK_DGRAM/UDP</code></li><li>proto: 通常为 0，如果 family 为 <code>AF_CAN</code> 时，应该为 <code>CAN_RAW</code> 或 <code>CAN_BCM</code></li><li>fileno: 通常为 <code>None</code>，如果指定了，则会返回一个具有指定文件描述符的套接字返回 # <strong>其实我也不知道什么意思，但是并不妨碍我们写代码</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">构造函数接受的参数如下</span></span><br><span class="line"><span class="string">def __init__(self, family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">sock = socket()</span><br><span class="line">sock.bind((<span class="string">''</span>, <span class="number">5000</span>))<span class="comment"># bind 方法接受一个元祖，包含监听地址和端口</span></span><br><span class="line">sock.listen(<span class="number">5</span>) <span class="comment">#监听指定地址，5 代表排队连接的最大数量，一般最大为5</span></span><br><span class="line">conn, addr = sock.accept() <span class="comment">#接受连接，如果没有连接会一直阻塞，建立连接后会返回 已经建立连接的 socket 对象和客户端地址</span></span><br><span class="line">print(conn, addr)</span><br></pre></td></tr></table></figure><p>然后程序会阻塞，我们通过 nc 命令建立连接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> nc localhost 5000</span><br></pre></td></tr></table></figure><p>中断并输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># output</span></span><br><span class="line">&lt;socket.socket fd=<span class="number">11</span>, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=<span class="number">0</span>, laddr=(<span class="string">'127.0.0.1'</span>, <span class="number">5000</span>), raddr=(<span class="string">'127.0.0.1'</span>, <span class="number">50686</span>)&gt; (<span class="string">'127.0.0.1'</span>, <span class="number">50686</span>)</span><br></pre></td></tr></table></figure><h3 id="一个简单的服务端例子"><a href="#一个简单的服务端例子" class="headerlink" title="一个简单的服务端例子"></a>一个简单的服务端例子</h3><p>这个简单的例子，会将客户端发送的信息原样返回，能够大致的了解 <code>socket</code> 服务端是怎么做的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoSocketServer</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr, port, family=AF_INET,</span></span></span><br><span class="line"><span class="function"><span class="params">                 type_=SOCK_STREAM, backlog=<span class="number">0</span>, init=True)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.port = port</span><br><span class="line">        self.family = family</span><br><span class="line">        self.type_ = type_</span><br><span class="line">        self.backlog = backlog</span><br><span class="line">        <span class="keyword">if</span> init <span class="keyword">is</span> <span class="keyword">True</span>:</span><br><span class="line">            self.init_socket()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.sock = socket()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_socket</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        init socket object</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.sock = socket(self.family, self.type_)</span><br><span class="line">        self.sock.bind((self.addr, self.port))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_echo</span><span class="params">(self, conn)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = conn.recv(<span class="number">16</span>)</span><br><span class="line">                print(<span class="string">'Recv'</span>, data)</span><br><span class="line">                <span class="keyword">if</span> data:</span><br><span class="line">                    conn.sendall(data)</span><br><span class="line">                    print(<span class="string">'Send'</span>, data)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> BrokenPipeError:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        run echo server</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.sock.listen(self.backlog)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            conn, addr = self.sock.accept()</span><br><span class="line">            print(<span class="string">'Connect by &#123;&#125; Port &#123;&#125;'</span>.format(*addr))</span><br><span class="line">            self._echo(conn)</span><br></pre></td></tr></table></figure><p>测试，看似没有什么问题，但是只能接受一个客户端的请求，可以使用多线/进程解决，这个后面再说</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>serv = EchoSocketServer(addr=<span class="string">''</span>, port=<span class="number">5000</span>)<span class="comment"># addr 传空字符串代表监听所有地址</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">$ nc localhost 5000#还是通过 nc 命令连接 , !!! 先执行 serv.run()</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serv.run()</span><br><span class="line">Connect by <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> Port <span class="number">51169</span></span><br><span class="line">Recv <span class="string">b'2\n'</span></span><br><span class="line">Send <span class="string">b'2\n'</span></span><br><span class="line">Recv <span class="string">b'3\n'</span></span><br><span class="line">Send <span class="string">b'3\n'</span></span><br><span class="line">Recv <span class="string">b'4\n'</span></span><br><span class="line">Send <span class="string">b'4\n'</span></span><br></pre></td></tr></table></figure><h3 id="一个简单的客户端例子"><a href="#一个简单的客户端例子" class="headerlink" title="一个简单的客户端例子"></a>一个简单的客户端例子</h3><p>客户端无非还是那几个方法，<code>send</code>、<code>recv</code> ，只是要先通过 <code>connect</code> 方法连接服务端</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoSocketClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr, port, family=AF_INET, type_=SOCK_STREAM)</span>:</span></span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.port = port</span><br><span class="line">        self.sock = socket(family, type_)</span><br><span class="line">        self.sock.connect((addr, port))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            run echo client</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            message = str(randint(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">            self.sock.sendall(message.encode(<span class="string">'ascii'</span>))</span><br><span class="line">            print(<span class="string">'Send'</span>, message)</span><br><span class="line">            data = self.sock.recv(<span class="number">16</span>)</span><br><span class="line">            print(<span class="string">'Recv'</span>, data.decode(<span class="string">'utf8'</span>))</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = EchoSocketClient(addr=<span class="string">'localhost'</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.run()</span><br><span class="line">Send <span class="number">58</span></span><br><span class="line">Recv <span class="number">58</span></span><br><span class="line">Send <span class="number">12</span></span><br><span class="line">Recv <span class="number">12</span></span><br><span class="line">Send <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="实现并发"><a href="#实现并发" class="headerlink" title="实现并发"></a>实现并发</h3><p>上面的 <code>EchoSocketServer</code> 同一时刻只能接受一个连接，这不科学，我们可以通过 <code>Thread</code> 来实现并发</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoThreadSocketServer</span><span class="params">(EchoSocketServer)</span>:</span><span class="comment">#继承 EchoSocketServer 重写 run 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sock.listen(self.backlog)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            conn, addr = self.sock.accept()</span><br><span class="line">            Thread(target=self._echo, args=(conn,)).start()</span><br></pre></td></tr></table></figure><p>那就再写个多线程的客户端进行测试吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s %(levelname)s [%(threadName)s] %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoThreadSocketClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, addr, port, family=AF_INET, type_=SOCK_STREAM)</span>:</span></span><br><span class="line">        self.addr = addr</span><br><span class="line">        self.port = port</span><br><span class="line">        self.family = family</span><br><span class="line">        self.type_ = type_</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        sock = socket(self.family, self.type_)</span><br><span class="line">        sock.connect((self.addr, self.port))</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            message = str(randint(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">            sock.send(message.encode(<span class="string">'ascii'</span>))</span><br><span class="line">            logging.info(<span class="string">'Send &#123;&#125;'</span>.format(message))</span><br><span class="line">            data = sock.recv(<span class="number">16</span>)</span><br><span class="line">            logging.info(<span class="string">'Recv &#123;&#125;'</span>.format(data.decode(<span class="string">'utf8'</span>)))</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        ts = [Thread(target=self._connect) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>)]</span><br><span class="line">        [t.start() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br><span class="line">        [t.join() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br></pre></td></tr></table></figure><p>使用单进程 <code>EchoServer</code> ，多进程 <code>EchoClient</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>serv = EchoSocketServer(addr=<span class="string">''</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serv.run()</span><br><span class="line">Recv <span class="string">b'9'</span></span><br><span class="line">Send <span class="string">b'9'</span></span><br><span class="line">Recv <span class="string">b'18'</span></span><br><span class="line">Send <span class="string">b'18'</span></span><br><span class="line">Recv <span class="string">b'13'</span></span><br><span class="line">Send <span class="string">b'13'</span></span><br><span class="line">Recv <span class="string">b'76'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = EchoThreadSocketClient(addr=<span class="string">'localhost'</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.run()<span class="comment">#可以看到只有一个线程又返回，其他的都阻塞了</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">53</span>,<span class="number">088</span> INFO [Thread<span class="number">-30</span>] Send <span class="number">9</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">53</span>,<span class="number">088</span> INFO [Thread<span class="number">-30</span>] Recv <span class="number">9</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">53</span>,<span class="number">089</span> INFO [Thread<span class="number">-29</span>] Send <span class="number">95</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">54</span>,<span class="number">093</span> INFO [Thread<span class="number">-30</span>] Send <span class="number">18</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">54</span>,<span class="number">093</span> INFO [Thread<span class="number">-30</span>] Recv <span class="number">18</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">099</span> INFO [Thread<span class="number">-30</span>] Send <span class="number">13</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">099</span> INFO [Thread<span class="number">-30</span>] Recv <span class="number">13</span></span><br></pre></td></tr></table></figure><p>使用多进程 <code>EchoServer</code>， 多进程 <code>EchoClient</code></p><p>结果看起来很科学</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>serv = EchoThreadSocketServer(addr=<span class="string">''</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>serv.run()</span><br><span class="line">Recv <span class="string">b'4'</span></span><br><span class="line">Send <span class="string">b'4'</span></span><br><span class="line">Recv <span class="string">b'40'</span></span><br><span class="line">Send <span class="string">b'40'</span></span><br><span class="line">Recv <span class="string">b'48'</span></span><br><span class="line">Recv <span class="string">b'38'</span></span><br><span class="line">Send <span class="string">b'38'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = EchoThreadSocketClient(addr=<span class="string">'localhost'</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client.run() <span class="comment">#每一个线程都有了返回</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">20</span>,<span class="number">410</span> INFO [Thread<span class="number">-88</span>] Send <span class="number">4</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">20</span>,<span class="number">410</span> INFO [Thread<span class="number">-89</span>] Send <span class="number">40</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">20</span>,<span class="number">411</span> INFO [Thread<span class="number">-88</span>] Recv <span class="number">4</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">20</span>,<span class="number">411</span> INFO [Thread<span class="number">-89</span>] Recv <span class="number">40</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">21</span>,<span class="number">413</span> INFO [Thread<span class="number">-88</span>] Send <span class="number">48</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">21</span>,<span class="number">413</span> INFO [Thread<span class="number">-88</span>] Recv <span class="number">48</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-15</span> <span class="number">23</span>:<span class="number">15</span>:<span class="number">21</span>,<span class="number">414</span> INFO [Thread<span class="number">-89</span>] Send <span class="number">38</span></span><br></pre></td></tr></table></figure><h2 id="socketserver"><a href="#socketserver" class="headerlink" title="socketserver"></a>socketserver</h2><p>Python 标准库中有一个叫 <code>socketserver</code> # python 2 为 <code>SocketServer</code> 的模块能让我们更简单的编写网络程序</p><p>更复杂的就不介绍了，<a href="https://docs.python.org/3/library/socketserver.html" target="_blank" rel="noopener">请自行查阅 socketserver 官方文档</a>，只介绍一点基础的使用，其实我也不会用，哈哈</p><h3 id="fibserver"><a href="#fibserver" class="headerlink" title="fibserver"></a>fibserver</h3><p>这次不写 echoserver 了，写计算 菲波那切数列的服务端程序，不要吐槽这个算法，这里使用递归来计算是为了降低响应效率，否则算的太快了。。。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFibHandler</span><span class="params">(socketserver.BaseRequestHandler)</span>:</span><span class="comment">#从BaseRequestHandler继承</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span><span class="comment">#重写 handle</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = int(self.request.recv(<span class="number">16</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            message = (str(fib(data)) + <span class="string">'\n'</span>).encode(<span class="string">'ascii'</span>)</span><br><span class="line">            self.request.sendall(message)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>server = socketserver.TCPServer((<span class="string">'localhost'</span>, <span class="number">5000</span>), MyFibHandler)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server.serve_forever()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#客户端</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">$ nc localhost 5000#看起来运行的很不错</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">34</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">55</span></span><br><span class="line"><span class="string">17</span></span><br><span class="line"><span class="string">2584</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#如果需要多线程实现并发，只需要这样启动就行了，更多的还是看文档吧</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>server = socketserver.ThreadingTCPServer((<span class="string">'localhost'</span>, <span class="number">5000</span>), MyFibHandler)</span><br></pre></td></tr></table></figure><p>关于 <code>socketserver</code>，我真的不知道更多东西了</p><blockquote><p>参考资料:</p><p><a href="https://pymotw.com/2/socket/tcp.html" target="_blank" rel="noopener">py how to socket</a></p><p><a href="https://www.youtube.com/watch?v=MCs5OvhV9S4" target="_blank" rel="noopener">David Beazley: <strong>Python Concurrency From the Ground Up: LIVE!</strong></a>  <strong>这个强烈推荐</strong></p><p><a href="https://docs.python.org/3/library/socketserver.html" target="_blank" rel="noopener">Python Doc socketserver</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果希望我们的程序能够通过网络进行调用，就需用到网络编程的模块，Python 最基础的网络程序就是 通过 &lt;code&gt;socket&lt;/code&gt;  来编写，高级一点的就是所谓的 &lt;code&gt;Web&lt;/code&gt; 编程了，底层无非也就是 &lt;code&gt;socket&lt;/code&gt; 通信，本文主要介绍 &lt;code&gt;socket&lt;/code&gt; 这个模块的用法&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
      <category term="network" scheme="https://anyisalin.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Python - 多线程</title>
    <link href="https://anyisalin.github.io/2017/03/12/python-multithread/"/>
    <id>https://anyisalin.github.io/2017/03/12/python-multithread/</id>
    <published>2017-03-12T11:44:21.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们写的程序需要并发时，我们就需要用到 Python 中的一些并发库，例如 <code>asyncio</code>、<code>thread</code>、 <code>multiprocessing</code> 等，本文主要介绍 Python 标准库中的多线程库 <code>thread</code> </p><a id="more"></a><h2 id="threading-基本使用"><a href="#threading-基本使用" class="headerlink" title="threading 基本使用"></a>threading 基本使用</h2><p>使用多线程的优势在于</p><ul><li>程序运行更快</li></ul><ul><li>适用于 IO 密集的场景</li></ul><p>Python 标准库提供了两个模块，<code>_thread</code> 和 <code>threading</code> ，<code>threading</code> 对 <code>_thread</code> 进行了封装，虽然 Python  有 <code>GIL</code> ，会在线程切换时消耗很多资源，但是在 IO 密集的场景下，Python 多线程还是很管用的</p><p>先看看 <code>threading</code> 的基本使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(*args, **kwargs)</span>:</span><span class="comment">#定义一个 hello 函数</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>, args, kwargs)</span><br></pre></td></tr></table></figure><p>实例化线程对象，<code>target</code> 参数为指定函数，<code>args</code> 是传递的列表参数，<code>kwargs</code> 是传递的字典参数，通过 start 方法启动一个线程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = threading.Thread(target=hello, args=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], kwargs=&#123;<span class="string">'a'</span>: <span class="string">'b'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.start()</span><br><span class="line">hello, world (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">'a'</span>: <span class="string">'b'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="threading-和-Thread-常用参数和方法"><a href="#threading-和-Thread-常用参数和方法" class="headerlink" title="threading 和 Thread 常用参数和方法"></a>threading 和 Thread 常用参数和方法</h3><p><strong>name 参数</strong></p><p>导入 <code>logging</code> 库，更加直观的显示线程的信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG, format=<span class="string">'%(asctime)s %(levelname)s [%(threadName)s] %(message)s'</span>) <span class="comment">#配置 logging</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    logging.info(<span class="string">'test'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = threading.Thread(target=hello, name=<span class="string">'hello_thread'</span>)<span class="comment">#指定线程名称</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-12</span> <span class="number">22</span>:<span class="number">30</span>:<span class="number">58</span>,<span class="number">556</span> INFO [hello_thread] test</span><br></pre></td></tr></table></figure><p><strong>daemon</strong></p><p>线程退出的时候，该线程的所有<code>daemon</code> 的子线程都会退出，而<code>no-daemon</code> 子线程不会退出</p><p>而线程退出会等待所有的 <code>no-daemon</code> 子线程退出</p><p><strong>join 方法</strong></p><p>子线程的 <code>join</code> 方法会阻塞主线程，直到子线程退出或者超时，如果不设置超时时间，就会一直等待子线程退出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">()</span>:</span></span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=worker) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>执行 <code>main</code> 函数能够感觉到是一直阻塞着的，直到子线程退出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>main()</span><br></pre></td></tr></table></figure><p><strong>enumerate 方法</strong></p><p>列出当前所有的线程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>threading.enumerate()</span><br><span class="line">[&lt;_MainThread(MainThread, started <span class="number">140736493310912</span>)&gt;,</span><br><span class="line"> &lt;HistorySavingThread(IPythonHistorySavingThread, started <span class="number">123145445384192</span></span><br></pre></td></tr></table></figure><p><strong>local</strong></p><p>线程共享内存、状态和资源，但是<code>threading</code> <code>local</code> 对象的属性，只对当前线程可见</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ctx = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ctx</span><br><span class="line">&lt;_thread._local at <span class="number">0x10d6419e8</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ctx.data = <span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">()</span>:</span></span><br><span class="line">    print(ctx.data)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>worker()</span><br><span class="line"><span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>threading.Thread(target=worker).start()</span><br><span class="line"></span><br><span class="line">In [<span class="number">101</span>]: Exception <span class="keyword">in</span> thread Thread<span class="number">-2477</span>:</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/local/opt/pyenv/versions/3.5.3/Python.framework/Versions/3.5/lib/python3.5/threading.py"</span>, line <span class="number">914</span>, <span class="keyword">in</span> _bootstrap_inner</span><br><span class="line">    self.run()</span><br><span class="line">  File <span class="string">"/usr/local/opt/pyenv/versions/3.5.3/Python.framework/Versions/3.5/lib/python3.5/threading.py"</span>, line <span class="number">862</span>, <span class="keyword">in</span> run</span><br><span class="line">    self._target(*self._args, **self._kwargs)</span><br><span class="line">  File <span class="string">"&lt;ipython-input-96-ffa8a91f04dc&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> worker</span><br><span class="line">    print(ctx.data)</span><br><span class="line">AttributeError: <span class="string">'_thread._local'</span> object has no attribute <span class="string">'data'</span></span><br></pre></td></tr></table></figure><h3 id="实例化-Thread-类"><a href="#实例化-Thread-类" class="headerlink" title="实例化 Thread 类"></a>实例化 Thread 类</h3><p>之前通过 <code>target</code> 参数的方式不是非常的优雅，其实可以通过继承 <code>Thread</code> 类并重写 <code>run</code> 方法来编写更加优雅的代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hello, world'</span>)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyThread()</span><br><span class="line">&lt;MyThread(Thread<span class="number">-1</span>, initial)&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MyThread().start()</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure><p><strong>传递参数</strong></p><p>通过重写 <code>__init__()</code> 方法传递参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'hello, world'</span>, self.args, self.kwargs)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = MyThread(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, state=<span class="string">'ok'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.start()</span><br><span class="line">hello, world (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">'state'</span>: <span class="string">'ok'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>在使用多个线程同时操作一个资源的情况下( 例如读文件) ，我们需要控制同一时刻只有一个线程对资源进行操作，这时候就需要一些同步机制，如 锁、队列、条件、事件等</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>我们可以通过 <code>threading.Lock</code> 来解决这个问题</p><p><code>Lock</code> 对象一般有两个操作，获取 <code>acquire</code> 和 释放 <code>release</code></p><p>通过 <code>acquire</code> 方法 将 <code>Lock</code> 对象状态设置为锁定，如果是锁定状态则会阻塞，<code>release</code> 方法则将 <code>Lock</code> 对象解锁</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lock.acquire()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lock.acquire(timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lock.acquire(timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>一个抓取页面的例子，通过使用锁，实现了线程之间的同步</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s %(levelname)s [%(threadName)s] %(message)s'</span>)</span><br><span class="line">lock = threading.Lock()</span><br><span class="line">file = open(<span class="string">'data'</span>, <span class="string">'a'</span>)</span><br><span class="line">urls = [<span class="string">'http://baidu.com'</span>, <span class="string">'http://cn.bing.com/'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FetchUrls</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url: str, file, lock: threading.Lock, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line">        self.file = file</span><br><span class="line">        self.lock = lock</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        res = requests.get(self.url)</span><br><span class="line">        self.lock.acquire()</span><br><span class="line">        logging.info(<span class="string">'Lock Acquire'</span>)</span><br><span class="line">        self.file.write(res.text)</span><br><span class="line">        logging.info(<span class="string">'File Writed'</span>)</span><br><span class="line">        self.lock.release()</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ts = [FetchUrls(url, file, lock, name=url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[t.start() <span class="keyword">for</span> t <span class="keyword">in</span> ts]</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">05</span>,<span class="number">142</span> INFO [http://baidu.com] Lock Acquire</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">05</span>,<span class="number">142</span> INFO [http://baidu.com] File Writed</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">05</span>,<span class="number">271</span> INFO [http://cn.bing.com/] Lock Acquire</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">05</span>,<span class="number">272</span> INFO [http://cn.bing.com/] File Writed</span><br></pre></td></tr></table></figure><h3 id="RLock"><a href="#RLock" class="headerlink" title="RLock"></a>RLock</h3><p><code>RLock</code> 是一个可重用锁，可以多次调用 <code>acquire</code> 而不阻塞，但是 <code>release</code> 时也要执行和 <code>acquire</code> 一样的次数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock = threading.RLock()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.acquire()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.acquire()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.acquire()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rlock.release()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">RuntimeError: cannot release un-acquired lock</span><br></pre></td></tr></table></figure><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>如果多个线程使用 生产者 —&gt; 消费者的模式，可以使用 <code>Condition</code>，生产者生产数据后，通过 <code>notify/notify_all</code> 通知给消费者消费数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s %(levelname)s [%(threadName)s] %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datas: list, cond: threading.Condition, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.cond = cond</span><br><span class="line">        self.datas = datas</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">            logging.info(data)</span><br><span class="line">            self.datas.append(data)</span><br><span class="line">            self.cond.acquire()</span><br><span class="line">            self.cond.notify()</span><br><span class="line">            self.cond.release()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            self.cond.acquire()</span></span><br><span class="line"><span class="string">            self.cond.notify()</span></span><br><span class="line"><span class="string">            self.cond.release()</span></span><br><span class="line"><span class="string">等价于</span></span><br><span class="line"><span class="string">            with self.cond:</span></span><br><span class="line"><span class="string">            self.notify()</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">           无论 notify 还是 wait 都需要先 acquire，然后再 release</span></span><br><span class="line"><span class="string">           一般使用 with 语句</span></span><br><span class="line"><span class="string">            """</span>            </span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datas: list, cond: threading.Condition, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.cond = cond</span><br><span class="line">        self.datas = datas</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            self.cond.acquire()</span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                data = self.datas.pop()</span><br><span class="line">                logging.info(data)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.cond.wait() <span class="comment">#消费者通过 wait 方法等待 生产者 notify</span></span><br><span class="line">            self.cond.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner</span><span class="params">()</span>:</span></span><br><span class="line">    datas = []</span><br><span class="line">    cond = threading.Condition()</span><br><span class="line">    t1 = Producer(datas, cond, name=<span class="string">'producer'</span>)</span><br><span class="line">    t2 = Consumer(datas, cond, name=<span class="string">'consumer'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>runner()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">12</span>,<span class="number">442</span> INFO [producer] <span class="number">89</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">12</span>,<span class="number">442</span> INFO [consumer] <span class="number">89</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">13</span>,<span class="number">445</span> INFO [producer] <span class="number">85</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">13</span>,<span class="number">445</span> INFO [consumer] <span class="number">85</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">14</span>,<span class="number">450</span> INFO [producer] <span class="number">57</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">14</span>,<span class="number">450</span> INFO [consumer] <span class="number">57</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">15</span>,<span class="number">454</span> INFO [producer] <span class="number">65</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">15</span>,<span class="number">454</span> INFO [consumer] <span class="number">65</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">16</span>,<span class="number">458</span> INFO [producer] <span class="number">15</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">14</span>:<span class="number">56</span>:<span class="number">16</span>,<span class="number">459</span> INFO [consumer] <span class="number">15</span></span><br></pre></td></tr></table></figure><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p><code>Event</code> 是一个简单的机制，线程发出一个信号，其他线程等待</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s %(levelname)s [%(threadName)s] %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventProducer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datas: list, event: threading.Event, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.datas = datas</span><br><span class="line">        self.event = event</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">            logging.info(data)</span><br><span class="line">            self.datas.append(data)</span><br><span class="line">            self.event.set()</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventConsumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datas: list, event: threading.Event, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.datas = datas</span><br><span class="line">        self.event = event</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            self.event.wait() <span class="comment"># wait 方法阻塞 消费者线程</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = self.datas.pop()</span><br><span class="line">                logging.info(data)</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner</span><span class="params">()</span>:</span></span><br><span class="line">    event = threading.Event()</span><br><span class="line">    datas = []</span><br><span class="line">    t1 = EventProducer(datas, event, name=<span class="string">'EventProducer'</span>)</span><br><span class="line">    t2 = EventConsumer(datas, event, name=<span class="string">'EventConsumer'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>runner()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">54</span>,<span class="number">251</span> INFO [EventProducer] <span class="number">82</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">54</span>,<span class="number">251</span> INFO [EventConsumer] <span class="number">82</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">55</span>,<span class="number">261</span> INFO [EventProducer] <span class="number">37</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">55</span>,<span class="number">261</span> INFO [EventConsumer] <span class="number">37</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">56</span>,<span class="number">270</span> INFO [EventProducer] <span class="number">92</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">18</span>:<span class="number">56</span>,<span class="number">271</span> INFO [EventConsumer] <span class="number">92</span></span><br></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>之前的几个 提供者 —&gt; 消费者 的例子 一直用一个全局的列表来传递数据，其实不是很科学，不同线程传递数据应该使用 <code>Queue</code> ，因为 <code>Queue</code> 本身也可以阻塞线程，使用 <code>Queue</code> 还可以省去同步</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, format=<span class="string">'%(asctime)s %(levelname)s [%(threadName)s] %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueProducer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue: queue.Queue<span class="params">()</span>, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.queue = queue</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">            logging.info(data)</span><br><span class="line">            self.queue.put(data)</span><br><span class="line">            sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueConsumer</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue: queue.Queue, name=None)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.queue = queue</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.queue.get()</span><br><span class="line">            logging.info(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner</span><span class="params">()</span>:</span></span><br><span class="line">    q = queue.Queue()</span><br><span class="line">    t1 = QueueProducer(q, name=<span class="string">'QueueProducer'</span>)</span><br><span class="line">    t2 = QueueConsumer(q, name=<span class="string">'QueueConsumer'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>runner()</span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">34</span>:<span class="number">49</span>,<span class="number">401</span> INFO [QueueProducer] <span class="number">82</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">34</span>:<span class="number">49</span>,<span class="number">401</span> INFO [QueueConsumer] <span class="number">82</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">34</span>:<span class="number">50</span>,<span class="number">405</span> INFO [QueueProducer] <span class="number">2</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">34</span>:<span class="number">50</span>,<span class="number">405</span> INFO [QueueConsumer] <span class="number">2</span></span><br><span class="line"><span class="number">2017</span><span class="number">-03</span><span class="number">-13</span> <span class="number">16</span>:<span class="number">34</span>:<span class="number">51</span>,<span class="number">406</span> INFO [QueueProducer] <span class="number">74</span></span><br></pre></td></tr></table></figure><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><p>提到 Python 多线程就一定要说说 <code>GIL</code> <code>Global Interpreter Lock</code> 全局解释器锁，由于 <code>GIL</code> 的存在，Python 的线程不能达到真正的并行，在 CPython <code>(C语言实现的 Python)</code> 中 线程使用的是操作系统原生的线程</p><p>CPython 中，一个解释器有一条主线程，和若干条用户程序的线程，由于 <code>GIL</code> 的存在，每一个进程要执行时，都要去获取 <code>GIL</code> ，所以并不能有效的利用多核 CPU 实现多线程并行，也就是说，多个线程不能够同时执行</p><p>如果要实现真正的并行，就需要使用 <code>multiprocessing</code> 这个多进程模块了</p><blockquote><p>参考资料</p><p><a href="http://www.laurentluce.com/posts/python-threads-synchronization-locks-rlocks-semaphores-conditions-events-and-queues/" target="_blank" rel="noopener">Python Threads synchronization</a></p><p><a href="https://zh.wikipedia.org/wiki/GIL" target="_blank" rel="noopener">GIL Wikipedia</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们写的程序需要并发时，我们就需要用到 Python 中的一些并发库，例如 &lt;code&gt;asyncio&lt;/code&gt;、&lt;code&gt;thread&lt;/code&gt;、 &lt;code&gt;multiprocessing&lt;/code&gt; 等，本文主要介绍 Python 标准库中的多线程库 &lt;code&gt;thread&lt;/code&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Python - 元类</title>
    <link href="https://anyisalin.github.io/2017/03/10/python-metaclass/"/>
    <id>https://anyisalin.github.io/2017/03/10/python-metaclass/</id>
    <published>2017-03-10T03:12:02.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>元类是 Python 的黑魔法之一，大多数人都不需要掌握，但是可以用来装逼，所以写一篇元类的博客</p><a id="more"></a><h2 id="类是实例"><a href="#类是实例" class="headerlink" title="类是实例"></a>类是实例</h2><p>类是描述如何产生一个对象的代码段，就像下面的代码一样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Name &#123;&#125;, Age &#123;&#125;'</span>.format(self.name, self.age))</span><br></pre></td></tr></table></figure><p>然而 Python 中的类不止如此，在 Python 中类也是一个对象，是 <code>type</code> 的实例</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Person.__class__</span><br><span class="line">type</span><br></pre></td></tr></table></figure><p>既然类也是一个对象，我们就可以将它</p><ul><li>赋值给变量</li><li>当参数传递</li><li>复制</li><li>添加属性</li></ul><p>就像下面的代码一样</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cls_add_method</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">haha</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'haha'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">'haha'</span>):</span><br><span class="line">        setattr(cls, <span class="string">'haha'</span>, haha)</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"><span class="meta">@cls_add_method  # 等价于 A = cls_add_method(A)   </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A.haha()</span><br><span class="line">haha</span><br></pre></td></tr></table></figure><h2 id="type-的神奇用法"><a href="#type-的神奇用法" class="headerlink" title="type 的神奇用法"></a>type 的神奇用法</h2><p><code>type</code> 是一个非常古老的函数，我们可以通过它来获取对象的类，但是它的神奇之处在于 可以通过参数来创建并返回一个类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(<span class="string">'A'</span>, (), &#123;&#125;)</span><br><span class="line">__main__.A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的代码等价于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>type</code> 接收三个参数，<code>类名</code>、<code>继承列表</code>、<code>类字典</code></p><p><strong>继承</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>B = type(<span class="string">'B'</span>, (), &#123;<span class="string">'a'</span>: <span class="string">'c'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C = type(<span class="string">'C'</span>, (B,), &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.__mro__</span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.B'&gt;, &lt;class 'object'&gt;)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.a</span><br><span class="line"><span class="string">'c'</span></span><br></pre></td></tr></table></figure><p><strong>添加方法</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'abbaa'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.b = b</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.b()</span><br><span class="line"><span class="string">'abbaa'</span></span><br></pre></td></tr></table></figure><h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>其实元类就是 类的类，<code>type</code> 就是一个元类，控制 Python 所有类的创建，无论是 <code>int</code> 、<code>str</code>、<code>list</code> 等类都是由 <code>type</code> 控制创建的，它们的元类都是 <code>type</code> </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">lst</span>.<span class="title">__class__</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以自定义元类</p><p>其实元类不一定是一个类，只需要是一个 <code>callable</code> 对象即可，下面这个例子，定义了一个将一个类的所有属性变为大写的函数，通过 <code>metaclass</code> 来指定一个自定义的元类</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upperclass</span><span class="params">(clsname, bases, clsdict)</span>:</span></span><br><span class="line">    upper_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, val <span class="keyword">in</span> clsdict.items():</span><br><span class="line">        <span class="keyword">if</span> key.startswith(<span class="string">'_'</span>):</span><br><span class="line">            upper_dict[key] = val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            upper_dict[key.upper()] = val</span><br><span class="line">    <span class="keyword">return</span> type(clsname, bases, upper_dict)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(metaclass=upperclass)</span>:</span></span><br><span class="line">    a = <span class="string">'c'</span></span><br><span class="line">    b = <span class="string">'d'</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = D()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.a</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'D'</span> object has no attribute <span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.A</span><br><span class="line"><span class="string">'c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.b</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'D'</span> object has no attribute <span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.A</span><br><span class="line"><span class="string">'c'</span></span><br></pre></td></tr></table></figure><p>但是毕竟是元类嘛，当然要用类啊，标准的做法是定义一个类，通过 <code>__new__</code> 方法返回一个新的类，</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpperClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line">        upper_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, val <span class="keyword">in</span> clsdict.items():</span><br><span class="line">            <span class="keyword">if</span> key.startswith(<span class="string">'_'</span>):</span><br><span class="line">                upper_dict[key] = val</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                upper_dict[key.upper()] = val</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, clsname, bases, upper_dict)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(metaclass=UpperClass)</span>:</span></span><br><span class="line">    a = <span class="string">'c'</span></span><br><span class="line">    d = <span class="string">'e'</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>D.a</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: type object <span class="string">'D'</span> has no attribute <span class="string">'a'</span></span><br></pre></td></tr></table></figure><p>为什么用类，不用函数</p><ul><li>使用 oop, 代码简洁明了</li><li>可以使用 <code>__new__</code> 、<code>__init__</code>、<code>__call__</code> 干更多的事情</li><li>元类可以从元类继承方法，或者使用元类，嗯，很高大上</li><li>因为是元类，所以用类</li></ul><p>事实上，元类只做这几件事</p><ul><li>拦截类的创建</li><li>修改类</li><li>返回修改后的类</li></ul><blockquote><p>参考资料:</p><ul><li><a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="noopener"><a href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python" target="_blank" rel="noopener">What is a metaclass in Python? Slackoverflow</a></a></li><li><a href="https://www.youtube.com/watch?v=sPiWg5jSoZI" target="_blank" rel="noopener">Python3 元编程 PyCon  David beazley</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;元类是 Python 的黑魔法之一，大多数人都不需要掌握，但是可以用来装逼，所以写一篇元类的博客&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Python - 描述器</title>
    <link href="https://anyisalin.github.io/2017/03/08/python-descriptor/"/>
    <id>https://anyisalin.github.io/2017/03/08/python-descriptor/</id>
    <published>2017-03-08T12:26:52.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 很多时候我们可能需要对某个实例的属性加上除了修改、访问之外的其他处理逻辑，例如 类型检查、数值校验等，就需要用到描述器 《Python Cookbook》</p></blockquote><a id="more"></a><p>我们可以使用 Python 自带的 <code>property</code> 装饰器 来控制属性的访问，下面这个例子通过 <code>property</code> 控制了 Person 的 age 属性的访问和修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None, age=None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'Must be &#123;&#125;'</span>.format(int))</span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'Value Must &lt; 200'</span>)</span><br><span class="line">        self._age = value</span><br></pre></td></tr></table></figure><p>试一试，的确如代码写的一样，对属性的类型进行了检查，而且使用了 <code>property</code> 装饰器之后，对 age 方法的访问和对属性的访问一样，不需要加 <code>()</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Person()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.age</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.age = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.age</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.age = <span class="string">'a'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"person.py"</span>, line <span class="number">14</span>, <span class="keyword">in</span> age</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">'Must be &#123;&#125;'</span>.format(int))</span><br><span class="line">AttributeError: Must be &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; a.age = 201</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"person.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> age</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">'Value Must &lt; 200'</span>)</span><br><span class="line">AttributeError: Value Must &lt; <span class="number">200</span></span><br></pre></td></tr></table></figure><p>那么 <code>property</code> 是怎么实现的呢，这就要说到本文的主题 描述器了</p><h2 id="描述器"><a href="#描述器" class="headerlink" title="描述器"></a>描述器</h2><p>Python 有三个特殊方法，<code>__get__</code>、<code>__set__</code>、<code>__delete__</code>，用于覆盖属性的一些默认行为，如果一个类定义了其中一个方法，那么它的实例就是描述器</p><p>下面是一个简单的描述器的示例，Descriptor 是一个实现了 <code>__get__</code>、<code>__set__</code> 的类，可以为其实例访问和修改时打印信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initvar=None, name=<span class="string">'var'</span>)</span>:</span></span><br><span class="line">        self.initvar = initvar</span><br><span class="line">        self.name = name</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        print(<span class="string">'Get'</span>, self.name)</span><br><span class="line">        <span class="keyword">return</span> self.initvar</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'Set'</span>, self.name, value)</span><br><span class="line">        self.initvar = value</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line">    a = Descriptor(<span class="number">10</span>, <span class="string">'a'</span>)</span><br><span class="line">    b = Descriptor(<span class="number">20</span>, <span class="string">'b'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = E()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.a</span><br><span class="line">Get a</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.b</span><br><span class="line">Get b</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.b = <span class="number">10</span></span><br><span class="line">Set b <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.b = <span class="number">30</span></span><br><span class="line">Set b <span class="number">30</span></span><br></pre></td></tr></table></figure><p>描述器是一种代理机制，对属性的操作由这个描述器来代理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">访问: __get__(self, instance, cls) <span class="comment"># instance 代表实例本身，cls 表示类本身，使用类直接访问时，instance 为 None</span></span><br><span class="line">赋值: __set__(self, instance, value) <span class="comment"># instance 为实例，value 为值</span></span><br><span class="line">删除: __delete__(self, instance) <span class="comment"># instance 为实例</span></span><br></pre></td></tr></table></figure><p>下面这个例子列出了不同情况下 <code>instance</code> 和 <code>cls</code> 的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDescriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        print(<span class="string">'instance'</span>, instance)</span><br><span class="line">        print(<span class="string">'class'</span>, cls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(instance)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        print(instance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span>:</span></span><br><span class="line">    f = TestDescriptor()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = F()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.f</span><br><span class="line">instance &lt;__main__.F object at <span class="number">0x10ff2fa20</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">F</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; f.f = 'c'</span><br><span class="line">&lt;__main__.F object at <span class="number">0x10ff2fa20</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> f.f</span><br><span class="line">&lt;__main__.F object at <span class="number">0x10ff2fa20</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>F.f</span><br><span class="line">instance <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">F</span>'&gt;</span></span><br></pre></td></tr></table></figure><h2 id="getattribute"><a href="#getattribute" class="headerlink" title="getattribute"></a><strong>getattribute</strong></h2><p>描述器的 <code>__get__</code> 方法 是通过 <code>__getattribute__</code> 调用的，实际上，Python 中访问实例属性时，<code>__getattribute__</code> 就会被调用，<code>__getattribute__</code> 会查找整个继承链，直到找到属性，如果没有找到属性，但是定义了 <code>__getattr__</code> ，那么就会调用 <code>__getattr__</code> 去查找属性，否则抛出 <code>AttributeError</code></p><p><code>__getattribute__</code> 的代码用 Python 实现如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">    val = super().__getattribute__(key)</span><br><span class="line">    <span class="keyword">if</span> hasattr(val, <span class="string">'__get__'</span>):</span><br><span class="line">        <span class="keyword">return</span> val.__get__(<span class="keyword">None</span>, self)</span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure><p>可以做个测试，重写 <code>__getattribute__</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        self.name = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    d = Descriptor(<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key == <span class="string">'d'</span>:</span><br><span class="line">            val = self.__class__.__dict__[<span class="string">'d'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            val = super().__getattribute__(key)</span><br><span class="line">        <span class="keyword">if</span> hasattr(val, <span class="string">'__get__'</span>):</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'NO DESCRIPTOR !!!!!'</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure><p>访问描述器被 <code>__getattribute__</code> 拦截了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.d</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-3</span>-c1e2befe291e&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 c.d</span><br><span class="line"></span><br><span class="line">&lt;ipython-input<span class="number">-1</span><span class="number">-1</span>c75c3b76140&gt; <span class="keyword">in</span> __getattribute__(self, key)</span><br><span class="line">     <span class="number">20</span>             val = super().__getattribute__(key)</span><br><span class="line">     <span class="number">21</span>         <span class="keyword">if</span> hasattr(val, <span class="string">'__get__'</span>):</span><br><span class="line">---&gt; 22             raise AttributeError('NO DESCRIPTOR !!!!!')</span><br><span class="line">     <span class="number">23</span>         <span class="keyword">return</span> val</span><br><span class="line">     <span class="number">24</span></span><br><span class="line"></span><br><span class="line">AttributeError: NO DESCRIPTOR !!!!!</span><br></pre></td></tr></table></figure><h2 id="data-descriptor-and-no-data-descriptor"><a href="#data-descriptor-and-no-data-descriptor" class="headerlink" title="data-descriptor and no-data descriptor"></a>data-descriptor and no-data descriptor</h2><p>如果一个实例只定义了 <code>__get__</code> 那么，它就是一个非资料描述器 <code>no-data descriptor</code> ，如果同时定义了 <code>__get__</code> 和 <code>__set__</code> 那么就是资料描述器 <code>data descriptor</code></p><p>它们的区别在于，如果实例字典中有与描述器同名的属性，如果是资料描述器，则优先使用资料描述器，否则使用实例字典中的属性</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbsPriorityDescriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        self.name = value</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoPriorityDescriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line">    a = AbsPriorityDescriptor(<span class="string">'a'</span>)</span><br><span class="line">    b = NoPriorityDescriptor(<span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><p>测试，可以看出来，资料描述器 <code>a</code> 忽略了实例字典的值，而非资料描述器则被覆盖</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.__dict__[<span class="string">'a'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(c).__dict__[<span class="string">'a'</span>]</span><br><span class="line">&lt;__main__.AbsPriorityDescriptor object at <span class="number">0x1091336d8</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.__dict__[<span class="string">'a'</span>] = <span class="string">'ccccc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.a</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.b</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.__dict__[<span class="string">'b'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.__dict__[<span class="string">'b'</span>] = <span class="string">'cccc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.b</span><br><span class="line"><span class="string">'cccc'</span></span><br></pre></td></tr></table></figure><h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><h3 id="实现类型检查"><a href="#实现类型检查" class="headerlink" title="实现类型检查"></a>实现类型检查</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typed</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">    ty = object</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.ty):</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'Must be &#123;&#125;'</span>.format(self.ty))</span><br><span class="line">        super().__set__(instance, value)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    ty = int</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Float</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    ty = float</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    ty = str</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boolean</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    ty = bool</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = String(<span class="string">'name'</span>)</span><br><span class="line">    age = Integer(<span class="string">'age'</span>)</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Person()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.name = <span class="number">1</span></span><br><span class="line"><span class="comment"># ignore error</span></span><br><span class="line">AttributeError: Must be &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; c.name = 'aaaa'</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.age = <span class="string">'aaa'</span></span><br><span class="line"><span class="comment"># ignore error</span></span><br><span class="line">AttributeError: Must be &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">&gt;&gt;&gt; c.age = 18</span><br></pre></td></tr></table></figure><h3 id="property-的实现"><a href="#property-的实现" class="headerlink" title="property 的实现"></a>property 的实现</h3><p>虽然 <code>property</code> 是 C 代码实现的，但是我们可以模拟出 Python 的 Property </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Property</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget, fset=None, fdel=None)</span>:</span> <span class="comment">#no defined fdoc</span></span><br><span class="line">        self.fget = fget</span><br><span class="line">        self.fset = fset</span><br><span class="line">        self.fdel = fdel</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.fget(instance)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.fset <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'can not set'</span>)</span><br><span class="line">        self.fset(instance, value)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.fdel <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">'can not delete'</span>)</span><br><span class="line">       self.fdel(instance)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setter</span><span class="params">(self, fset)</span>:</span></span><br><span class="line">        self.fset = fset</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleter</span><span class="params">(self, fdel)</span>:</span></span><br><span class="line">        self.fdel = fdel</span><br><span class="line">        <span class="keyword">return</span> self</span><br></pre></td></tr></table></figure><p>使用自定义的 Property</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">geta</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._a</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">seta</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._a = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dela</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._a</span><br><span class="line">    a = Property(fget=geta, fset=seta, fdel=dela)</span><br></pre></td></tr></table></figure><h3 id="staticmethod-实现"><a href="#staticmethod-实现" class="headerlink" title="staticmethod 实现"></a>staticmethod 实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticMethod</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls=None)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.func</span><br></pre></td></tr></table></figure><h3 id="classmethod-实现"><a href="#classmethod-实现" class="headerlink" title="classmethod 实现"></a>classmethod 实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassMethod</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            cls = type(instance)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">new_func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self.func(cls, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> new_func</span><br></pre></td></tr></table></figure><blockquote><p>参考资料</p><ul><li><a href="https://www.youtube.com/watch?v=sPiWg5jSoZI" target="_blank" rel="noopener">Python3 元编程 PyCon  David beazley</a></li><li><a href="https://docs.python.org/3/howto/descriptor.html#static-methods-and-class-methods" target="_blank" rel="noopener">Python Descriptor How to Guide</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 很多时候我们可能需要对某个实例的属性加上除了修改、访问之外的其他处理逻辑，例如 类型检查、数值校验等，就需要用到描述器 《Python Cookbook》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Python - 上下文管理</title>
    <link href="https://anyisalin.github.io/2017/03/07/python-context-manager/"/>
    <id>https://anyisalin.github.io/2017/03/07/python-context-manager/</id>
    <published>2017-03-07T03:36:15.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果需要精确的分配和释放资源，就需要上下文管理 <code>context manager</code> ，上下文管理器在 Python 中最常见的例子就是 <code>with</code> 语句</p><a id="more"></a><h2 id="有状态资源的管理"><a href="#有状态资源的管理" class="headerlink" title="有状态资源的管理"></a>有状态资源的管理</h2><p>很多时候我们需要操作一些有状态的资源，例如 类文件、套接字等</p><p>通常情况下我们会 建立连接 —&gt; 做一些事 —&gt; 释放连接</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = open(<span class="string">'aaaa'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'hello, world'</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'hello.org'</span>, <span class="number">20333</span>))</span><br><span class="line">s.sendall(<span class="string">'hello, world'</span>)</span><br><span class="line">print(s.recv(<span class="number">1024</span>))</span><br></pre></td></tr></table></figure><p>如果没有 <code>close</code> ，只有程序中断或者服务端主动关闭才会释放资源，否则会一直占用资源，有兴趣的朋友可以试试下面的代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">files = []</span><br><span class="line">file = open(<span class="string">'aaaa'</span>, <span class="string">'w'</span>)</span><br><span class="line">file.write(<span class="string">'aaaaa'</span>)</span><br><span class="line">file.close()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000009</span>):</span><br><span class="line">    files.append(open(<span class="string">'aaaa'</span>, <span class="string">'w'</span>))</span><br></pre></td></tr></table></figure><p>在 macOS/Linux 上会抛出 <code>OS Error</code> 的异常，因为打开的 <code>file descriptor</code> 超过限制了，Windows 估计会蓝屏 😀</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OSError: [Errno <span class="number">24</span>] Too many open files</span><br></pre></td></tr></table></figure><h3 id="try-finally-清理资源"><a href="#try-finally-清理资源" class="headerlink" title="try..finally 清理资源"></a>try..finally 清理资源</h3><p>我们也可以通过 try..finally 语句来实现对资源的清理，无论是否触发异常，最后都将清理资源</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'w'</span>, <span class="string">'w'</span>)</span><br><span class="line">    f.write(<span class="string">'hello, world'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h3 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h3><p>如果看过一些 Python 的教程或者书籍的朋友可能会了解，操作文件和套接字都建议使用 <code>with</code> 语句</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'aaa'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'hello, world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> f.closed</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><code>with</code> 语句下操作文件的代码非常的简洁，并且能够自动关闭文件，这是因为 <code>TextIOWrapper</code> 这个类实现了 <code>__enter__</code>、<code>__exit__</code> 这两个魔术方法，也就是所谓的上下文管理</p><p>我们也可以自己实现一个 <code>Open</code> 类，使其实现上下文管理</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file, mode)</span>:</span></span><br><span class="line">        self.open_file = open(file, mode)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.open_file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *exception)</span>:</span></span><br><span class="line">        self.open_file.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> Open(<span class="string">'aaaa'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span> f.closed</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p><code>__enter__</code> 方法是在 with 初始化时调用，<code>__exit__</code> 方法在所有语句结束后调用，可以用来处理异常和关闭资源</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>上下文管理器根据<code>__exit__</code> 方法的返回值来决定是否抛出异常，如果没有返回值或者返回值为 <code>False</code> ，则异常由上下文管理器处理，如果为 <code>True</code> 则由用户自己处理</p><p><code>__exit__</code> 接受三个参数，exception_type、exception_value、traceback，我们可以根据这些值来决定是否处理异常</p><p>下面这个例子，捕捉了 <code>AttributeError</code> 的异常，并打印出警告</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Open</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file, mode)</span>:</span></span><br><span class="line">        self.open_file = open(file, mode)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.open_file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, tb)</span>:</span></span><br><span class="line">        self.open_file.close()</span><br><span class="line">        <span class="keyword">if</span> type <span class="keyword">is</span> AttributeError:</span><br><span class="line">            print(<span class="string">'handing some exception'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>试着故意打错方法的名称，并没有引发异常</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> Open(<span class="string">'aaa'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.writeee(<span class="string">'aaaa'</span>)</span><br><span class="line">handing some exception</span><br></pre></td></tr></table></figure><h2 id="使用-contextmanager"><a href="#使用-contextmanager" class="headerlink" title="使用 contextmanager"></a>使用 contextmanager</h2><p>由于上下文管理非常有用，Python 中有一个专门用于实现上下文管理的标准库，这就是 <code>contextlib</code> </p><p>有了 <code>contextlib</code> 创建上下文管理的最好方式就是使用 <code>contextmanager</code> 装饰器，通过 <code>contextmanager</code> 装饰一个生成器函数，<code>yield</code> 语句前面的部分被认为是 <code>__enter__</code> 方法的代码，后面的部分被认为是 <code>__exit__</code> 方法的代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file</span><span class="params">(path, mode)</span>:</span></span><br><span class="line">    open_file = open(path, mode)</span><br><span class="line">    <span class="keyword">yield</span> open_file</span><br><span class="line">    open_file.close()</span><br></pre></td></tr></table></figure><p>通过上面这种方法，我们就能够简单的创建一个支持上下文管理的函数</p><h3 id="contextmanager-的简单实现"><a href="#contextmanager-的简单实现" class="headerlink" title="contextmanager 的简单实现"></a>contextmanager 的简单实现</h3><p>我之前实现过一个非常粗糙的 <code>contextmanager</code> 装饰器</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line">        self.fn = fn</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> next(self.fn)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            next(self.fn)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cm</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ContextManager(fn(*args, **kwargs))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cm</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(path, mode)</span>:</span></span><br><span class="line">    open_file = open(path, mode)</span><br><span class="line">    <span class="keyword">yield</span> open_file</span><br><span class="line">    open_file.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果需要精确的分配和释放资源，就需要上下文管理 &lt;code&gt;context manager&lt;/code&gt; ，上下文管理器在 Python 中最常见的例子就是 &lt;code&gt;with&lt;/code&gt; 语句&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Python - 装饰器</title>
    <link href="https://anyisalin.github.io/2017/03/06/python-decorator/"/>
    <id>https://anyisalin.github.io/2017/03/06/python-decorator/</id>
    <published>2017-03-06T12:28:44.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>装饰器是一种软件设计模式，可以动态的修改函数、方法、类的功能，而不需要修改原函数或者重写方法，<a href="https://www.python.org/dev/peps/pep-0318/" target="_blank" rel="noopener">PEP-0318</a> 提出了对装饰器语法的支持，并在 Python 2.4 实现</p><a id="more"></a><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>Python 中函数是可以嵌套的，我们可以写出以下代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parent_func</span><span class="params">(number)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chilren_func1</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello, world, chilren1'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">chilren_func2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello, world, chilren2'</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> chilren_func2</span><br><span class="line">    <span class="keyword">return</span> chilren_func1</span><br></pre></td></tr></table></figure><p>如果我们直接传入数字并调用 <code>parent_func</code>，它会返回一个函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parent_func(<span class="number">3</span>)</span><br><span class="line">&lt;function parent_func.&lt;locals&gt;.chilren_func2 at <span class="number">0x104f0b048</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parent_func(<span class="number">1</span>)</span><br><span class="line">&lt;function parent_func.&lt;locals&gt;.chilren_func1 at <span class="number">0x104ef3f28</span>&gt;</span><br></pre></td></tr></table></figure><p>对其返回的函数再次调用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parent_func(<span class="number">1</span>)()</span><br><span class="line"><span class="string">'hello, world, chilren1'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parent_func(<span class="number">3</span>)()</span><br><span class="line"><span class="string">'hello, world, chilren2'</span></span><br></pre></td></tr></table></figure><h2 id="将函数作为参数"><a href="#将函数作为参数" class="headerlink" title="将函数作为参数"></a>将函数作为参数</h2><p>符合以下两个条件之一就算是高阶函数</p><ul><li>将函数作为参数</li><li>将函数作为返回值</li></ul><p>Python 中自然也可以支持将函数作为参数传入一个函数中，最经典的莫过于 <code>map</code>、<code>reduce</code>、<code>sort</code>、<code>max</code>、<code>filter</code> 等高阶函数</p><p><code>d</code> 是一个 <code>key</code> 和 <code>value</code> 都是 <code>int</code> 的字典, 通过 <code>max</code> 函数取其最大值，默认只能通过对比 <code>key</code> 的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(d)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>但是可以传入一个函数，通过这个函数来进行对比, 这样我们就可以对比字典中 <code>value</code> 的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(d, key=<span class="keyword">lambda</span> x: d[x])</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>有了以上基础后，就可以介绍真正的装饰器了</p><p>所谓 Python 的装饰器就是通过封装来动态修改一个函数或方法</p><p>我们可以传入一个函数到另一个函数中，另一个函数对其的功能进行修改或扩展，并将修改过的函数返回</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decroator_func</span><span class="params">(fn, *args, **kwargs)</span>:</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'start &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">    result = fn(*args, **kwargs)</span><br><span class="line">    print(<span class="string">'end &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>decroator_func(p_hello)</span><br><span class="line">start p_hello</span><br><span class="line">hello, world</span><br><span class="line">end p_hello</span><br></pre></td></tr></table></figure><p>但是上面这种方法不是正确的写法，我们需要嵌套一个 <code>wrapper</code> 函数来修改原函数，并返回修改后的函数，还需要通过一个变量来保存原函数的输出，由封装函数 reutrn </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decroator_func</span><span class="params">(fn)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'start &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">        result = fn(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'end &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br><span class="line"></span><br><span class="line">p_hello = decroator_func(p_hello)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello()</span><br><span class="line">start p_hello</span><br><span class="line">hello, world</span><br><span class="line">end p_hello</span><br></pre></td></tr></table></figure><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>虽然上面这种  <code>p_hello = decroator_func(p_hello)</code>  在功能上没有问题，但是看起来非常的丑陋，Python 可以在定义函数时通过 <code>@</code> 这个语法糖来简化调用装饰器函数的步骤，使得代码更加简洁优雅</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decroator_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><h3 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h3><p>实际上，上面的代码还是有一些问题的，因为装饰器函数其实是返回 <code>wrapper</code> 函数，也就是封装过后的原函数，但是原函数的 <code>docstring</code>、<code>__name__</code> 等属性都被 <code>wrapper</code> 覆盖了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br></pre></td></tr></table></figure><p>那么这时候我们就可以通过 <code>functools</code> 中的 <code>wraps</code> 这个装饰器函数来解决这个问题，我们的代码可以这样写</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decroator_func</span><span class="params">(fn)</span>:</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">    @wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'start &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">        result = fn(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'end &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>再次尝试</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decroator_func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello.__name__</span><br><span class="line"><span class="string">'p_hello'</span></span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><p>函数能接收参数，装饰器函数如果需要传入参数得多封装一层</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep_decroator</span><span class="params">(second)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decroator</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'sleep &#123;&#125; s'</span>.format(second))</span><br><span class="line">            sleep(second)</span><br><span class="line">            result = fn(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decroator</span><br><span class="line"></span><br><span class="line"><span class="meta">@sleep_decroator(3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello()</span><br><span class="line">sleep <span class="number">3</span> s</span><br><span class="line">hello, world</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello.__name__</span><br><span class="line"><span class="string">'p_hello'</span></span><br></pre></td></tr></table></figure><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>Python 也可以使用类作为装饰器，可以让复杂的装饰器更加的优雅</p><p>其实装饰器只需要是一个 <code>callable</code> 对象即可，所以我们需要定义一个 <code>__call__</code> 方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'start &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">            result = fn(*args, **kwargs)</span><br><span class="line">            print(<span class="string">'end &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@Decorator()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello()</span><br><span class="line">start p_hello</span><br><span class="line">hello, world</span><br><span class="line">end p_hello</span><br></pre></td></tr></table></figure><p>上面这种情况下的代码看起来不是很好，但是如果我们定义一个需要传递参数的装饰器，代码就会很简洁</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SleepDecorator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, second)</span>:</span></span><br><span class="line">        self.second = second</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, fn)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'sleep &#123;&#125; s'</span>.format(self.second))</span><br><span class="line">            sleep(self.second)</span><br><span class="line">            result = fn(*args, **kwargs)</span><br><span class="line">print(<span class="string">'end &#123;&#125;'</span>.format(fn.__name__))</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@SleepDecorator(3)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">p_hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p_hello()</span><br><span class="line">sleep <span class="number">3</span> s</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装饰器是一种软件设计模式，可以动态的修改函数、方法、类的功能，而不需要修改原函数或者重写方法，&lt;a href=&quot;https://www.python.org/dev/peps/pep-0318/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP-0318&lt;/a&gt; 提出了对装饰器语法的支持，并在 Python 2.4 实现&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://anyisalin.github.io/tags/python/"/>
    
      <category term="development" scheme="https://anyisalin.github.io/tags/development/"/>
    
  </entry>
  
  <entry>
    <title>Tmuxinator - 轻松管理复杂 tmux 会话</title>
    <link href="https://anyisalin.github.io/2017/03/06/tmuxinator/"/>
    <id>https://anyisalin.github.io/2017/03/06/tmuxinator/</id>
    <published>2017-03-06T07:01:12.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>重度依赖 tmux 的朋友可能会有这样的一个问题, 每次重新打开 tmux, 都需要重新手动创建 window, pane, 并运行各种程序, tmuxinator 就是为了解决这个问题而诞生的。</p><a id="more"></a><blockquote><p> 项目地址: <a href="https://github.com/tmuxinator/tmuxinator" target="_blank" rel="noopener">https://github.com/tmuxinator/tmuxinator</a></p><p> tmux 的版本建议 &gt;= 1.8, 否则可能会出现诡异的错误</p><p> 我的 tmuxinator 配置: <a href="https://github.com/AnyISalIn/hacker_files/tree/master/tmuxinator" target="_blank" rel="noopener">https://github.com/AnyISalIn/hacker_files/tree/master/tmuxinator</a></p></blockquote><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>快速配置工作环境</p><p><img src="/images/demo.gif" alt="demo"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>tmuxinator 是 ruby 的一个 gem 包, 首先要安装 gem</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install gem<span class="comment"># ubuntu</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install -y rubygems <span class="comment"># centos/rhel</span></span></span><br></pre></td></tr></table></figure><p>通过 gem 来安装 tmuxinator</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem install tmuxinator</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>tmuxinator 通过 yaml 格式的配置文件来定义一个 project</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmuxinator new demo <span class="comment">#通过 new demo 命令来创建一个 demo 配置文件</span></span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">~/.tmuxinator/demo.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~/.tmuxinator/demo.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">demo</span> <span class="comment">#tmux 会话名称</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">~/</span> <span class="comment">#全局根目录</span></span><br><span class="line"></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line"><span class="attr">  - editor:</span> <span class="comment">#window 名称</span></span><br><span class="line"><span class="attr">      layout:</span> <span class="string">main-vertical</span> <span class="comment">#布局方式</span></span><br><span class="line"><span class="attr">      panes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">vim</span> <span class="comment">#pane 执行的命令</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">guard</span></span><br><span class="line"><span class="attr">  - server:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">rails</span> <span class="string">s</span> <span class="comment">#window没有多个pane, 执行的命令</span></span><br><span class="line"><span class="attr">  - logs:</span> <span class="string">tail</span> <span class="bullet">-f</span> <span class="string">log/development.log</span></span><br></pre></td></tr></table></figure><p>通过 <code>ls</code> 命令可以列出所有的 project</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmuxinator ls</span></span><br><span class="line">tmuxinator projects:</span><br><span class="line">demo   flask  hexo   work</span><br></pre></td></tr></table></figure><p>可以通过 <code>edit</code> 命令编辑指定的 project, 但是得先指定 <code>$EDITOR</code> 环境变量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> EDITOR=<span class="string">'vim'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmuxinator edit demo</span></span><br></pre></td></tr></table></figure><h3 id="自定义-project"><a href="#自定义-project" class="headerlink" title="自定义 project"></a>自定义 project</h3><p>默认的 project 肯定无法满足我们的需求, 我们需要自己定义 project, 首先我们需要了解 tmuxinator 配置文件中的选项</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">custom_tmux</span> <span class="comment">#默认会话名称</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">~/codes/flask-blog</span> <span class="comment">#全局根目录</span></span><br><span class="line"></span><br><span class="line"><span class="attr">socket_name:</span> <span class="string">foo</span> <span class="comment"># tmux socket 名称</span></span><br><span class="line"><span class="attr">pre:</span> <span class="string">systemctl</span> <span class="string">start</span> <span class="string">mysqld</span> <span class="comment"># 启动项目前运行的命令</span></span><br><span class="line"><span class="attr">pre_window:</span> <span class="string">pyenv</span> <span class="string">local</span> <span class="number">3.5</span><span class="number">.3</span> <span class="comment"># 启动 window 前运行的命令</span></span><br><span class="line"><span class="attr">tmux_options:</span> <span class="bullet">-f</span> <span class="string">~/.tmux.conf.local</span> <span class="comment"># tmux 运行的参数</span></span><br><span class="line"><span class="attr">tmux_command:</span> <span class="string">byobu</span> <span class="comment"># 调用 tmux 的命令, 适用于 tmux 的衍生品/封装</span></span><br><span class="line"><span class="attr">startup_window:</span> <span class="string">logs</span> <span class="comment"># 启动时所在的 window</span></span><br><span class="line"></span><br><span class="line"><span class="attr">windows:</span> <span class="comment"># 定义所有的window</span></span><br><span class="line"><span class="attr">  - editor:</span> <span class="comment"># window 名称</span></span><br><span class="line"><span class="attr">    root:</span> <span class="string">~/</span> <span class="comment"># 可以单独为 window 指定目录</span></span><br><span class="line"><span class="attr">    layout:</span> <span class="string">main-vertical</span> <span class="comment"># 布局</span></span><br><span class="line"><span class="attr">    panes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">vim</span> <span class="comment"># 命令</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">guard</span></span><br><span class="line"><span class="attr">  - server:</span> <span class="string">python</span> <span class="string">manage.py</span> <span class="string">runserver</span></span><br><span class="line"><span class="attr">  - logs:</span> <span class="string">tail</span> <span class="bullet">-f</span> <span class="string">log/flask.log</span></span><br></pre></td></tr></table></figure><h3 id="传递变量"><a href="#传递变量" class="headerlink" title="传递变量"></a>传递变量</h3><p>通过上面的配置虽然可以实现功能, 但是并不够通用, 如果项目的目录变了, 那就得重新修改项目配置文件</p><h4 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmuxinator project /var/www/foo</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">project</span></span><br><span class="line"><span class="attr">root:</span> &lt;%=<span class="ruby"> @args[<span class="number">0</span>] </span>%&gt; <span class="comment"># 根目录通过 arg1 传入</span></span><br></pre></td></tr></table></figure><h4 id="键值参数"><a href="#键值参数" class="headerlink" title="键值参数"></a>键值参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmuxinator project2 workspace=/var/www/foo2</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">project2</span></span><br><span class="line"><span class="attr">root:</span> &lt;%=<span class="ruby"> @settings[<span class="string">"workspace"</span>] </span>%&gt;</span><br></pre></td></tr></table></figure><h3 id="Flask-项目配置示例"><a href="#Flask-项目配置示例" class="headerlink" title="Flask 项目配置示例"></a>Flask 项目配置示例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ~/.tmuxinator/flask.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">flask-dev</span></span><br><span class="line"><span class="attr">root:</span> &lt;%=<span class="ruby"> @args[<span class="number">0</span>] </span>%&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">windows:</span></span><br><span class="line"><span class="attr">    - debug:</span></span><br><span class="line"><span class="attr">        layout:</span> <span class="string">even-horizontal</span></span><br><span class="line"><span class="attr">        panes:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">vim</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">ipython</span></span><br><span class="line"><span class="attr">    - server:</span> <span class="string">python</span> <span class="string">manage.py</span> <span class="string">runserver</span></span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>我们可以通过 <code>start</code> 命令来启动一个 project</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmuxinator start flask ~/codes/flask-blog</span></span><br></pre></td></tr></table></figure><p>但是需要注意一个问题, 如果一个 window 中有多个 pane 的情况下, tmux 需要增加以下两条参数, 不然无法正常执行命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set -g base-index 1</span><br><span class="line">set -g pane-base-index 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重度依赖 tmux 的朋友可能会有这样的一个问题, 每次重新打开 tmux, 都需要重新手动创建 window, pane, 并运行各种程序, tmuxinator 就是为了解决这个问题而诞生的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tmux" scheme="https://anyisalin.github.io/tags/tmux/"/>
    
      <category term="tmuxinator" scheme="https://anyisalin.github.io/tags/tmuxinator/"/>
    
  </entry>
  
  <entry>
    <title>痛改前非, 重新做人</title>
    <link href="https://anyisalin.github.io/2017/03/06/reborn/"/>
    <id>https://anyisalin.github.io/2017/03/06/reborn/</id>
    <published>2017-03-06T06:15:11.000Z</published>
    <updated>2018-02-20T11:43:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作半年多, 虽然学到了很多东西, 但是缺少总结, 想了一下, 重新开博客记录一下技术、生活。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;工作半年多, 虽然学到了很多东西, 但是缺少总结, 想了一下,
        
      
    
    </summary>
    
    
  </entry>
  
</feed>
